MetaHandle subclass: #MetaTransactionnal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Handles-TransactionnalMemoryCWIP'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MetaTransactionnal class	instanceVariableNames: ''!!MetaTransactionnal class methodsFor: 'as yet unclassified' stamp: 'JB 12/2/2010 15:07'!installState	^ self! !Handle subclass: #TransactionalHandle	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Handles-TransactionnalMemoryCWIP'!!TransactionalHandle methodsFor: 'as yet unclassified' stamp: 'JB 12/2/2010 15:07'!initialize	super initialize.	self addState.	self addBehavior! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TransactionalHandle class	instanceVariableNames: ''!!TransactionalHandle class methodsFor: 'as yet unclassified' stamp: 'JB 12/2/2010 15:07'!debugFor: t1 	| t2 t3 |	t1 isLiteral		ifTrue: [^ t1].	t2 := self createHandle.	t3 := Class new setFormat: t1 class format;				 superclass: t1 class superclass;				 setName: 'TM' , t1 class name;				 methodDict: t1 class methodDict.	t2 initializeHandleWith: t1 to: t3.	^ t2! !Object subclass: #TransactionalManager	instanceVariableNames: 'classToBrowse objectPool'	classVariableNames: ''	poolDictionaries: ''	category: 'Handles-TransactionnalMemoryCWIP'!!TransactionalManager methodsFor: 'as yet unclassified' stamp: 'JB 12/2/2010 15:07'!addClass: t1 	| t2 t3 t4 |	t4 := 'TM_' , t1 name.	t2 := Class new setFormat: t1 format;				 superclass: t1 superclass;				 setName: t4.	t3 := t1 methodDict copy				collect: [:t5 | 					t5 methodClass: t2.					t5].	t2 methodDict: t3.	classToBrowse at: t1 put: t2! !!TransactionalManager methodsFor: 'as yet unclassified' stamp: 'JB 12/2/2010 15:07'!addObject: t1 	| t2 |	self addClass: t1 class.	t2 := TransactionalHandle debugFor: t1.	objectPool at: t1 put: t2! !!TransactionalManager methodsFor: 'as yet unclassified' stamp: 'JB 12/2/2010 15:07'!initialize	classToBrowse := Dictionary new.	objectPool := Dictionary new! !!TransactionalManager methodsFor: 'execution' stamp: 'JB 12/2/2010 15:07'!execute: t1 	| t2 |	t2 := self prepareCode: t1.	t2 doIt! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TransactionalManager class	instanceVariableNames: ''!!TransactionalManager class methodsFor: 'as yet unclassified' stamp: 'JB 12/2/2010 15:07'!for: t1 	| t2 |	t2 := self new.	t1		do: [:t3 | t2 addClass: t3].	^ t2! !
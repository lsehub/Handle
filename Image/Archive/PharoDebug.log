THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "includesLocalSelector:" is nil
30 November 2010 12:58:07 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #includesLocalSelector:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	includesLocalSelector: #debugFor:to:
		exception: 	MessageNotUnderstood: receiver of "includesLocalSelector:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OBMessageNode(OBMethodNode)>>displayString
	Receiver: OBMessageNode<nil#debugFor:to:>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Message
#senders->Message

		theClass: 	nil
		selector: 	#debugFor:to:
		message: 	#initializeHandleWith:to:


OBMetaNode>>displayStringForParent:child:
	Receiver: Method
#senders->Message

	Arguments and temporary variables: 
		t1: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		t2: 	OBMessageNode<nil#debugFor:to:>
	Receiver's instance variables: 
		name: 	'Method'
		filters: 	an OrderedCollection(an OBModalFilter)
		edges: 	an OrderedCollection(#senders->Message)
		autoSelect: 	nil
		ancestrySelector: 	nil
		displaySelector: 	#fullName
		doubleClickSelector: 	nil


OBMethodNode(OBNode)>>displayStringForChild:
	Receiver: OBMethodNode<ClassHandle#initializeHandleWith:to:>
	Arguments and temporary variables: 
		t1: 	OBMessageNode<nil#debugFor:to:>
	Receiver's instance variables: 
		metaNode: 	Method
#senders->Message

		theClass: 	ClassHandle
		selector: 	#initializeHandleWith:to:


OBFan>>displayStringForChild:
	Receiver: Fan<#initializeHandleWith:to:, 9>
	Arguments and temporary variables: 
		t1: 	OBMessageNode<nil#debugFor:to:>
	Receiver's instance variables: 
		parent: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		children: 	an Array(OBMessageNode<CapabilityHandle class#debugFor:with:> OBMessa...etc...


[] in OBFan>>list
	Receiver: Fan<#initializeHandleWith:to:, 9>
	Arguments and temporary variables: 
		t1: 	OBMessageNode<nil#debugFor:to:>
	Receiver's instance variables: 
		parent: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		children: 	an Array(OBMessageNode<CapabilityHandle class#debugFor:with:> OBMessa...etc...


Array(SequenceableCollection)>>collect:
	Receiver: an Array(OBMessageNode<CapabilityHandle class#debugFor:with:> OBMessageNode<nil#debugFor:t...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(OBMessageNode<CapabilityHandle class#debugFor:with:> OBMessageNode<nil#debugFor:t...etc...

OBFan>>list
	Receiver: Fan<#initializeHandleWith:to:, 9>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		children: 	an Array(OBMessageNode<CapabilityHandle class#debugFor:with:> OBMessa...etc...


OBList>>list
	Receiver: an OBList
	Arguments and temporary variables: 

	Receiver's instance variables: 
		column: 	an OBColumn()
		selection: 	0
		fan: 	Fan<#initializeHandleWith:to:, 9>


OBColumn>>list
	Receiver: an OBColumn()
	Arguments and temporary variables: 

	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBPluggableListMorph(PluggableListMorph)>>getList
	Receiver: an OBPluggableListMorph(5767168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(562823168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		model: 	an OBColumn()
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(337641472)
		scroller: 	a TransformMorph(562823168)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(825229312)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(836763648)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>getListSize
	Receiver: an OBPluggableListMorph(5767168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(562823168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		model: 	an OBColumn()
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(337641472)
		scroller: 	a TransformMorph(562823168)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(825229312)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(836763648)
		hScrollRangeCache: 	nil


OBLazyListMorph(LazyListMorph)>>getListSize
	Receiver: an OBLazyListMorph(836763648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 170@14
		owner: 	a TransformMorph(562823168)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 170@14
		color: 	Color black
		extension: 	a MorphExtension (372768768)
		listItems: 	#()
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		selectedRow: 	nil
		selectedRows: 	a PluggableSet()
		listSource: 	an OBPluggableListMorph(5767168)
		maxWidth: 	nil


OBLazyListMorph(LazyListMorph)>>listChanged
	Receiver: an OBLazyListMorph(836763648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 170@14
		owner: 	a TransformMorph(562823168)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 170@14
		color: 	Color black
		extension: 	a MorphExtension (372768768)
		listItems: 	#()
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		selectedRow: 	nil
		selectedRows: 	a PluggableSet()
		listSource: 	an OBPluggableListMorph(5767168)
		maxWidth: 	nil


OBPluggableListMorph(PluggableListMorph)>>updateList
	Receiver: an OBPluggableListMorph(5767168)
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(562823168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		model: 	an OBColumn()
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(337641472)
		scroller: 	a TransformMorph(562823168)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(825229312)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(836763648)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>on:list:selected:changeSelected:menu:keystroke:
	Receiver: an OBPluggableListMorph(5767168)
	Arguments and temporary variables: 
		anObject: 	an OBColumn()
		getListSel: 	#list
		getSelectionSel: 	#selection
		setSelectionSel: 	#selection:
		getMenuSel: 	#menu:
		keyActionSel: 	#keystroke:from:
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(562823168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		model: 	an OBColumn()
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(337641472)
		scroller: 	a TransformMorph(562823168)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(825229312)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(836763648)
		hScrollRangeCache: 	nil


OBPluggableListMorph class(PluggableListMorph class)>>on:list:selected:changeSelected:menu:keystroke:
	Receiver: OBPluggableListMorph
	Arguments and temporary variables: 
		anObject: 	an OBColumn()
		getListSel: 	#list
		getSelectionSel: 	#selection
		setSelectionSel: 	#selection:
		getMenuSel: 	#menu:
		keyActionSel: 	#keystroke:from:
	Receiver's instance variables: 
		superclass: 	PluggableListMorph
		methodDict: 	a MethodDictionary(#iconAt:->(OBPluggableListMorph>>#iconAt: "a Com...etc...
		format: 	198
		instanceVariables: 	nil
		organization: 	('events' mouseUp:)
('list management' listMorphClass)
('model ac...etc...
		subclasses: 	nil
		name: 	#OBPluggableListMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Morphic-Morphs'
		traitComposition: 	{}
		localSelectors: 	nil
		prototype: 	nil


OBShoutBuilder(OBMorphBuilder)>>listMorphForColumn:
	Receiver: an OBShoutBuilder
	Arguments and temporary variables: 
		t1: 	an OBColumn()
	Receiver's instance variables: 
		current: 	nil


OBShoutBuilder(OBMorphBuilder)>>pane:with:
	Receiver: an OBShoutBuilder
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		current: 	nil


OBColumn>>buildOn:
	Receiver: an OBColumn()
	Arguments and temporary variables: 
		t1: 	an OBShoutBuilder
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


[] in OBPaneScroller>>basicUpdatePanes
	Receiver: an OBPaneScroller(937164800)
	Arguments and temporary variables: 
		t1: 	an OBColumn()
		t2: 	an OBShoutBuilder
	Receiver's instance variables: 
		bounds: 	18@845 corner: 708@1058
		owner: 	an OBGroupingMorph(788529152)
		submorphs: 	an Array(a TransformMorph(279183360))
		fullBounds: 	18@845 corner: 708@1058
		color: 	Color white
		extension: 	a MorphExtension (250871808) [externalName = scroller ] 
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumnPanel
		sizing: 	2
		panes: 	an OrderedCollection(an OBPane(308019200) an OBPane(27787264))
		transform: 	a TransformMorph(279183360)
		scrollBar: 	a ScrollBar(827064320)


OrderedCollection>>collect:
	Receiver: an OrderedCollection(an OBColumn(state) an OBColumn(initializeHandleWith:to:) an OBColumn(...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBColumn(state) an OBColumn(initializeHandleWith:to:...etc...
		firstIndex: 	3
		lastIndex: 	5


OBPaneScroller>>basicUpdatePanes
	Receiver: an OBPaneScroller(937164800)
	Arguments and temporary variables: 
		t1: 	an OBShoutBuilder
	Receiver's instance variables: 
		bounds: 	18@845 corner: 708@1058
		owner: 	an OBGroupingMorph(788529152)
		submorphs: 	an Array(a TransformMorph(279183360))
		fullBounds: 	18@845 corner: 708@1058
		color: 	Color white
		extension: 	a MorphExtension (250871808) [externalName = scroller ] 
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumnPanel
		sizing: 	2
		panes: 	an OrderedCollection(an OBPane(308019200) an OBPane(27787264))
		transform: 	a TransformMorph(279183360)
		scrollBar: 	a ScrollBar(827064320)


OBPaneScroller>>updatePanes
	Receiver: an OBPaneScroller(937164800)
	Arguments and temporary variables: 
		t1: 	2
	Receiver's instance variables: 
		bounds: 	18@845 corner: 708@1058
		owner: 	an OBGroupingMorph(788529152)
		submorphs: 	an Array(a TransformMorph(279183360))
		fullBounds: 	18@845 corner: 708@1058
		color: 	Color white
		extension: 	a MorphExtension (250871808) [externalName = scroller ] 
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumnPanel
		sizing: 	2
		panes: 	an OrderedCollection(an OBPane(308019200) an OBPane(27787264))
		transform: 	a TransformMorph(279183360)
		scrollBar: 	a ScrollBar(827064320)


OBPaneScroller>>update:
	Receiver: an OBPaneScroller(937164800)
	Arguments and temporary variables: 
		t1: 	#columns
	Receiver's instance variables: 
		bounds: 	18@845 corner: 708@1058
		owner: 	an OBGroupingMorph(788529152)
		submorphs: 	an Array(a TransformMorph(279183360))
		fullBounds: 	18@845 corner: 708@1058
		color: 	Color white
		extension: 	a MorphExtension (250871808) [externalName = scroller ] 
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumnPanel
		sizing: 	2
		panes: 	an OrderedCollection(an OBPane(308019200) an OBPane(27787264))
		transform: 	a TransformMorph(279183360)
		scrollBar: 	a ScrollBar(827064320)


[] in OBColumnPanel(Object)>>changed:
	Receiver: an OBColumnPanel
	Arguments and temporary variables: 
		aParameter: 	an OBPaneScroller(937164800)
		aDependent: 	#columns
	Receiver's instance variables: 
		browser: 	an OBVariablesBrowser
		root: 	OBClassNode<Handle>
		current: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		columns: 	an OrderedCollection(an OBColumn(state) an OBColumn(initializeHandleWi...etc...
		minPanes: 	2
		maxPanes: 	2


DependentsArray>>do:
	Receiver: a DependentsArray(an OBPaneScroller(937164800))
	Arguments and temporary variables: 
		t1: 	[:aDependent | aDependent update: aParameter]
		t2: 	an OBPaneScroller(937164800)
		t3: 	1
		t3LimiT: 	1
	Receiver's instance variables: 
a DependentsArray(an OBPaneScroller(937164800))

OBColumnPanel(Object)>>changed:
	Receiver: an OBColumnPanel
	Arguments and temporary variables: 
		aParameter: 	#columns
	Receiver's instance variables: 
		browser: 	an OBVariablesBrowser
		root: 	OBClassNode<Handle>
		current: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		columns: 	an OrderedCollection(an OBColumn(state) an OBColumn(initializeHandleWi...etc...
		minPanes: 	2
		maxPanes: 	2


OBColumnPanel>>pushColumn:
	Receiver: an OBColumnPanel
	Arguments and temporary variables: 
		t1: 	an OBColumn()
	Receiver's instance variables: 
		browser: 	an OBVariablesBrowser
		root: 	OBClassNode<Handle>
		current: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		columns: 	an OrderedCollection(an OBColumn(state) an OBColumn(initializeHandleWi...etc...
		minPanes: 	2
		maxPanes: 	2


OBColumn>>createNext
	Receiver: an OBColumn(initializeHandleWith:to:)
	Arguments and temporary variables: 
		t1: 	Method
#senders->Message

		t2: 	an OBColumn()
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBColumn>>next
	Receiver: an OBColumn(initializeHandleWith:to:)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBColumnPanel>>selected:
	Receiver: an OBColumnPanel
	Arguments and temporary variables: 
		t1: 	an OBColumn(initializeHandleWith:to:)
		t2: 	nil
	Receiver's instance variables: 
		browser: 	an OBVariablesBrowser
		root: 	OBClassNode<Handle>
		current: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		columns: 	an OrderedCollection(an OBColumn(state) an OBColumn(initializeHandleWi...etc...
		minPanes: 	2
		maxPanes: 	2


OBColumnPanel>>selectionChangedIn:
	Receiver: an OBColumnPanel
	Arguments and temporary variables: 
		t1: 	an OBColumn(initializeHandleWith:to:)
	Receiver's instance variables: 
		browser: 	an OBVariablesBrowser
		root: 	OBClassNode<Handle>
		current: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		columns: 	an OrderedCollection(an OBColumn(state) an OBColumn(initializeHandleWi...etc...
		minPanes: 	2
		maxPanes: 	2


OBColumnPanel>>selectionChanged:
	Receiver: an OBColumnPanel
	Arguments and temporary variables: 
		t1: 	an OBSelectionChanged
	Receiver's instance variables: 
		browser: 	an OBVariablesBrowser
		root: 	OBClassNode<Handle>
		current: 	OBMethodNode<ClassHandle#initializeHandleWith:to:>
		columns: 	an OrderedCollection(an OBColumn(state) an OBColumn(initializeHandleWi...etc...
		minPanes: 	2
		maxPanes: 	2


MessageSend>>valueWithArguments:
	Receiver: MessageSend(#selectionChanged: -> an OBColumnPanel)
	Arguments and temporary variables: 
		anArray: 	an Array(an OBSelectionChanged)
	Receiver's instance variables: 
		receiver: 	an OBColumnPanel
		selector: 	#selectionChanged:
		arguments: 	#()


[] in ActionSequence>>valueWithArguments:
	Receiver: #(MessageSend(#selectionChanged: -> an OBColumnPanel)
MessageSend(#selectionChanged: -> an...etc...
	Arguments and temporary variables: 
		anArray: 	MessageSend(#selectionChanged: -> an OBColumnPanel)
		answer: 	an Array(an OBSelectionChanged)
		each: 	#(nil)
	Receiver's instance variables: 
#(MessageSend(#selectionChanged: -> an OBColumnPanel)
MessageSend(#selectionChanged: -> an...etc...

ActionSequence(SequenceableCollection)>>do:
	Receiver: #(MessageSend(#selectionChanged: -> an OBColumnPanel)
MessageSend(#selectionChanged: -> an...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | answer := each valueWithArguments: anArray]
		index: 	1
		indexLimiT: 	6
	Receiver's instance variables: 
#(MessageSend(#selectionChanged: -> an OBColumnPanel)
MessageSend(#selectionChanged: -> an...etc...

ActionSequence>>valueWithArguments:
	Receiver: #(MessageSend(#selectionChanged: -> an OBColumnPanel)
MessageSend(#selectionChanged: -> an...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(an OBSelectionChanged)
		answer: 	#(nil)
	Receiver's instance variables: 
#(MessageSend(#selectionChanged: -> an OBColumnPanel)
MessageSend(#selectionChanged: -> an...etc...

[] in OBAnnouncer>>announce:
	Receiver: an OBAnnouncer
	Arguments and temporary variables: 
		t2: 	OBSelectionChanged
		t3: 	#(MessageSend(#selectionChanged: -> an OBColumnPanel)
MessageSend(#selectio...etc...
		t4: 	an OBSelectionChanged
	Receiver's instance variables: 
		subscriptions: 	an IdentityDictionary(OBAboutToChange->an ActionSequence(Message...etc...



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #includesLocalSelector:
OBMessageNode(OBMethodNode)>>displayString
OBMetaNode>>displayStringForParent:child:
OBMethodNode(OBNode)>>displayStringForChild:
OBFan>>displayStringForChild:
[] in OBFan>>list
Array(SequenceableCollection)>>collect:
OBFan>>list
OBList>>list
OBColumn>>list
OBPluggableListMorph(PluggableListMorph)>>getList
OBPluggableListMorph(PluggableListMorph)>>getListSize
OBLazyListMorph(LazyListMorph)>>getListSize
OBLazyListMorph(LazyListMorph)>>listChanged
OBPluggableListMorph(PluggableListMorph)>>updateList
OBPluggableListMorph(PluggableListMorph)>>on:list:selected:changeSelected:menu:keystroke:
OBPluggableListMorph class(PluggableListMorph class)>>on:list:selected:changeSelected:menu:keystroke:
OBShoutBuilder(OBMorphBuilder)>>listMorphForColumn:
OBShoutBuilder(OBMorphBuilder)>>pane:with:
OBColumn>>buildOn:
[] in OBPaneScroller>>basicUpdatePanes
OrderedCollection>>collect:
OBPaneScroller>>basicUpdatePanes
OBPaneScroller>>updatePanes
OBPaneScroller>>update:
[] in OBColumnPanel(Object)>>changed:
DependentsArray>>do:
OBColumnPanel(Object)>>changed:
OBColumnPanel>>pushColumn:
OBColumn>>createNext
OBColumn>>next
OBColumnPanel>>selected:
OBColumnPanel>>selectionChangedIn:
OBColumnPanel>>selectionChanged:
MessageSend>>valueWithArguments:
[] in ActionSequence>>valueWithArguments:
ActionSequence(SequenceableCollection)>>do:
ActionSequence>>valueWithArguments:
[] in OBAnnouncer>>announce:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[] in IdentityDictionary(Dictionary)>>keysAndValuesDo:
[] in IdentityDictionary(Dictionary)>>associationsDo:
Array(SequenceableCollection)>>do:
IdentityDictionary(Dictionary)>>associationsDo:
IdentityDictionary(Dictionary)>>keysAndValuesDo:
OBAnnouncer>>announce:
OBColumn>>signalSelectionChanged
OBColumn>>selection:
OBPluggableListMorph(PluggableListMorph)>>changeModelSelection:
OBPluggableListMorph>>mouseUp:
OBPluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
OBPluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableListMorph(Morph)>>processEvent:using:
OBPluggableListMorph(Morph)>>processEvent:
OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Handle class>>debugFor:
30 November 2010 1:26:06 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Handle class(Object)>>doesNotUnderstand: #debugFor:
	Receiver: Handle
	Arguments and temporary variables: 
		aMessage: 	debugFor: an Object
		exception: 	MessageNotUnderstood: Handle class>>debugFor:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addBehavior->(Handle>>#addBehavior "a CompiledM...etc...
		format: 	138
		instanceVariables: 	#('receiver' 'classLookup' 'state' 'configuration')
		organization: 	('accessing' classLookup classLookup: configuration receiver rece...etc...
		subclasses: 	{MetaHandle. ObjectHandle. AbstractMirrorHandle. CapabilityHandle. ...etc...
		name: 	#Handle
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Core'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'Handle debugFor: (Object new);
	classLookup: Class;...etc...
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1531 and character $H and rectangle 0@5...etc...
		stopBlock: 	a CharacterBlock with index 1625 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1690 to: 1698)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(525860864)
		oldInterval: 	(1690 to: 1698)
		pivotBlock: 	a CharacterBlock with index 1625 and character Character cr and rec...etc...
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(525860864)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(995360768)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (195297280) [other:  (blinkStart -> 7881006)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(399769600)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(525860864)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"Advance use of Handle. Need to have fine grain configurat...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(995360768)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (195297280) [other:  (blinkStart -> 7881006)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(399769600)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(525860864)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(995360768)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (195297280) [other:  (blinkStart -> 7881006)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(399769600)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(525860864)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(995360768)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (195297280) [other:  (blinkStart -> 7881006)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(399769600)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(525860864)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	false
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a LessonView
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(525860864)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(525860864)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(525860864)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(995360768)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (195297280) [other:  (blinkStart -> 7881006)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(399769600)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(525860864)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableShoutMorph(399769600)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(995360768)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (195297280) [other:  (blinkStart -> 7881006)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(399769600)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(525860864)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(995360768)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (195297280) [other:  (blinkStart -> 7881006)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(399769600)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(525860864)
	Receiver's instance variables: 
		timeStamp: 	7880498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-46@562
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(525860864)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(995360768)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (195297280) [other:  (blinkStart -> 7881006)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(399769600)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(525860864)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(995360768)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (195297280) [other:  (blinkStart -> 7881006)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(399769600)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForShout(525860864)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1429@355 corner: 1445@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1429@355 corner: 1445@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(725614592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1429@355 1429@355 mouseMove CMD 7879945 nil]
		targetOffset: 	141@630
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7879945 1429 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(485752832) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(485752832) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1429@355 corner: 1445@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1429@355 corner: 1445@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(725614592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1429@355 1429@355 mouseMove CMD 7879945 nil]
		targetOffset: 	141@630
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7879945 1429 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1429@355 corner: 1445@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1429@355 corner: 1445@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(725614592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1429@355 1429@355 mouseMove CMD 7879945 nil]
		targetOffset: 	141@630
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7879945 1429 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	1429@355 corner: 1445@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1429@355 corner: 1445@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(725614592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1429@355 1429@355 mouseMove CMD 7879945 nil]
		targetOffset: 	141@630
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7879945 1429 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	1429@355 corner: 1445@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1429@355 corner: 1445@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(725614592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1429@355 1429@355 mouseMove CMD 7879945 nil]
		targetOffset: 	141@630
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7879945 1429 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 7880498 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	1429@355 corner: 1445@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1429@355 corner: 1445@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(725614592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1429@355 1429@355 mouseMove CMD 7879945 nil]
		targetOffset: 	141@630
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7879945 1429 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(485752832))(a PreDebu...etc...
		lastStepTime: 	7880486
		lastStepMessage: 	nil
		lastCycleTime: 	7880525
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	7880486
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(485752832))(a PreDebu...etc...
		lastStepTime: 	7880486
		lastStepMessage: 	nil
		lastCycleTime: 	7880525
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	7880486
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Handle class(Object)>>doesNotUnderstand: #debugFor:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Handle class>>classLookup:
30 November 2010 1:28:41 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Handle class(Object)>>doesNotUnderstand: #classLookup:
	Receiver: Handle
	Arguments and temporary variables: 
		aMessage: 	classLookup: Class
		exception: 	MessageNotUnderstood: Handle class>>classLookup:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addBehavior->(Handle>>#addBehavior "a CompiledM...etc...
		format: 	138
		instanceVariables: 	#('receiver' 'classLookup' 'state' 'configuration')
		organization: 	('accessing' classLookup classLookup: configuration receiver rece...etc...
		subclasses: 	{MetaHandle. ObjectHandle. AbstractMirrorHandle. CapabilityHandle. ...etc...
		name: 	#Handle
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Core'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '
Handle debugFor: (Object new);
	classLookup: Class...etc...
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1627 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 1627 and character Character cr and rec...etc...
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8035757)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"Advance use of Handle. Need to have fine grain configurat...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8035757)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8035757)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8035757)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(181927936)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	false
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a LessonView
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(181927936)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(181927936)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8035757)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableShoutMorph(99876864)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8035757)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8035757)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(181927936)
	Receiver's instance variables: 
		timeStamp: 	8035256
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-68@558
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8035757)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8035757)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForShout(181927936)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	-46@1085 corner: -30@1101
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-46@1085 corner: -30@1101
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(782761984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-46@1085 -46@1085 mouseMove CMD 8034784 nil]
		targetOffset: 	190@635
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8034784 -46 1085 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(199753728) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(199753728) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	-46@1085 corner: -30@1101
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-46@1085 corner: -30@1101
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(782761984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-46@1085 -46@1085 mouseMove CMD 8034784 nil]
		targetOffset: 	190@635
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8034784 -46 1085 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	-46@1085 corner: -30@1101
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-46@1085 corner: -30@1101
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(782761984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-46@1085 -46@1085 mouseMove CMD 8034784 nil]
		targetOffset: 	190@635
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8034784 -46 1085 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	-46@1085 corner: -30@1101
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-46@1085 corner: -30@1101
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(782761984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-46@1085 -46@1085 mouseMove CMD 8034784 nil]
		targetOffset: 	190@635
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8034784 -46 1085 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	-46@1085 corner: -30@1101
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-46@1085 corner: -30@1101
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(782761984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-46@1085 -46@1085 mouseMove CMD 8034784 nil]
		targetOffset: 	190@635
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8034784 -46 1085 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 8035256 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	-46@1085 corner: -30@1101
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-46@1085 corner: -30@1101
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(782761984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-46@1085 -46@1085 mouseMove CMD 8034784 nil]
		targetOffset: 	190@635
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8034784 -46 1085 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(199753728))(a PreDebu...etc...
		lastStepTime: 	8035237
		lastStepMessage: 	nil
		lastCycleTime: 	8035394
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	8035237
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(199753728))(a PreDebu...etc...
		lastStepTime: 	8035237
		lastStepMessage: 	nil
		lastCycleTime: 	8035394
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	8035237
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Handle class(Object)>>doesNotUnderstand: #classLookup:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>do:
30 November 2010 1:28:58 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

SmallInteger(Object)>>doesNotUnderstand: #do:
	Receiver: 262615632
	Arguments and temporary variables: 
		aMessage: 	do: [:v | self nextPut: v]
		exception: 	MessageNotUnderstood: SmallInteger>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
262615632

LimitedWriteStream(Stream)>>nextPutAll:
	Receiver: a LimitedWriteStream ''
	Arguments and temporary variables: 
		aCollection: 	262615632
	Receiver's instance variables: 
		collection: 	'                                                                  ...etc...
		position: 	0
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[^ stream contents]


LimitedWriteStream(WriteStream)>>nextPutAll:
	Receiver: a LimitedWriteStream ''
	Arguments and temporary variables: 
		t1: 	262615632
		t2: 	nil
	Receiver's instance variables: 
		collection: 	'                                                                  ...etc...
		position: 	0
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[^ stream contents]


LimitedWriteStream>>nextPutAll:
	Receiver: a LimitedWriteStream ''
	Arguments and temporary variables: 
		t1: 	262615632
		t2: 	nil
	Receiver's instance variables: 
		collection: 	'                                                                  ...etc...
		position: 	0
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[^ stream contents]


Object(ClassDescription)>>printOn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream ''
	Receiver's instance variables: 
<<error during printing>>

[] in Object>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		s: 	a LimitedWriteStream ''
	Receiver's instance variables: 
<<error during printing>>

String class(SequenceableCollection class)>>streamContents:limitedTo:
	Receiver: String
	Arguments and temporary variables: 
		blockWithArg: 	[:s | self printOn: s]
		sizeLimit: 	50000
		stream: 	a LimitedWriteStream ''
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 259)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics' displayAt: displayOn: displayOn:at: displayOn:at:tex...etc...
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	nil
		localSelectors: 	nil


Object>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		limitedString: 	nil
	Receiver's instance variables: 
<<error during printing>>

Object>>printString
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
<<error during printing>>

TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1629 and character Character tab and re...etc...
		stopBlock: 	a CharacterBlock with index 1533 and character $( and rectangle 0@56...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1533 to: 1563)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1533 to: 1557)
		pivotBlock: 	a CharacterBlock with index 1563 and character $) and rectangle 192...etc...
		inBackTo: 	false


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1629 and character Character tab and re...etc...
		stopBlock: 	a CharacterBlock with index 1533 and character $( and rectangle 0@56...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1533 to: 1563)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1533 to: 1557)
		pivotBlock: 	a CharacterBlock with index 1563 and character $) and rectangle 192...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1629 and character Character tab and re...etc...
		stopBlock: 	a CharacterBlock with index 1533 and character $( and rectangle 0@56...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1533 to: 1563)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1533 to: 1557)
		pivotBlock: 	a CharacterBlock with index 1563 and character $) and rectangle 192...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1629 and character Character tab and re...etc...
		stopBlock: 	a CharacterBlock with index 1533 and character $( and rectangle 0@56...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1533 to: 1563)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1533 to: 1557)
		pivotBlock: 	a CharacterBlock with index 1563 and character $) and rectangle 192...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1629 and character Character tab and re...etc...
		stopBlock: 	a CharacterBlock with index 1533 and character $( and rectangle 0@56...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1533 to: 1563)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1533 to: 1557)
		pivotBlock: 	a CharacterBlock with index 1563 and character $) and rectangle 192...etc...
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1629 and character Character tab and re...etc...
		stopBlock: 	a CharacterBlock with index 1533 and character $( and rectangle 0@56...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1533 to: 1563)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1533 to: 1557)
		pivotBlock: 	a CharacterBlock with index 1563 and character $) and rectangle 192...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1629 and character Character tab and re...etc...
		stopBlock: 	a CharacterBlock with index 1533 and character $( and rectangle 0@56...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1533 to: 1563)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1533 to: 1557)
		pivotBlock: 	a CharacterBlock with index 1563 and character $) and rectangle 192...etc...
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1629 and character Character tab and re...etc...
		stopBlock: 	a CharacterBlock with index 1533 and character $( and rectangle 0@56...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1533 to: 1563)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1533 to: 1557)
		pivotBlock: 	a CharacterBlock with index 1563 and character $) and rectangle 192...etc...
		inBackTo: 	false


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8053118)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"Advance use of Handle. Need to have fine grain configurat...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8053118)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8053118)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8053118)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(181927936)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	false
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a LessonView
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(181927936)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(181927936)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8053118)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableShoutMorph(99876864)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8053118)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8053118)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(181927936)
	Receiver's instance variables: 
		timeStamp: 	8052606
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	212@572
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8053118)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8053118)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForShout(181927936)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	234@1099 corner: 250@1115
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	234@1099 corner: 250@1115
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(608174080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[234@1099 234@1099 mouseMove CMD 8052208 nil]
		targetOffset: 	212@573
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8052208 234 1099 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(61079552) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(61079552) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	234@1099 corner: 250@1115
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	234@1099 corner: 250@1115
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(608174080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[234@1099 234@1099 mouseMove CMD 8052208 nil]
		targetOffset: 	212@573
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8052208 234 1099 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	234@1099 corner: 250@1115
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	234@1099 corner: 250@1115
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(608174080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[234@1099 234@1099 mouseMove CMD 8052208 nil]
		targetOffset: 	212@573
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8052208 234 1099 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	234@1099 corner: 250@1115
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	234@1099 corner: 250@1115
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(608174080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[234@1099 234@1099 mouseMove CMD 8052208 nil]
		targetOffset: 	212@573
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8052208 234 1099 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	234@1099 corner: 250@1115
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	234@1099 corner: 250@1115
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(608174080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[234@1099 234@1099 mouseMove CMD 8052208 nil]
		targetOffset: 	212@573
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8052208 234 1099 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 8052606 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	234@1099 corner: 250@1115
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	234@1099 corner: 250@1115
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(608174080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[234@1099 234@1099 mouseMove CMD 8052208 nil]
		targetOffset: 	212@573
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8052208 234 1099 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #do:
LimitedWriteStream(Stream)>>nextPutAll:
LimitedWriteStream(WriteStream)>>nextPutAll:
LimitedWriteStream>>nextPutAll:
Object(ClassDescription)>>printOn:
[] in Object>>printStringLimitedTo:
String class(SequenceableCollection class)>>streamContents:limitedTo:
Object>>printStringLimitedTo:
Object>>printString
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>do:
30 November 2010 1:29:26 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

SmallInteger(Object)>>doesNotUnderstand: #do:
	Receiver: 97022383
	Arguments and temporary variables: 
		aMessage: 	do: [:v | self nextPut: v]
		exception: 	MessageNotUnderstood: SmallInteger>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
97022383

LimitedWriteStream(Stream)>>nextPutAll:
	Receiver: a LimitedWriteStream ''
	Arguments and temporary variables: 
		aCollection: 	97022383
	Receiver's instance variables: 
		collection: 	'                                                                  ...etc...
		position: 	0
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[^ stream contents]


LimitedWriteStream(WriteStream)>>nextPutAll:
	Receiver: a LimitedWriteStream ''
	Arguments and temporary variables: 
		t1: 	97022383
		t2: 	nil
	Receiver's instance variables: 
		collection: 	'                                                                  ...etc...
		position: 	0
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[^ stream contents]


LimitedWriteStream>>nextPutAll:
	Receiver: a LimitedWriteStream ''
	Arguments and temporary variables: 
		t1: 	97022383
		t2: 	nil
	Receiver's instance variables: 
		collection: 	'                                                                  ...etc...
		position: 	0
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[^ stream contents]


Object(ClassDescription)>>printOn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream ''
	Receiver's instance variables: 
<<error during printing>>

[] in Object>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		s: 	a LimitedWriteStream ''
	Receiver's instance variables: 
<<error during printing>>

String class(SequenceableCollection class)>>streamContents:limitedTo:
	Receiver: String
	Arguments and temporary variables: 
		blockWithArg: 	[:s | self printOn: s]
		sizeLimit: 	50000
		stream: 	a LimitedWriteStream ''
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 259)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics' displayAt: displayOn: displayOn:at: displayOn:at:tex...etc...
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	nil
		localSelectors: 	nil


Object>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		limitedString: 	nil
	Receiver's instance variables: 
<<error during printing>>

Object>>printString
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
<<error during printing>>

TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1628 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1612 to: 1611)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1564 to: 1563)
		pivotBlock: 	a CharacterBlock with index 1564 and character Character cr and rec...etc...
		inBackTo: 	false


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1628 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1612 to: 1611)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1564 to: 1563)
		pivotBlock: 	a CharacterBlock with index 1564 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1628 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1612 to: 1611)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1564 to: 1563)
		pivotBlock: 	a CharacterBlock with index 1564 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1628 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1612 to: 1611)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1564 to: 1563)
		pivotBlock: 	a CharacterBlock with index 1564 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1628 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1612 to: 1611)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1564 to: 1563)
		pivotBlock: 	a CharacterBlock with index 1564 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1628 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1612 to: 1611)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1564 to: 1563)
		pivotBlock: 	a CharacterBlock with index 1564 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1628 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1612 to: 1611)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1564 to: 1563)
		pivotBlock: 	a CharacterBlock with index 1564 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1532 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1628 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1612 to: 1611)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(181927936)
		oldInterval: 	(1564 to: 1563)
		pivotBlock: 	a CharacterBlock with index 1564 and character Character cr and rec...etc...
		inBackTo: 	false


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8081612)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"Advance use of Handle. Need to have fine grain configurat...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8081612)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8081612)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8081612)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(181927936)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	false
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a LessonView
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(181927936)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(181927936)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8081612)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableShoutMorph(99876864)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8081612)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8081612)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(181927936)
	Receiver's instance variables: 
		timeStamp: 	8081101
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-28@565
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8081612)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(181927936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@898
		owner: 	a TransformMorph(963903488)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@898
		color: 	Color black
		extension: 	a MorphExtension (86245376) [other:  (blinkStart -> 8081612)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(99876864)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForShout(181927936)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	-6@1092 corner: 10@1108
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-6@1092 corner: 10@1108
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(554434560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-6@1092 -6@1092 mouseMove CMD 8080733 nil]
		targetOffset: 	215@568
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8080733 -6 1092 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(293076992) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(293076992) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	-6@1092 corner: 10@1108
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-6@1092 corner: 10@1108
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(554434560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-6@1092 -6@1092 mouseMove CMD 8080733 nil]
		targetOffset: 	215@568
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8080733 -6 1092 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	-6@1092 corner: 10@1108
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-6@1092 corner: 10@1108
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(554434560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-6@1092 -6@1092 mouseMove CMD 8080733 nil]
		targetOffset: 	215@568
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8080733 -6 1092 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	-6@1092 corner: 10@1108
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-6@1092 corner: 10@1108
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(554434560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-6@1092 -6@1092 mouseMove CMD 8080733 nil]
		targetOffset: 	215@568
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8080733 -6 1092 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	-6@1092 corner: 10@1108
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-6@1092 corner: 10@1108
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(554434560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-6@1092 -6@1092 mouseMove CMD 8080733 nil]
		targetOffset: 	215@568
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8080733 -6 1092 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 8081101 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	-6@1092 corner: 10@1108
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	-6@1092 corner: 10@1108
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(554434560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[-6@1092 -6@1092 mouseMove CMD 8080733 nil]
		targetOffset: 	215@568
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8080733 -6 1092 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #do:
LimitedWriteStream(Stream)>>nextPutAll:
LimitedWriteStream(WriteStream)>>nextPutAll:
LimitedWriteStream>>nextPutAll:
Object(ClassDescription)>>printOn:
[] in Object>>printStringLimitedTo:
String class(SequenceableCollection class)>>streamContents:limitedTo:
Object>>printStringLimitedTo:
Object>>printString
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Handle class>>classLookup:
30 November 2010 1:30:59 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Handle class(Object)>>doesNotUnderstand: #classLookup:
	Receiver: Handle
	Arguments and temporary variables: 
		aMessage: 	classLookup: Object
		exception: 	MessageNotUnderstood: Handle class>>classLookup:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addBehavior->(Handle>>#addBehavior "a CompiledM...etc...
		format: 	138
		instanceVariables: 	#('receiver' 'classLookup' 'state' 'configuration')
		organization: 	('accessing' classLookup classLookup: configuration receiver rece...etc...
		subclasses: 	{MetaHandle. ObjectHandle. AbstractMirrorHandle. CapabilityHandle. ...etc...
		name: 	#Handle
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Core'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '
Handle debugFor: (Object new);
	classLookup: Objec...etc...
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1391 and character Character cr and rec...etc...
		stopBlock: 	a CharacterBlock with index 1473 and character Character cr and rect...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"Advance use of Handle. Need to have fine grain config...etc...
		selectionShowing: 	false
		otherInterval: 	(1630 to: 1629)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(904658944)
		oldInterval: 	(1630 to: 1629)
		pivotBlock: 	a CharacterBlock with index 1473 and character Character cr and rec...etc...
		inBackTo: 	false


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(904658944)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@738
		owner: 	a TransformMorph(627572736)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@738
		color: 	Color black
		extension: 	a MorphExtension (1065877504) [other:  (blinkStart -> 8174316)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(204210176)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(904658944)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"Advance use of Handle. Need to have fine grain configurat...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@738
		owner: 	a TransformMorph(627572736)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@738
		color: 	Color black
		extension: 	a MorphExtension (1065877504) [other:  (blinkStart -> 8174316)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(204210176)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(904658944)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@738
		owner: 	a TransformMorph(627572736)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@738
		color: 	Color black
		extension: 	a MorphExtension (1065877504) [other:  (blinkStart -> 8174316)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(204210176)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(904658944)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@738
		owner: 	a TransformMorph(627572736)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@738
		color: 	Color black
		extension: 	a MorphExtension (1065877504) [other:  (blinkStart -> 8174316)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(204210176)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(904658944)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	false
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a LessonView
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(904658944)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(904658944)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(904658944)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@738
		owner: 	a TransformMorph(627572736)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@738
		color: 	Color black
		extension: 	a MorphExtension (1065877504) [other:  (blinkStart -> 8174316)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(204210176)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(904658944)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableShoutMorph(204210176)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@738
		owner: 	a TransformMorph(627572736)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@738
		color: 	Color black
		extension: 	a MorphExtension (1065877504) [other:  (blinkStart -> 8174316)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(204210176)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(904658944)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@738
		owner: 	a TransformMorph(627572736)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@738
		color: 	Color black
		extension: 	a MorphExtension (1065877504) [other:  (blinkStart -> 8174316)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(204210176)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(904658944)
	Receiver's instance variables: 
		timeStamp: 	8173799
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-58@443
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(904658944)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@738
		owner: 	a TransformMorph(627572736)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@738
		color: 	Color black
		extension: 	a MorphExtension (1065877504) [other:  (blinkStart -> 8174316)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(204210176)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(904658944)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 669@738
		owner: 	a TransformMorph(627572736)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 669@738
		color: 	Color black
		extension: 	a MorphExtension (1065877504) [other:  (blinkStart -> 8174316)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Advance use of Handle. Need to have fine grain configuration...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(204210176)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForShout(904658944)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	4@1022 corner: 20@1038
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	4@1022 corner: 20@1038
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(253755392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[4@1022 4@1022 mouseMove CMD 8173322 nil]
		targetOffset: 	126@501
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8173322 4 1022 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(704643072) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(704643072) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	4@1022 corner: 20@1038
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	4@1022 corner: 20@1038
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(253755392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[4@1022 4@1022 mouseMove CMD 8173322 nil]
		targetOffset: 	126@501
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8173322 4 1022 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	4@1022 corner: 20@1038
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	4@1022 corner: 20@1038
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(253755392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[4@1022 4@1022 mouseMove CMD 8173322 nil]
		targetOffset: 	126@501
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8173322 4 1022 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	4@1022 corner: 20@1038
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	4@1022 corner: 20@1038
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(253755392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[4@1022 4@1022 mouseMove CMD 8173322 nil]
		targetOffset: 	126@501
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8173322 4 1022 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	4@1022 corner: 20@1038
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	4@1022 corner: 20@1038
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(253755392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[4@1022 4@1022 mouseMove CMD 8173322 nil]
		targetOffset: 	126@501
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8173322 4 1022 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 8173799 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	4@1022 corner: 20@1038
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	4@1022 corner: 20@1038
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(253755392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[4@1022 4@1022 mouseMove CMD 8173322 nil]
		targetOffset: 	126@501
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8173322 4 1022 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(704643072))(a PreDebu...etc...
		lastStepTime: 	8173795
		lastStepMessage: 	nil
		lastCycleTime: 	8173835
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	8173795
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(704643072))(a PreDebu...etc...
		lastStepTime: 	8173795
		lastStepMessage: 	nil
		lastCycleTime: 	8173835
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	8173795
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Handle class(Object)>>doesNotUnderstand: #classLookup:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "negative" is nil
30 November 2010 2:11:44 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #negative
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	negative
		exception: 	MessageNotUnderstood: receiver of "negative" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Point>>printOn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bitmap ...etc...
	Receiver's instance variables: 
		x: 	nil
		y: 	nil


LimitedWriteStream(Stream)>>print:
	Receiver: a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bitmap SmallInteger By...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		collection: 	'an Array(nil false true #Processor->Processor Bitmap SmallInteger ...etc...
		position: 	2224
		readLimit: 	2224
		writeLimit: 	3200
		limit: 	50000
		limitBlock: 	[^ stream contents]


[] in Array(Collection)>>printElementsOn:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(SequenceableCollection)>>do:separatedBy:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		elementBlock: 	[:element | aStream print: element]
		separatorBlock: 	[aStream space]
		index: 	34
		indexLimiT: 	51
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(Collection)>>printElementsOn:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bi...etc...
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(Collection)>>printOn:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bi...etc...
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array>>printOn:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bi...etc...
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

[] in Array(Object)>>printStringLimitedTo:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		s: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bitmap S...etc...
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

String class(SequenceableCollection class)>>streamContents:limitedTo:
	Receiver: String
	Arguments and temporary variables: 
		blockWithArg: 	[:s | self printOn: s]
		sizeLimit: 	50000
		stream: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bit...etc...
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 259)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics' displayAt: displayOn: displayOn:at: displayOn:at:tex...etc...
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	nil
		localSelectors: 	nil


Array(Object)>>printStringLimitedTo:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		limit: 	50000
		limitedString: 	nil
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(Object)>>printString
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteStrin...etc...
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 51 and rectangle 210@16 corner: 210@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(31 to: 50)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 51 and rectangle 210@16 corner: 210@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(31 to: 50)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 51 and rectangle 210@16 corner: 210@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(31 to: 50)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 51 and rectangle 210@16 corner: 210@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(31 to: 50)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 51 and rectangle 210@16 corner: 210@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(31 to: 50)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 51 and rectangle 210@16 corner: 210@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(31 to: 50)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 51 and rectangle 210@16 corner: 210@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(31 to: 50)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 51 and rectangle 210@16 corner: 210@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(31 to: 50)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(1 to: 0)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10619472)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	an OBTextMorphEditorWithShout
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10619472)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10619472)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10619472)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	an OBTextMorphEditorWithShout
		stringHolder: 	an OBDefinitionPanel
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10619472)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	an OBPluggableTextMorphWithShout(260308992)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10619472)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10619472)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	an OBTextMorphWithShout(649592832)
	Receiver's instance variables: 
		timeStamp: 	10618972
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	284@74
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


OBTextMorphWithShout(Morph)>>handleEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10619472)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(Morph)>>handleFocusEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10619472)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	Smalltalk specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	an OBTextMorphWithShout(649592832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	445@408 corner: 461@424
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	445@408 corner: 461@424
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(389283840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[445@408 445@408 mouseMove CMD 10618429 nil]
		targetOffset: 	397@96
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10618429 445 408 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(277348352) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(277348352) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	445@408 corner: 461@424
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	445@408 corner: 461@424
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(389283840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[445@408 445@408 mouseMove CMD 10618429 nil]
		targetOffset: 	397@96
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10618429 445 408 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	445@408 corner: 461@424
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	445@408 corner: 461@424
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(389283840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[445@408 445@408 mouseMove CMD 10618429 nil]
		targetOffset: 	397@96
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10618429 445 408 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #negative
Point>>printOn:
LimitedWriteStream(Stream)>>print:
[] in Array(Collection)>>printElementsOn:
Array(SequenceableCollection)>>do:separatedBy:
Array(Collection)>>printElementsOn:
Array(Collection)>>printOn:
Array>>printOn:
[] in Array(Object)>>printStringLimitedTo:
String class(SequenceableCollection class)>>streamContents:limitedTo:
Array(Object)>>printStringLimitedTo:
Array(Object)>>printString
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmalltalkImage class>>specialObjectsArray
30 November 2010 2:11:58 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

SmalltalkImage class(Object)>>doesNotUnderstand: #specialObjectsArray
	Receiver: SmalltalkImage
	Arguments and temporary variables: 
		aMessage: 	specialObjectsArray
		exception: 	MessageNotUnderstood: SmalltalkImage class>>specialObjectsArray
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 235)
		format: 	132
		instanceVariables: 	#('globals')
		organization: 	('*System-Object Storage' areThereImageSegments)
('*imageForDevel...etc...
		subclasses: 	nil
		name: 	#SmalltalkImage
		classPool: 	a Dictionary(#CheckChangesFileAvailability->true #CheckSourcesFileAv...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


HowDoUseHandle class>>DoIt
	Receiver: HowDoUseHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	AbstractTutorial
		methodDict: 	a MethodDictionary(#handleFirstStep->(HowDoUseHandle>>#handleFirstS...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('tutorial' tutorial)
('lesson' handleFirstStep handleFourStep ha...etc...
		subclasses: 	nil
		name: 	#HowDoUseHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Documentations'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '
	SmalltalkImage specialObjectsArray '
		requestor: 	an OBTextMorphEditorWithShout
		class: 	HowDoUseHandle class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		rcvr: 	HowDoUseHandle
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	HowDoUseHandle
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 56 and rectangle 247@16 corner: 247@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(34 to: 34)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(31 to: 30)
		pivotBlock: 	a CharacterBlock with index 30 and character $I and rectangle 78@16...etc...
		inBackTo: 	false


[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10632712)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	an OBTextMorphEditorWithShout
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10632712)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10632712)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10632712)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	an OBTextMorphEditorWithShout
		stringHolder: 	an OBDefinitionPanel
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10632712)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	an OBPluggableTextMorphWithShout(260308992)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10632712)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10632712)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	an OBTextMorphWithShout(649592832)
	Receiver's instance variables: 
		timeStamp: 	10632206
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	88@9
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


OBTextMorphWithShout(Morph)>>handleEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10632712)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(Morph)>>handleFocusEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10632712)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	an OBTextMorphWithShout(649592832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	249@343 corner: 265@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	249@343 corner: 265@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(817889280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[249@343 249@343 mouseMove CMD 10631647 nil]
		targetOffset: 	76@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10631647 249 343 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(908328960) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(908328960) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	249@343 corner: 265@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	249@343 corner: 265@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(817889280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[249@343 249@343 mouseMove CMD 10631647 nil]
		targetOffset: 	76@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10631647 249 343 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	249@343 corner: 265@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	249@343 corner: 265@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(817889280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[249@343 249@343 mouseMove CMD 10631647 nil]
		targetOffset: 	76@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10631647 249 343 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	249@343 corner: 265@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	249@343 corner: 265@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(817889280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[249@343 249@343 mouseMove CMD 10631647 nil]
		targetOffset: 	76@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10631647 249 343 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	249@343 corner: 265@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	249@343 corner: 265@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(817889280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[249@343 249@343 mouseMove CMD 10631647 nil]
		targetOffset: 	76@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10631647 249 343 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 10632206 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	249@343 corner: 265@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	249@343 corner: 265@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(817889280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[249@343 249@343 mouseMove CMD 10631647 nil]
		targetOffset: 	76@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10631647 249 343 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(908328960))(a PreDebu...etc...
		lastStepTime: 	10632191
		lastStepMessage: 	nil
		lastCycleTime: 	10632318
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	10632191
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(908328960))(a PreDebu...etc...
		lastStepTime: 	10632191
		lastStepMessage: 	nil
		lastCycleTime: 	10632318
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	10632191
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
SmalltalkImage class(Object)>>doesNotUnderstand: #specialObjectsArray
HowDoUseHandle class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Use current
30 November 2010 2:12:23 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

SmalltalkImage class(Object)>>error:
	Receiver: SmalltalkImage
	Arguments and temporary variables: 
		aString: 	'Use current'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 235)
		format: 	132
		instanceVariables: 	#('globals')
		organization: 	('*System-Object Storage' areThereImageSegments)
('*imageForDevel...etc...
		subclasses: 	nil
		name: 	#SmalltalkImage
		classPool: 	a Dictionary(#CheckChangesFileAvailability->true #CheckSourcesFileAv...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkImage class>>new
	Receiver: SmalltalkImage
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 235)
		format: 	132
		instanceVariables: 	#('globals')
		organization: 	('*System-Object Storage' areThereImageSegments)
('*imageForDevel...etc...
		subclasses: 	nil
		name: 	#SmalltalkImage
		classPool: 	a Dictionary(#CheckChangesFileAvailability->true #CheckSourcesFileAv...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


HowDoUseHandle class>>DoIt
	Receiver: HowDoUseHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	AbstractTutorial
		methodDict: 	a MethodDictionary(#handleFirstStep->(HowDoUseHandle>>#handleFirstS...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('tutorial' tutorial)
('lesson' handleFirstStep handleFourStep ha...etc...
		subclasses: 	nil
		name: 	#HowDoUseHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Documentations'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '	SmalltalkImage new specialObjectsArray '
		requestor: 	an OBTextMorphEditorWithShout
		class: 	HowDoUseHandle class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		rcvr: 	HowDoUseHandle
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	HowDoUseHandle
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 60 and rectangle 276@16 corner: 276@32
...etc...
		stopBlock: 	a CharacterBlock with index 20 and character Character tab and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(38 to: 38)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(33 to: 32)
		pivotBlock: 	a CharacterBlock with index 33 and character $g and rectangle 99@16...etc...
		inBackTo: 	false


[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10658638)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	an OBTextMorphEditorWithShout
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10658638)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10658638)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10658638)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	an OBTextMorphEditorWithShout
		stringHolder: 	an OBDefinitionPanel
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10658638)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	an OBPluggableTextMorphWithShout(260308992)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10658638)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10658638)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	an OBTextMorphWithShout(649592832)
	Receiver's instance variables: 
		timeStamp: 	10658127
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	102@27
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


OBTextMorphWithShout(Morph)>>handleEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10658638)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(Morph)>>handleFocusEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10658638)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage new specialObjectsArray '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	an OBTextMorphWithShout(649592832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	263@361 corner: 279@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	263@361 corner: 279@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(504889344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[263@361 263@361 mouseMove CMD 10657680 nil]
		targetOffset: 	102@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10657680 263 361 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(279445504) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(279445504) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	263@361 corner: 279@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	263@361 corner: 279@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(504889344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[263@361 263@361 mouseMove CMD 10657680 nil]
		targetOffset: 	102@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10657680 263 361 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	263@361 corner: 279@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	263@361 corner: 279@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(504889344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[263@361 263@361 mouseMove CMD 10657680 nil]
		targetOffset: 	102@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10657680 263 361 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	263@361 corner: 279@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	263@361 corner: 279@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(504889344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[263@361 263@361 mouseMove CMD 10657680 nil]
		targetOffset: 	102@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10657680 263 361 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	263@361 corner: 279@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	263@361 corner: 279@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(504889344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[263@361 263@361 mouseMove CMD 10657680 nil]
		targetOffset: 	102@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10657680 263 361 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 10658127 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	263@361 corner: 279@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	263@361 corner: 279@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(504889344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[263@361 263@361 mouseMove CMD 10657680 nil]
		targetOffset: 	102@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10657680 263 361 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(279445504))(a PreDebu...etc...
		lastStepTime: 	10658117
		lastStepMessage: 	nil
		lastCycleTime: 	10658157
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	10658117
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
SmalltalkImage class(Object)>>error:
SmalltalkImage class>>new
HowDoUseHandle class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "negative" is nil
30 November 2010 2:12:32 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #negative
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	negative
		exception: 	MessageNotUnderstood: receiver of "negative" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Point>>printOn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bitmap ...etc...
	Receiver's instance variables: 
		x: 	nil
		y: 	nil


LimitedWriteStream(Stream)>>print:
	Receiver: a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bitmap SmallInteger By...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		collection: 	'an Array(nil false true #Processor->Processor Bitmap SmallInteger ...etc...
		position: 	2224
		readLimit: 	2224
		writeLimit: 	3200
		limit: 	50000
		limitBlock: 	[^ stream contents]


[] in Array(Collection)>>printElementsOn:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(SequenceableCollection)>>do:separatedBy:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		elementBlock: 	[:element | aStream print: element]
		separatorBlock: 	[aStream space]
		index: 	34
		indexLimiT: 	51
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(Collection)>>printElementsOn:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bi...etc...
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(Collection)>>printOn:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bi...etc...
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array>>printOn:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bi...etc...
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

[] in Array(Object)>>printStringLimitedTo:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		s: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bitmap S...etc...
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

String class(SequenceableCollection class)>>streamContents:limitedTo:
	Receiver: String
	Arguments and temporary variables: 
		blockWithArg: 	[:s | self printOn: s]
		sizeLimit: 	50000
		stream: 	a LimitedWriteStream 'an Array(nil false true #Processor->Processor Bit...etc...
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 259)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics' displayAt: displayOn: displayOn:at: displayOn:at:tex...etc...
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	nil
		localSelectors: 	nil


Array(Object)>>printStringLimitedTo:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		limit: 	50000
		limitedString: 	nil
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(Object)>>printString
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteStrin...etc...
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 64 and rectangle 295@16 corner: 295@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(42 to: 42)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(43 to: 42)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 64 and rectangle 295@16 corner: 295@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(42 to: 42)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(43 to: 42)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 64 and rectangle 295@16 corner: 295@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(42 to: 42)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(43 to: 42)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 64 and rectangle 295@16 corner: 295@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(42 to: 42)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(43 to: 42)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 64 and rectangle 295@16 corner: 295@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(42 to: 42)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(43 to: 42)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 64 and rectangle 295@16 corner: 295@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(42 to: 42)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(43 to: 42)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 64 and rectangle 295@16 corner: 295@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(42 to: 42)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(43 to: 42)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 64 and rectangle 295@16 corner: 295@32
...etc...
		stopBlock: 	a CharacterBlock with index 19 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle'
		selectionShowing: 	false
		otherInterval: 	(42 to: 42)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(43 to: 42)
		pivotBlock: 	a CharacterBlock with index 19 and character Character cr and recta...etc...
		inBackTo: 	false


[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10667451)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsArra...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	an OBTextMorphEditorWithShout
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsA...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10667451)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsArra...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10667451)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsArra...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10667451)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsArra...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	an OBTextMorphEditorWithShout
		stringHolder: 	an OBDefinitionPanel
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10667451)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsArra...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	an OBPluggableTextMorphWithShout(260308992)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10667451)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsArra...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10667451)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsArra...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	an OBTextMorphWithShout(649592832)
	Receiver's instance variables: 
		timeStamp: 	10666938
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	171@90
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


OBTextMorphWithShout(Morph)>>handleEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10667451)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsArra...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(Morph)>>handleFocusEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10667451)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	SmalltalkImage current specialObjectsArra...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	an OBTextMorphWithShout(649592832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	332@424 corner: 348@440
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	332@424 corner: 348@440
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(760741888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[333@424 332@424 mouseMove CMD 10666399 nil]
		targetOffset: 	180@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10666399 332 424 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(195035136) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(195035136) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	332@424 corner: 348@440
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	332@424 corner: 348@440
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(760741888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[333@424 332@424 mouseMove CMD 10666399 nil]
		targetOffset: 	180@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10666399 332 424 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	332@424 corner: 348@440
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	332@424 corner: 348@440
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(760741888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[333@424 332@424 mouseMove CMD 10666399 nil]
		targetOffset: 	180@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10666399 332 424 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #negative
Point>>printOn:
LimitedWriteStream(Stream)>>print:
[] in Array(Collection)>>printElementsOn:
Array(SequenceableCollection)>>do:separatedBy:
Array(Collection)>>printElementsOn:
Array(Collection)>>printOn:
Array>>printOn:
[] in Array(Object)>>printStringLimitedTo:
String class(SequenceableCollection class)>>streamContents:limitedTo:
Array(Object)>>printStringLimitedTo:
Array(Object)>>printString
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
30 November 2010 2:13:06 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Array(Object)>>error:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices'
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

Array(Object)>>at:
	Receiver: an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...
	Arguments and temporary variables: 
		t1: 	false
	Receiver's instance variables: 
an Array(nil false true #Processor->Processor Bitmap SmallInteger ByteString Array Smallta...etc...

HowDoUseHandle class>>DoIt
	Receiver: HowDoUseHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	AbstractTutorial
		methodDict: 	a MethodDictionary(#handleFirstStep->(HowDoUseHandle>>#handleFirstS...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('tutorial' tutorial)
('lesson' handleFirstStep handleFourStep ha...etc...
		subclasses: 	nil
		name: 	#HowDoUseHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Documentations'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '(SmalltalkImage current specialObjectsArray at: 51 ...etc...
		requestor: 	an OBTextMorphEditorWithShout
		class: 	HowDoUseHandle class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		rcvr: 	HowDoUseHandle
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	HowDoUseHandle
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 22 and character $( and rectangle 32@16...etc...
		stopBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialOb...etc...
		selectionShowing: 	false
		otherInterval: 	(23 to: 81)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(83 to: 82)
		pivotBlock: 	a CharacterBlock with index 83 and rectangle 413@16 corner: 413@32
...etc...
		inBackTo: 	nil


[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10701042)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObjectsAr...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	an OBTextMorphEditorWithShout
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObject...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10701042)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObjectsAr...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10701042)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObjectsAr...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10701042)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObjectsAr...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	an OBTextMorphEditorWithShout
		stringHolder: 	an OBDefinitionPanel
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10701042)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObjectsAr...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	an OBPluggableTextMorphWithShout(260308992)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10701042)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObjectsAr...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10701042)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObjectsAr...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	an OBTextMorphWithShout(649592832)
	Receiver's instance variables: 
		timeStamp: 	10700524
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	32@28
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


OBTextMorphWithShout(Morph)>>handleEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10701042)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObjectsAr...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(Morph)>>handleFocusEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 10701042)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testImageForHandle
	^(SmalltalkImage current specialObjectsAr...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	an OBTextMorphWithShout(649592832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	193@362 corner: 209@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	193@362 corner: 209@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(451936256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[194@362 193@362 mouseMove CMD 10699905 nil]
		targetOffset: 	480@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10699905 194 362 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(527958016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(527958016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	193@362 corner: 209@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	193@362 corner: 209@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(451936256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[194@362 193@362 mouseMove CMD 10699905 nil]
		targetOffset: 	480@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10699905 194 362 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	193@362 corner: 209@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	193@362 corner: 209@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(451936256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[194@362 193@362 mouseMove CMD 10699905 nil]
		targetOffset: 	480@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10699905 194 362 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	193@362 corner: 209@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	193@362 corner: 209@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(451936256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[194@362 193@362 mouseMove CMD 10699905 nil]
		targetOffset: 	480@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10699905 194 362 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	193@362 corner: 209@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	193@362 corner: 209@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(451936256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[194@362 193@362 mouseMove CMD 10699905 nil]
		targetOffset: 	480@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10699905 194 362 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 10700524 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	193@362 corner: 209@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	193@362 corner: 209@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(451936256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[194@362 193@362 mouseMove CMD 10699905 nil]
		targetOffset: 	480@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10699905 194 362 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(527958016))(a PreDebu...etc...
		lastStepTime: 	10700522
		lastStepMessage: 	nil
		lastCycleTime: 	10700562
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	10700522
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:
HowDoUseHandle class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Object>>becomeHandle
30 November 2010 2:23:25 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Object>>doesNotUnderstand: #becomeHandle
	Receiver: an Object
	Arguments and temporary variables: 
		aMessage: 	becomeHandle
		exception: 	MessageNotUnderstood: Object>>becomeHandle
		resumeValue: 	nil
	Receiver's instance variables: 
an Object

HowDoUseHandle class>>DoIt
	Receiver: HowDoUseHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	AbstractTutorial
		methodDict: 	a MethodDictionary(#handleFirstStep->(HowDoUseHandle>>#handleFirstS...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('tutorial' tutorial)
('lesson' handleFirstStep handleFourStep ha...etc...
		subclasses: 	nil
		name: 	#HowDoUseHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Documentations'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '
	^(Object new) becomeHandle '
		requestor: 	an OBTextMorphEditorWithShout
		class: 	HowDoUseHandle class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		rcvr: 	HowDoUseHandle
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	HowDoUseHandle
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 28 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 57 and rectangle 211@16 corner: 211@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black a TextEmphasis code: 1)
		initialText: 	a Text for 'testImageForHandle
	^((SmalltalkImage current specialO...etc...
		selectionShowing: 	false
		otherInterval: 	(44 to: 56)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(649592832)
		oldInterval: 	(28 to: 27)
		pivotBlock: 	a CharacterBlock with index 31 and character $( and rectangle 32@16...etc...
		inBackTo: 	false


[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 11320000)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	an OBTextMorphEditorWithShout
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 11320000)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 11320000)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 11320000)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	an OBTextMorphEditorWithShout
		stringHolder: 	an OBDefinitionPanel
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(649592832)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 11320000)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	an OBPluggableTextMorphWithShout(260308992)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 11320000)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 11320000)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	an OBTextMorphWithShout(649592832)
	Receiver's instance variables: 
		timeStamp: 	11319480
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	730@30
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


OBTextMorphWithShout(Morph)>>handleEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 11320000)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


OBTextMorphWithShout(Morph)>>handleFocusEvent:
	Receiver: an OBTextMorphWithShout(649592832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1253@34
		owner: 	a TransformMorph(757858304)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1253@34
		color: 	Color black
		extension: 	a MorphExtension (411303936) [other:  (blinkStart -> 11320000)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testVirtualMachineForHandle
	^(Object new) becomeHandle '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(260308992)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	an OBTextMorphWithShout(649592832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	891@364 corner: 907@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	891@364 corner: 907@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(173801472)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[891@364 891@364 mouseMove CMD 11319124 nil]
		targetOffset: 	31@31
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11319124 891 364 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(516161536) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(516161536) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	891@364 corner: 907@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	891@364 corner: 907@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(173801472)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[891@364 891@364 mouseMove CMD 11319124 nil]
		targetOffset: 	31@31
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11319124 891 364 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	891@364 corner: 907@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	891@364 corner: 907@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(173801472)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[891@364 891@364 mouseMove CMD 11319124 nil]
		targetOffset: 	31@31
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11319124 891 364 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	891@364 corner: 907@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	891@364 corner: 907@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(173801472)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[891@364 891@364 mouseMove CMD 11319124 nil]
		targetOffset: 	31@31
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11319124 891 364 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	891@364 corner: 907@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	891@364 corner: 907@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(173801472)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[891@364 891@364 mouseMove CMD 11319124 nil]
		targetOffset: 	31@31
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11319124 891 364 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 11319480 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	891@364 corner: 907@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	891@364 corner: 907@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(173801472)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[891@364 891@364 mouseMove CMD 11319124 nil]
		targetOffset: 	31@31
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11319124 891 364 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(516161536))(a PreDebu...etc...
		lastStepTime: 	11319480
		lastStepMessage: 	nil
		lastCycleTime: 	11319520
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	11319480
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(516161536))(a PreDebu...etc...
		lastStepTime: 	11319480
		lastStepMessage: 	nil
		lastCycleTime: 	11319520
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	11319480
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Object>>doesNotUnderstand: #becomeHandle
HowDoUseHandle class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "on:do:" is nil
30 November 2010 2:24:49 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #on:do:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	on: Error do: [^ false]
		exception: 	MessageNotUnderstood: receiver of "on:do:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

HowDoUseHandle class>>testVirtualMachineForHandle
	Receiver: HowDoUseHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	AbstractTutorial
		methodDict: 	a MethodDictionary(#handleFirstStep->(HowDoUseHandle>>#handleFirstS...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('tutorial' tutorial)
('lesson' handleFirstStep handleFourStep ha...etc...
		subclasses: 	nil
		name: 	#HowDoUseHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Documentations'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'HowDoUseHandle testVirtualMachineForHandle.'
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>doIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in TextMorphForShoutEditor(ParagraphEditor)>>doIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self doIt]
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>doIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-d>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	100
		t5: 	$d
		t6: 	$d
		t7: 	#doIt:
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-d>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-d>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 216 and character $H and rectangle 0@64 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"A handle is a special object that allow you to do ind...etc...
		selectionShowing: 	false
		otherInterval: 	(399 to: 398)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	(399 to: 398)
		pivotBlock: 	a CharacterBlock with index 259 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@226
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@226
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11403907)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"A handle is a special object that allow you to do indirectio...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"A handle is a special object that allow you to do indirec...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@226
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@226
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11403907)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"A handle is a special object that allow you to do indirectio...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@226
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@226
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11403907)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"A handle is a special object that allow you to do indirectio...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@226
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@226
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11403907)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"A handle is a special object that allow you to do indirectio...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(192937984)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	false
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a LessonView
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(192937984)
		evt: 	[keystroke '<Cmd-d>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(192937984)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@226
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@226
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11403907)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"A handle is a special object that allow you to do indirectio...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableShoutMorph(371458048)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@226
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@226
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11403907)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"A handle is a special object that allow you to do indirectio...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@226
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@226
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11403907)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"A handle is a special object that allow you to do indirectio...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(192937984)
	Receiver's instance variables: 
		timeStamp: 	11403401
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	305@64
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@226
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@226
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11403907)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"A handle is a special object that allow you to do indirectio...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@226
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@226
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11403907)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"A handle is a special object that allow you to do indirectio...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForShout(192937984)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1680@1005 corner: 1696@1021
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1680@1005 corner: 1696@1021
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(998768640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1680@1006 1680@1005 mouseMove CMD 11403270 nil]
		targetOffset: 	302@65
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11403270 1680 1005 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(213909504) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(213909504) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1680@1005 corner: 1696@1021
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1680@1005 corner: 1696@1021
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(998768640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1680@1006 1680@1005 mouseMove CMD 11403270 nil]
		targetOffset: 	302@65
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11403270 1680 1005 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1680@1005 corner: 1696@1021
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1680@1005 corner: 1696@1021
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(998768640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1680@1006 1680@1005 mouseMove CMD 11403270 nil]
		targetOffset: 	302@65
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11403270 1680 1005 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	1680@1005 corner: 1696@1021
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1680@1005 corner: 1696@1021
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(998768640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1680@1006 1680@1005 mouseMove CMD 11403270 nil]
		targetOffset: 	302@65
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11403270 1680 1005 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-d>']
		t2: 	[keystroke '<Cmd-d>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	1680@1005 corner: 1696@1021
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1680@1005 corner: 1696@1021
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(998768640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1680@1006 1680@1005 mouseMove CMD 11403270 nil]
		targetOffset: 	302@65
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11403270 1680 1005 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-d>']
		t2: 	#(2 11403401 100 0 8 100 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	1680@1005 corner: 1696@1021
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1680@1005 corner: 1696@1021
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(998768640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1680@1006 1680@1005 mouseMove CMD 11403270 nil]
		targetOffset: 	302@65
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11403270 1680 1005 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(213909504))(a PreDebu...etc...
		lastStepTime: 	11403387
		lastStepMessage: 	nil
		lastCycleTime: 	11403510
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	11403387
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #on:do:
HowDoUseHandle class>>testVirtualMachineForHandle
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>doIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>doIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>doIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: subscript is out of bounds: 1
30 November 2010 2:25:28 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: ''
	Arguments and temporary variables: 
		aString: 	'subscript is out of bounds: 1'
	Receiver's instance variables: 
''

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
''

ByteString(Object)>>at:
	Receiver: ''
	Arguments and temporary variables: 
		t1: 	1
	Receiver's instance variables: 
''

ByteString>>at:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
''

ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: '                                                                                         ...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	453
		replacement: 	''
		repStart: 	1
		index: 	1
		repOff: 	0
	Receiver's instance variables: 
'                                                                                         ...etc...

ByteString(String)>>replaceFrom:to:with:startingAt:
	Receiver: '                                                                                         ...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	453
		replacement: 	''
		repStart: 	1
	Receiver's instance variables: 
'                                                                                         ...etc...

ByteString>>replaceFrom:to:with:startingAt:
	Receiver: '                                                                                         ...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	453
		replacement: 	''
		repStart: 	1
	Receiver's instance variables: 
'                                                                                         ...etc...

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	454
		stop: 	0
		replacementCollection: 	' true'
		newSequenceableCollection: 	'                                                   ...etc...
		newSize: 	458
		endReplacement: 	458
	Receiver's instance variables: 
''

Text>>replaceFrom:to:with:
	Receiver: a Text for ''
	Arguments and temporary variables: 
		start: 	454
		stop: 	0
		aText: 	a Text for ' true'
		txt: 	a Text for ' true'
	Receiver's instance variables: 
		string: 	''
		runs: 	a RunArray runs: #() values: #()


MultiNewParagraph(NewParagraph)>>replaceFrom:to:with:displaying:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		start: 	454
		stop: 	0
		aText: 	a Text for ' true'
		displayBoolean: 	false
	Receiver's instance variables: 
		text: 	a Text for ''
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 682@9999999
		lines: 	an Array(a TextLine 1 to: 0)
		positionWhenComposed: 	0@0
		offsetToEnd: 	-1
		maxRightX: 	0
		selectionStart: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 i...etc...
		selectionStop: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in...etc...
		wantsColumnBreaks: 	false
		focused: 	false
		caretRect: 	0@0 corner: 1@12
		showCaret: 	true
		presentationText: 	nil
		presentationLines: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>noUndoReplace:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		anInterval: 	(454 to: 453)
		aText: 	a Text for ' true'
		start: 	454
		stop: 	0
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a ...etc...
		stopBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a T...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for ''
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	nil


EditCommand>>undoCommand
	Receiver: EditCommand[new: (454 to: 453) -> "", rText: (454 to: 458) -> " true"]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		textMorph: 	a TextMorphForShout(192937984)
		phase: 	#done
		replacedText: 	a Text for ' true'
		replacedTextInterval: 	(454 to: 458)
		newText: 	a Text for ''
		newTextInterval: 	(454 to: 453)


TextMorphCommandHistory(CommandHistory)>>undoLastCommand
	Receiver: a TextMorphCommandHistory
	Arguments and temporary variables: 
		aPhase: 	#done
		anIndex: 	nil
	Receiver's instance variables: 
		lastCommand: 	EditCommand[new: (454 to: 453) -> "", rText: (454 to: 458) -> " tr...etc...
		history: 	an OrderedCollection(EditCommand[new: (259 to: 263) -> " true", rText:...etc...
		excursions: 	an OrderedCollection()


TextMorphCommandHistory>>undo
	Receiver: a TextMorphCommandHistory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lastCommand: 	EditCommand[new: (454 to: 453) -> "", rText: (454 to: 458) -> " tr...etc...
		history: 	an OrderedCollection(EditCommand[new: (259 to: 263) -> " true", rText:...etc...
		excursions: 	an OrderedCollection()


TextMorphForShoutEditor(TextMorphEditor)>>multiUndoWithCount:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		count: 	1
		command: 	EditCommand[new: (454 to: 453) -> "", rText: (454 to: 458) -> " true"]...etc...
		i: 	0
		lastCommand: 	nil
		saveSelection: 	(1 to: 0)
		newSelection: 	nil
		history: 	a TextMorphCommandHistory
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a ...etc...
		stopBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a T...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for ''
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>multiUndo
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a ...etc...
		stopBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a T...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for ''
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>undo
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a ...etc...
		stopBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a T...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for ''
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>undo:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a ...etc...
		stopBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a T...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for ''
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-z>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	122
		t5: 	$z
		t6: 	$z
		t7: 	#undo:
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a ...etc...
		stopBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a T...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for ''
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-z>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a ...etc...
		stopBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a T...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for ''
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-z>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a ...etc...
		stopBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a T...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for ''
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-z>']
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a ...etc...
		stopBlock: 	a CharacterBlock with index 1 and rectangle 0@0 corner: 0@12
 in a T...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for ''
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(192937984)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-z>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@14
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@14
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11443335)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for ''
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@14
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@14
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11443335)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@14
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@14
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11443335)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-z>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@14
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@14
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11443335)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(192937984)
		evt: 	[keystroke '<Cmd-z>']
		completionAllowed: 	false
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a LessonView
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(192937984)
		evt: 	[keystroke '<Cmd-z>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(192937984)
		evt: 	[keystroke '<Cmd-z>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-z>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@14
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@14
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11443335)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-z>']
		view: 	a PluggableShoutMorph(371458048)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@14
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@14
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11443335)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-z>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@14
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@14
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11443335)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-z>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(192937984)
	Receiver's instance variables: 
		timeStamp: 	11442805
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-295@ -236
		handler: 	nil
		wasHandled: 	true
		keyValue: 	122
		charCode: 	122
		scanCode: 	6


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-z>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@14
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@14
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11443335)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(192937984)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-z>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@14
		owner: 	a TransformMorph(910163968)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@14
		color: 	Color black
		extension: 	a MorphExtension (778829824) [other:  (blinkStart -> 11443335)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(371458048)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-z>']
		focusHolder: 	a TextMorphForShout(192937984)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1052@682 corner: 1068@698
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1052@682 corner: 1068@698
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(702545920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1080@705 1052@682 mouseMove CMD 11442824 nil]
		targetOffset: 	248@152
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 11442824 1073 701 0 8 0 1)
		lastKeyScanCode: 	6
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(941096960) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(941096960) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
ByteString(String)>>replaceFrom:to:with:startingAt:
ByteString>>replaceFrom:to:with:startingAt:
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
Text>>replaceFrom:to:with:
MultiNewParagraph(NewParagraph)>>replaceFrom:to:with:displaying:
TextMorphForShoutEditor(TextMorphEditor)>>noUndoReplace:with:
EditCommand>>undoCommand
TextMorphCommandHistory(CommandHistory)>>undoLastCommand
TextMorphCommandHistory>>undo
TextMorphForShoutEditor(TextMorphEditor)>>multiUndoWithCount:
TextMorphForShoutEditor(TextMorphEditor)>>multiUndo
TextMorphForShoutEditor(TextMorphEditor)>>undo
TextMorphForShoutEditor(ParagraphEditor)>>undo:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: becomeHandle failed
30 November 2010 2:33:12 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] Squeak VM 4.2.5b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Handle(Object)>>error:
	Receiver: a Handle
	Arguments and temporary variables: 
		aString: 	'becomeHandle failed'
	Receiver's instance variables: 
		receiver: 	an A
		classLookup: 	AA
		state: 	#('var1' nil)
		configuration: 	2


Handle(Object)>>primitiveFailed:
	Receiver: a Handle
	Arguments and temporary variables: 
		t1: 	#becomeHandle
	Receiver's instance variables: 
		receiver: 	an A
		classLookup: 	AA
		state: 	#('var1' nil)
		configuration: 	2


Handle(Object)>>primitiveFailed
	Receiver: a Handle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	an A
		classLookup: 	AA
		state: 	#('var1' nil)
		configuration: 	2


Handle>>becomeHandle
	Receiver: a Handle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	an A
		classLookup: 	AA
		state: 	#('var1' nil)
		configuration: 	2


Handle class>>for:to:
	Receiver: Handle
	Arguments and temporary variables: 
		t1: 	an A
		t2: 	AA
		t3: 	a Handle
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addBehavior->(Handle>>#addBehavior "a CompiledM...etc...
		format: 	138
		instanceVariables: 	#('receiver' 'classLookup' 'state' 'configuration')
		organization: 	('accessing' classLookup classLookup: configuration receiver rece...etc...
		subclasses: 	{MetaHandle. ObjectHandle. AbstractMirrorHandle. CapabilityHandle. ...etc...
		name: 	#Handle
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Core'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		a: 	an A
		handleOfA: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '|a handleOfA |
a := A new. "create a instance of A"...etc...
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a LessonView
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 283 and character $| and rectangle 0@96...etc...
		stopBlock: 	a CharacterBlock with index 621 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '"The API for using handle is very simple."
"a importan...etc...
		selectionShowing: 	false
		otherInterval: 	(646 to: 645)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(800849920)
		oldInterval: 	(646 to: 645)
		pivotBlock: 	a CharacterBlock with index 621 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(800849920)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@354
		owner: 	a TransformMorph(339214336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@354
		color: 	Color black
		extension: 	a MorphExtension (211288064) [other:  (blinkStart -> 433803)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"The API for using handle is very simple."
"a important point...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(673447936)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(800849920)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"The API for using handle is very simple."
"a important po...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@354
		owner: 	a TransformMorph(339214336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@354
		color: 	Color black
		extension: 	a MorphExtension (211288064) [other:  (blinkStart -> 433803)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"The API for using handle is very simple."
"a important point...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(673447936)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(800849920)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@354
		owner: 	a TransformMorph(339214336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@354
		color: 	Color black
		extension: 	a MorphExtension (211288064) [other:  (blinkStart -> 433803)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"The API for using handle is very simple."
"a important point...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(673447936)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(800849920)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@354
		owner: 	a TransformMorph(339214336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@354
		color: 	Color black
		extension: 	a MorphExtension (211288064) [other:  (blinkStart -> 433803)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"The API for using handle is very simple."
"a important point...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(673447936)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(800849920)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	false
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a LessonView
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(800849920)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(800849920)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(800849920)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@354
		owner: 	a TransformMorph(339214336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@354
		color: 	Color black
		extension: 	a MorphExtension (211288064) [other:  (blinkStart -> 433803)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"The API for using handle is very simple."
"a important point...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(673447936)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(800849920)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableShoutMorph(673447936)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@354
		owner: 	a TransformMorph(339214336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@354
		color: 	Color black
		extension: 	a MorphExtension (211288064) [other:  (blinkStart -> 433803)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"The API for using handle is very simple."
"a important point...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(673447936)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(800849920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@354
		owner: 	a TransformMorph(339214336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@354
		color: 	Color black
		extension: 	a MorphExtension (211288064) [other:  (blinkStart -> 433803)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"The API for using handle is very simple."
"a important point...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(673447936)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(800849920)
	Receiver's instance variables: 
		timeStamp: 	433284
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-9@101
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(800849920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@354
		owner: 	a TransformMorph(339214336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@354
		color: 	Color black
		extension: 	a MorphExtension (211288064) [other:  (blinkStart -> 433803)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"The API for using handle is very simple."
"a important point...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(673447936)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(800849920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@354
		owner: 	a TransformMorph(339214336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@354
		color: 	Color black
		extension: 	a MorphExtension (211288064) [other:  (blinkStart -> 433803)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"The API for using handle is very simple."
"a important point...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(673447936)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForShout(800849920)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	516@932 corner: 532@948
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(281542656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[516@932 516@932 mouseMove CMD 432722 nil]
		targetOffset: 	169@252
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 432722 516 932 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(744751104) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(744751104) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	516@932 corner: 532@948
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(281542656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[516@932 516@932 mouseMove CMD 432722 nil]
		targetOffset: 	169@252
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 432722 516 932 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	516@932 corner: 532@948
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(281542656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[516@932 516@932 mouseMove CMD 432722 nil]
		targetOffset: 	169@252
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 432722 516 932 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	516@932 corner: 532@948
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(281542656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[516@932 516@932 mouseMove CMD 432722 nil]
		targetOffset: 	169@252
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 432722 516 932 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	516@932 corner: 532@948
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(281542656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[516@932 516@932 mouseMove CMD 432722 nil]
		targetOffset: 	169@252
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 432722 516 932 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
Handle(Object)>>error:
Handle(Object)>>primitiveFailed:
Handle(Object)>>primitiveFailed
Handle>>becomeHandle
Handle class>>for:to:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 3:42:36 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Object>>#mirror: "a CompiledMethod(219152384)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13848602
		t3: 	a WriteStream ' '
		t5: 	13848602
		t4: 	nil
	Receiver's instance variables: 
(Object>>#mirror: "a CompiledMethod(219152384)")

CompiledMethod>>timeStamp
	Receiver: (Object>>#mirror: "a CompiledMethod(219152384)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Object>>#mirror: "a CompiledMethod(219152384)")

MethodReference>>timeStamp
	Receiver: a MethodReference Object >> #mirror:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Object
		classIsMeta: 	false
		methodSymbol: 	#mirror:
		stringVersion: 	'Object mirror:'
		category: 	#'*handle'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Object >> #mirror:
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Object >> #mirror:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Object
		classIsMeta: 	false
		methodSymbol: 	#mirror:
		stringVersion: 	'Object mirror:'
		category: 	#'*handle'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handle)
	Arguments and temporary variables: 
		t2: 	a MethodReference Object >> #mirror:
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		name: 	'Handle'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference Object >> #mirror:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference Object >> #mirror:)

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference Object >> #mirror:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference Object >> #mirror:)

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference Object >> #mirror:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference Object >> #mirror:)

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference Object >> #mirror:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference Object >> #mirror:)

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference Object >> #mirror:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference Object >> #mirror:)

MCPackage>>snapshot
	Receiver: a MCPackage(Handle)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handle)
		t2: 	an OrderedCollection()
		t3: 	#()
	Receiver's instance variables: 
		name: 	'Handle'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handle)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handle)->a MCCacheRepository(/Users/arna...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(219152384)
		m: 	[344@45 mouseUp 4153683 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		evt: 	[344@45 mouseUp 4153683 nil]
		all: 	an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(9...etc...
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		evt: 	[344@45 mouseUp 4153683 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		anEvent: 	[344@45 mouseUp 4153683 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [344@45 mouseUp 4153683 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(219152384)
	Receiver's instance variables: 
		timeStamp: 	4153683
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	344@45
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		anEvent: 	[344@45 mouseUp 4153683 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
30 November 2010 3:42:53 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Array(SequenceableCollection)>>do:
	Receiver: an Array(a LazyListMorph(556793856))
	Arguments and temporary variables: 
		aBlock: 	[:m | m visible
		ifTrue: [subBounds
				ifNil: [subBounds := m fullBou...etc...
		index: 	nil
		indexLimiT: 	nil
	Receiver's instance variables: 
an Array(a LazyListMorph(556793856))

TransformMorph(Morph)>>submorphsDo:
	Receiver: a TransformMorph(639369216)
	Arguments and temporary variables: 
		aBlock: 	[:m | m visible
		ifTrue: [subBounds
				ifNil: [subBounds := m fullBou...etc...
	Receiver's instance variables: 
		bounds: 	2@2 corner: 56@29
		owner: 	a PluggableListMorph(1028915200)
		submorphs: 	an Array(a LazyListMorph(556793856))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (341049344)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = -5@ -2)
		smoothing: 	1
		localBounds: 	nil


TransformMorph>>localVisibleSubmorphBounds
	Receiver: a TransformMorph(639369216)
	Arguments and temporary variables: 
		subBounds: 	#(nil)
	Receiver's instance variables: 
		bounds: 	2@2 corner: 56@29
		owner: 	a PluggableListMorph(1028915200)
		submorphs: 	an Array(a LazyListMorph(556793856))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (341049344)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = -5@ -2)
		smoothing: 	1
		localBounds: 	nil


TransformMorph>>submorphBounds
	Receiver: a TransformMorph(639369216)
	Arguments and temporary variables: 
		box: 	nil
	Receiver's instance variables: 
		bounds: 	2@2 corner: 56@29
		owner: 	a PluggableListMorph(1028915200)
		submorphs: 	an Array(a LazyListMorph(556793856))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (341049344)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = -5@ -2)
		smoothing: 	1
		localBounds: 	nil


TransformMorph(Morph)>>privateFullBounds
	Receiver: a TransformMorph(639369216)
	Arguments and temporary variables: 
		box: 	2@2 corner: 56@29
	Receiver's instance variables: 
		bounds: 	2@2 corner: 56@29
		owner: 	a PluggableListMorph(1028915200)
		submorphs: 	an Array(a LazyListMorph(556793856))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (341049344)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = -5@ -2)
		smoothing: 	1
		localBounds: 	nil


TransformMorph(Morph)>>changed
	Receiver: a TransformMorph(639369216)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	2@2 corner: 56@29
		owner: 	a PluggableListMorph(1028915200)
		submorphs: 	an Array(a LazyListMorph(556793856))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (341049344)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = -5@ -2)
		smoothing: 	1
		localBounds: 	nil


TransformMorph>>extent:
	Receiver: a TransformMorph(639369216)
	Arguments and temporary variables: 
		aPoint: 	54@27
	Receiver's instance variables: 
		bounds: 	2@2 corner: 56@29
		owner: 	a PluggableListMorph(1028915200)
		submorphs: 	an Array(a LazyListMorph(556793856))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (341049344)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = -5@ -2)
		smoothing: 	1
		localBounds: 	nil


TransformMorph(Morph)>>bounds:
	Receiver: a TransformMorph(639369216)
	Arguments and temporary variables: 
		newBounds: 	1@1 corner: 55@28
		oldExtent: 	146@116
		newExtent: 	54@27
	Receiver's instance variables: 
		bounds: 	2@2 corner: 56@29
		owner: 	a PluggableListMorph(1028915200)
		submorphs: 	an Array(a LazyListMorph(556793856))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (341049344)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = -5@ -2)
		smoothing: 	1
		localBounds: 	nil


PluggableListMorph(ScrollPane)>>resizeScroller
	Receiver: a PluggableListMorph(1028915200)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 56@29
		owner: 	a SystemWindow(552599552)
		submorphs: 	an Array(a TransformMorph(639369216))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (823132160)
		borderWidth: 	1
		borderColor: 	(Color r: 0.667 g: 0.667 b: 0.667)
		model: 	a ContextVariablesInspector
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(112984064)
		scroller: 	a TransformMorph(639369216)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#fieldListMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(729808896)
		list: 	#('thisContext')
		getListSelector: 	#fieldList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selectionIndex
		setIndexSelector: 	#toggleIndex:
		keystrokeActionSelector: 	#inspectorKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#inspectSelection
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(556793856)
		hScrollRangeCache: 	nil


PluggableListMorph(ScrollPane)>>extent:
	Receiver: a PluggableListMorph(1028915200)
	Arguments and temporary variables: 
		newExtent: 	56@26
		oldW: 	150
		oldH: 	120
		wasHShowing: 	false
		wasVShowing: 	false
		noVPlease: 	false
		noHPlease: 	false
		minH: 	29
		minW: 	33
	Receiver's instance variables: 
		bounds: 	0@0 corner: 56@29
		owner: 	a SystemWindow(552599552)
		submorphs: 	an Array(a TransformMorph(639369216))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (823132160)
		borderWidth: 	1
		borderColor: 	(Color r: 0.667 g: 0.667 b: 0.667)
		model: 	a ContextVariablesInspector
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(112984064)
		scroller: 	a TransformMorph(639369216)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#fieldListMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(729808896)
		list: 	#('thisContext')
		getListSelector: 	#fieldList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selectionIndex
		setIndexSelector: 	#toggleIndex:
		keystrokeActionSelector: 	#inspectorKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#inspectSelection
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(556793856)
		hScrollRangeCache: 	nil


PluggableListMorph>>extent:
	Receiver: a PluggableListMorph(1028915200)
	Arguments and temporary variables: 
		newExtent: 	56@26
	Receiver's instance variables: 
		bounds: 	0@0 corner: 56@29
		owner: 	a SystemWindow(552599552)
		submorphs: 	an Array(a TransformMorph(639369216))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (823132160)
		borderWidth: 	1
		borderColor: 	(Color r: 0.667 g: 0.667 b: 0.667)
		model: 	a ContextVariablesInspector
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(112984064)
		scroller: 	a TransformMorph(639369216)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#fieldListMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(729808896)
		list: 	#('thisContext')
		getListSelector: 	#fieldList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selectionIndex
		setIndexSelector: 	#toggleIndex:
		keystrokeActionSelector: 	#inspectorKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#inspectSelection
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(556793856)
		hScrollRangeCache: 	nil


PluggableListMorph(Morph)>>bounds:
	Receiver: a PluggableListMorph(1028915200)
	Arguments and temporary variables: 
		newBounds: 	154@169 corner: 210@195
		oldExtent: 	150@120
		newExtent: 	56@26
	Receiver's instance variables: 
		bounds: 	0@0 corner: 56@29
		owner: 	a SystemWindow(552599552)
		submorphs: 	an Array(a TransformMorph(639369216))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (823132160)
		borderWidth: 	1
		borderColor: 	(Color r: 0.667 g: 0.667 b: 0.667)
		model: 	a ContextVariablesInspector
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(112984064)
		scroller: 	a TransformMorph(639369216)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#fieldListMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(729808896)
		list: 	#('thisContext')
		getListSelector: 	#fieldList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selectionIndex
		setIndexSelector: 	#toggleIndex:
		keystrokeActionSelector: 	#inspectorKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#inspectSelection
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(556793856)
		hScrollRangeCache: 	nil


PluggableListMorph(Morph)>>layoutInBounds:
	Receiver: a PluggableListMorph(1028915200)
	Arguments and temporary variables: 
		t1: 	154@169 corner: 210@195
		t2: 	154@169 corner: 210@195
		t3: 	#topLeft
		t4: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 56@29
		owner: 	a SystemWindow(552599552)
		submorphs: 	an Array(a TransformMorph(639369216))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (823132160)
		borderWidth: 	1
		borderColor: 	(Color r: 0.667 g: 0.667 b: 0.667)
		model: 	a ContextVariablesInspector
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(112984064)
		scroller: 	a TransformMorph(639369216)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#fieldListMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(729808896)
		list: 	#('thisContext')
		getListSelector: 	#fieldList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selectionIndex
		setIndexSelector: 	#toggleIndex:
		keystrokeActionSelector: 	#inspectorKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#inspectSelection
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(556793856)
		hScrollRangeCache: 	nil


PluggableListMorph(Morph)>>layoutProportionallyIn:
	Receiver: a PluggableListMorph(1028915200)
	Arguments and temporary variables: 
		newBounds: 	1@28 corner: 299@199
		box: 	154@169 corner: 210@195
		frame: 	a LayoutFrame
	Receiver's instance variables: 
		bounds: 	0@0 corner: 56@29
		owner: 	a SystemWindow(552599552)
		submorphs: 	an Array(a TransformMorph(639369216))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (823132160)
		borderWidth: 	1
		borderColor: 	(Color r: 0.667 g: 0.667 b: 0.667)
		model: 	a ContextVariablesInspector
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(112984064)
		scroller: 	a TransformMorph(639369216)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#fieldListMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(729808896)
		list: 	#('thisContext')
		getListSelector: 	#fieldList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#selectionIndex
		setIndexSelector: 	#toggleIndex:
		keystrokeActionSelector: 	#inspectorKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#inspectSelection
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(556793856)
		hScrollRangeCache: 	nil


[] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		newBounds: 	a PluggableListMorph(1028915200)
		m: 	1@28 corner: 299@199
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(864026624) a WindowEdgeGri...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | m layoutProportionallyIn: newBounds]
		index: 	14
		indexLimiT: 	15
	Receiver's instance variables: 
an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(864026624) a WindowEdgeGri...etc...

SystemWindow(Morph)>>submorphsDo:
	Receiver: a SystemWindow(552599552)
	Arguments and temporary variables: 
		aBlock: 	[:m | m layoutProportionallyIn: newBounds]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(8640...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (359661568) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(555745280) a RectangleMorph(952369152))
		label: 	a LabelMorph(492568576)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(432537600)
		collapseBox: 	a MultistateButtonMorph(99352576)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(887095296) a PluggableListMorph(10289...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	an IconicButton(1001652224)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(546570240)
		expandBox: 	a MultistateButtonMorph(866910208)
		embeddable: 	nil
		announcer: 	nil


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a SystemWindow(552599552)
		newBounds: 	1@28 corner: 299@199
	Receiver's instance variables: 
a ProportionalLayout

SystemWindow(Morph)>>doLayoutIn:
	Receiver: a SystemWindow(552599552)
	Arguments and temporary variables: 
		layoutBounds: 	1@28 corner: 299@199
		layout: 	a ProportionalLayout
		box: 	nil
		priorBounds: 	-8@ -4 corner: 308@210
	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(8640...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (359661568) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(555745280) a RectangleMorph(952369152))
		label: 	a LabelMorph(492568576)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(432537600)
		collapseBox: 	a MultistateButtonMorph(99352576)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(887095296) a PluggableListMorph(10289...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	an IconicButton(1001652224)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(546570240)
		expandBox: 	a MultistateButtonMorph(866910208)
		embeddable: 	nil
		announcer: 	nil


[] in SystemWindow(Morph)>>fullBounds
	Receiver: a SystemWindow(552599552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(8640...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (359661568) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(555745280) a RectangleMorph(952369152))
		label: 	a LabelMorph(492568576)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(432537600)
		collapseBox: 	a MultistateButtonMorph(99352576)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(887095296) a PluggableListMorph(10289...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	an IconicButton(1001652224)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(546570240)
		expandBox: 	a MultistateButtonMorph(866910208)
		embeddable: 	nil
		announcer: 	nil


BlockClosure>>on:do:
	Receiver: [self doLayoutIn: self layoutBounds]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
fullBounds := bounds.
	ex pass]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SystemWindow(Morph)>>fullBounds
		startpc: 	44
		numArgs: 	0


SystemWindow(Morph)>>fullBounds
	Receiver: a SystemWindow(552599552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(8640...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (359661568) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(555745280) a RectangleMorph(952369152))
		label: 	a LabelMorph(492568576)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(432537600)
		collapseBox: 	a MultistateButtonMorph(99352576)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(887095296) a PluggableListMorph(10289...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	an IconicButton(1001652224)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(546570240)
		expandBox: 	a MultistateButtonMorph(866910208)
		embeddable: 	nil
		announcer: 	nil


SystemWindow(Morph)>>position:
	Receiver: a SystemWindow(552599552)
	Arguments and temporary variables: 
		aPoint: 	1466@738
		delta: 	1466@738
		box: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(8640...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (359661568) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(555745280) a RectangleMorph(952369152))
		label: 	a LabelMorph(492568576)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(432537600)
		collapseBox: 	a MultistateButtonMorph(99352576)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(887095296) a PluggableListMorph(10289...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	an IconicButton(1001652224)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(546570240)
		expandBox: 	a MultistateButtonMorph(866910208)
		embeddable: 	nil
		announcer: 	nil


SystemWindow>>position:
	Receiver: a SystemWindow(552599552)
	Arguments and temporary variables: 
		t1: 	1466@738
		t2: 	0@0
	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(8640...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (359661568) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(555745280) a RectangleMorph(952369152))
		label: 	a LabelMorph(492568576)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(432537600)
		collapseBox: 	a MultistateButtonMorph(99352576)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(887095296) a PluggableListMorph(10289...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	an IconicButton(1001652224)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(546570240)
		expandBox: 	a MultistateButtonMorph(866910208)
		embeddable: 	nil
		announcer: 	nil


SystemWindow(Morph)>>bounds:
	Receiver: a SystemWindow(552599552)
	Arguments and temporary variables: 
		newBounds: 	1466@738 corner: 2066@1438
		oldExtent: 	300@200
		newExtent: 	600@700
	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(8640...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (359661568) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(555745280) a RectangleMorph(952369152))
		label: 	a LabelMorph(492568576)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(432537600)
		collapseBox: 	a MultistateButtonMorph(99352576)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(887095296) a PluggableListMorph(10289...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	an IconicButton(1001652224)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(546570240)
		expandBox: 	a MultistateButtonMorph(866910208)
		embeddable: 	nil
		announcer: 	nil


SystemWindow>>openInWorld:
	Receiver: a SystemWindow(552599552)
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(8640...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (359661568) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(555745280) a RectangleMorph(952369152))
		label: 	a LabelMorph(492568576)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(432537600)
		collapseBox: 	a MultistateButtonMorph(99352576)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(887095296) a PluggableListMorph(10289...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	an IconicButton(1001652224)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(546570240)
		expandBox: 	a MultistateButtonMorph(866910208)
		embeddable: 	nil
		announcer: 	nil


SystemWindow(Morph)>>openInWorld
	Receiver: a SystemWindow(552599552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(878706688) a WindowEdgeGripMorph(8640...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (359661568) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(555745280) a RectangleMorph(952369152))
		label: 	a LabelMorph(492568576)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(432537600)
		collapseBox: 	a MultistateButtonMorph(99352576)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(887095296) a PluggableListMorph(10289...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	an IconicButton(1001652224)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(546570240)
		expandBox: 	a MultistateButtonMorph(866910208)
		embeddable: 	nil
		announcer: 	nil


Debugger>>openFullMorphicLabel:
	Receiver: a Debugger
	Arguments and temporary variables: 
		aLabelString: 	'User Interrupt'
		window: 	a SystemWindow(552599552)
		aListMorph: 	a PluggableListMorph(84410368)
		oldContextStackIndex: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(552599552) a PluggableListMorph(84...etc...
		contents: 	nil
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in Rectangle>>width
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(Rectangle>>width Rectangle>>area [] in Damag...etc...
		contextStackTop: 	Rectangle>>width
		contextStackIndex: 	0
		contextStackList: 	an OrderedCollection('Rectangle>>width' 'Rectangle>>area' '[]...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	false
		labelString: 	nil
		message: 	nil


Debugger>>openFullNoSuspendLabel:
	Receiver: a Debugger
	Arguments and temporary variables: 
		aString: 	'User Interrupt'
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(552599552) a PluggableListMorph(84...etc...
		contents: 	nil
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in Rectangle>>width
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(Rectangle>>width Rectangle>>area [] in Damag...etc...
		contextStackTop: 	Rectangle>>width
		contextStackIndex: 	0
		contextStackList: 	an OrderedCollection('Rectangle>>width' 'Rectangle>>area' '[]...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	false
		labelString: 	nil
		message: 	nil


[] in [] in Debugger class>>openOn:context:label:contents:fullView:
	Receiver: Debugger
	Arguments and temporary variables: 
		t1: 	a Process in Rectangle>>width
		t2: 	Rectangle>>width
		t3: 	'User Interrupt'
		t4: 	nil
		t5: 	true
		t6: 	true
		t7: 	a Debugger
	Receiver's instance variables: 
		superclass: 	CodeHolder
		methodDict: 	a MethodDictionary(#addOptionalButtonsTo:at:plus:->(Debugger>>#addO...etc...
		format: 	174
		instanceVariables: 	#('interruptedProcess' 'interruptedController' 'contextStack...etc...
		organization: 	('*Polymorph-Widgets-override' addOptionalButtonsTo:at:plus: buil...etc...
		subclasses: 	nil
		name: 	#Debugger
		classPool: 	a Dictionary(#ContextStackKeystrokes->a Dictionary($T->#stepIntoBloc...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Debugger'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in Debugger class>>openOn:context:label:contents:fullView:
		startpc: 	134
		numArgs: 	0


[] in Debugger class>>openOn:context:label:contents:fullView:
	Receiver: Debugger
	Arguments and temporary variables: 
		t1: 	a Process in Rectangle>>width
		t2: 	Rectangle>>width
		t3: 	'User Interrupt'
		t4: 	nil
		t5: 	true
		t6: 	true
	Receiver's instance variables: 
		superclass: 	CodeHolder
		methodDict: 	a MethodDictionary(#addOptionalButtonsTo:at:plus:->(Debugger>>#addO...etc...
		format: 	174
		instanceVariables: 	#('interruptedProcess' 'interruptedController' 'contextStack...etc...
		organization: 	('*Polymorph-Widgets-override' addOptionalButtonsTo:at:plus: buil...etc...
		subclasses: 	nil
		name: 	#Debugger
		classPool: 	a Dictionary(#ContextStackKeystrokes->a Dictionary($T->#stepIntoBloc...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Debugger'
		traitComposition: 	{}
		localSelectors: 	nil


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(1003487232))(a SystemWi...etc...
		lastStepTime: 	4170544
		lastStepMessage: 	nil
		lastCycleTime: 	4170706
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	4161984
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>runStepMethods
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(872677376) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(1003487232))(a SystemWi...etc...
		lastStepTime: 	4170544
		lastStepMessage: 	nil
		lastCycleTime: 	4170706
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	4161984
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(1003487232))(a SystemWi...etc...
		lastStepTime: 	4170544
		lastStepMessage: 	nil
		lastCycleTime: 	4170706
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	4161984
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(872677376) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(6236405...etc...
		format: 	168
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'previous...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
Array(SequenceableCollection)>>do:
TransformMorph(Morph)>>submorphsDo:
TransformMorph>>localVisibleSubmorphBounds
TransformMorph>>submorphBounds
TransformMorph(Morph)>>privateFullBounds
TransformMorph(Morph)>>changed
TransformMorph>>extent:
TransformMorph(Morph)>>bounds:
PluggableListMorph(ScrollPane)>>resizeScroller
PluggableListMorph(ScrollPane)>>extent:
PluggableListMorph>>extent:
PluggableListMorph(Morph)>>bounds:
PluggableListMorph(Morph)>>layoutInBounds:
PluggableListMorph(Morph)>>layoutProportionallyIn:
[] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
SystemWindow(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
SystemWindow(Morph)>>doLayoutIn:
[] in SystemWindow(Morph)>>fullBounds
BlockClosure>>on:do:
SystemWindow(Morph)>>fullBounds
SystemWindow(Morph)>>position:
SystemWindow>>position:
SystemWindow(Morph)>>bounds:
SystemWindow>>openInWorld:
SystemWindow(Morph)>>openInWorld
Debugger>>openFullMorphicLabel:
Debugger>>openFullNoSuspendLabel:
[] in [] in Debugger class>>openOn:context:label:contents:fullView:
BlockClosure>>on:do:
[] in Debugger class>>openOn:context:label:contents:fullView:
WorldState>>runStepMethodsIn:
PasteUpMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 3:43:02 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	nil
		defaults: 	a Dictionary(a MCWorkingCopy(Handle)->a MCCacheRepository(/Users/arna...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(219152384)
		m: 	[323@53 mouseUp 4179127 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		evt: 	[323@53 mouseUp 4179127 nil]
		all: 	an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(9...etc...
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		evt: 	[323@53 mouseUp 4179127 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		anEvent: 	[323@53 mouseUp 4179127 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [323@53 mouseUp 4179127 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(219152384)
	Receiver's instance variables: 
		timeStamp: 	4179127
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	323@53
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		anEvent: 	[323@53 mouseUp 4179127 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 3:43:47 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handle)->a MCCacheRepository(/Users/arna...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	362@30 corner: 459@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	362@30 corner: 459@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	362@30 corner: 459@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	362@30 corner: 459@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(219152384)
		m: 	[442@46 mouseUp 4224296 nil]
	Receiver's instance variables: 
		bounds: 	362@30 corner: 459@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	362@30 corner: 459@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		evt: 	[442@46 mouseUp 4224296 nil]
		all: 	an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(9...etc...
	Receiver's instance variables: 
		bounds: 	362@30 corner: 459@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	362@30 corner: 459@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		evt: 	[442@46 mouseUp 4224296 nil]
	Receiver's instance variables: 
		bounds: 	362@30 corner: 459@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	362@30 corner: 459@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		anEvent: 	[442@46 mouseUp 4224296 nil]
	Receiver's instance variables: 
		bounds: 	362@30 corner: 459@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	362@30 corner: 459@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [442@46 mouseUp 4224296 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(219152384)
	Receiver's instance variables: 
		timeStamp: 	4224296
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	442@46
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(219152384)
	Arguments and temporary variables: 
		anEvent: 	[442@46 mouseUp 4224296 nil]
	Receiver's instance variables: 
		bounds: 	362@30 corner: 459@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(164888576))
		fullBounds: 	362@30 corner: 459@56
		color: 	Color transparent
		extension: 	a MorphExtension (125829120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 3:44:05 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		nameString: 	'Handles-JB.1'
		messageString: 	'test Save Packages'
		info: 	a MCVersionInfo(Handles-JB.1)
		deps: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		pair: 	#('Handles-JB.1' 'test Save Packages')
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handle)->a MCCacheRepository(/Users/arna...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(511705088)
		m: 	[594@31 mouseUp 4229099 nil]
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	5
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		evt: 	[594@31 mouseUp 4229099 nil]
		all: 	an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(9...etc...
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		evt: 	[594@31 mouseUp 4229099 nil]
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		anEvent: 	[594@31 mouseUp 4229099 nil]
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 3:44:07 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>nextPut:
	Receiver: a WriteStream '  '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	2
		readLimit: 	2
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream '  '
		t5: 	13503733
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		nameString: 	'Handles-JB.1'
		messageString: 	'test Save Packages'
		info: 	a MCVersionInfo(Handles-JB.1)
		deps: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		pair: 	#('Handles-JB.1' 'test Save Packages')
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handle)->a MCCacheRepository(/Users/arna...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(511705088)
		m: 	[594@31 mouseUp 4229099 nil]
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	5
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		evt: 	[594@31 mouseUp 4229099 nil]
		all: 	an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(9...etc...
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		evt: 	[594@31 mouseUp 4229099 nil]
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		anEvent: 	[594@31 mouseUp 4229099 nil]
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


MouseButtonEvent>>sentTo:
	Receiver: [594@31 mouseUp 4229099 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(511705088)
	Receiver's instance variables: 
		timeStamp: 	4229099
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	594@31
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 3:44:08 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	3
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>nextPut:
	Receiver: a WriteStream '   '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	3
		readLimit: 	3
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream '   '
		t5: 	13503732
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		nameString: 	'Handles-JB.1'
		messageString: 	'test Save Packages'
		info: 	a MCVersionInfo(Handles-JB.1)
		deps: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		pair: 	#('Handles-JB.1' 'test Save Packages')
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handle)->a MCCacheRepository(/Users/arna...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(511705088)
		m: 	[594@31 mouseUp 4229099 nil]
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	5
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(93323264) a Plugg...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		evt: 	[594@31 mouseUp 4229099 nil]
		all: 	an Array(a PluggableButtonMorphPlus(19136512) a PluggableButtonMorphPlus(9...etc...
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		evt: 	[594@31 mouseUp 4229099 nil]
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(511705088)
	Arguments and temporary variables: 
		anEvent: 	[594@31 mouseUp 4229099 nil]
	Receiver's instance variables: 
		bounds: 	565@30 corner: 646@56
		owner: 	a PluggableThemedPanelMorph(998768640)
		submorphs: 	an Array(an AlignmentMorph(808976384))
		fullBounds: 	565@30 corner: 646@56
		color: 	Color transparent
		extension: 	a MorphExtension (200278016) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


MouseButtonEvent>>sentTo:
	Receiver: [594@31 mouseUp 4229099 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(511705088)
	Receiver's instance variables: 
		timeStamp: 	4229099
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	594@31
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 3:45:17 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] Squeak VM 4.2.5b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	[] in ProgressInitiationException>>defaultMorphicAction
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopy>>changesRelativeToRepository:
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		aRepository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/packag...etc...
		ancestorVersion: 	nil
		ancestorSnapshot: 	a MCSnapshot
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	true
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	nil
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


[] in MCWorkingCopyBrowser>>viewChanges
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil


--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>changesRelativeToRepository:
[] in MCWorkingCopyBrowser>>viewChanges
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
MCWorkingCopyBrowser>>viewChanges
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 3:45:50 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] Squeak VM 4.2.5b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		nameString: 	'Handles-JB.1'
		messageString: 	'empty log message'
		info: 	a MCVersionInfo(Handles-JB.1)
		deps: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		pair: 	#('Handles-JB.1' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package-cache)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@30 corner: 482@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	433@30 corner: 482@56
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@30 corner: 482@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	433@30 corner: 482@56
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(485228544)
		m: 	[448@38 mouseUp 46226 nil]
	Receiver's instance variables: 
		bounds: 	433@30 corner: 482@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	433@30 corner: 482@56
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	5
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		evt: 	[448@38 mouseUp 46226 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@30 corner: 482@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	433@30 corner: 482@56
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		evt: 	[448@38 mouseUp 46226 nil]
	Receiver's instance variables: 
		bounds: 	433@30 corner: 482@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	433@30 corner: 482@56
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		anEvent: 	[448@38 mouseUp 46226 nil]
	Receiver's instance variables: 
		bounds: 	433@30 corner: 482@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	433@30 corner: 482@56
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 3:46:05 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] Squeak VM 4.2.5b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>DoItIn:
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 
		ThisContext: 	MethodReference>>timeStamp
	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'self compiledMethod timeStamp'
		requestor: 	a TextMorphForShoutEditor
		class: 	MethodReference
		category: 	nil
		context: 	MethodReference>>timeStamp
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		ctxt: 	MethodReference>>timeStamp
	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		ctxt: 	MethodReference>>timeStamp
	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a Debugger
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 14 and character $s and rectangle 36@16...etc...
		stopBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
 ...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(95682560)
		oldInterval: 	(34 to: 42)
		pivotBlock: 	a CharacterBlock with index 43 and rectangle 235@16 corner: 235@32
...etc...
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(95682560)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(1062731776)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (745537536) [other:  (blinkStart -> 64080)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(941621248)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(95682560)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(1062731776)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (745537536) [other:  (blinkStart -> 64080)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(941621248)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(95682560)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(1062731776)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (745537536) [other:  (blinkStart -> 64080)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(941621248)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(95682560)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(1062731776)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (745537536) [other:  (blinkStart -> 64080)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(941621248)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(95682560)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a Debugger
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(95682560)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(95682560)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(95682560)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(1062731776)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (745537536) [other:  (blinkStart -> 64080)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(941621248)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(95682560)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableShoutMorph(941621248)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(1062731776)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (745537536) [other:  (blinkStart -> 64080)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(941621248)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(95682560)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(1062731776)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (745537536) [other:  (blinkStart -> 64080)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(941621248)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(95682560)
	Receiver's instance variables: 
		timeStamp: 	63573
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	37@27
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(95682560)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(1062731776)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (745537536) [other:  (blinkStart -> 64080)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(941621248)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(95682560)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(1062731776)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (745537536) [other:  (blinkStart -> 64080)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'timeStamp
	^ self compiledMethod timeStamp'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	nil
		editView: 	a PluggableShoutMorph(941621248)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForShout(95682560)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1652@395 corner: 1668@411
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1652@395 corner: 1668@411
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(212336640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1652@395 1652@395 mouseMove CMD 63174 nil]
		targetOffset: 	274@37
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 63174 1652 395 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(851181568) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(851181568) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1652@395 corner: 1668@411
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1652@395 corner: 1668@411
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(212336640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1652@395 1652@395 mouseMove CMD 63174 nil]
		targetOffset: 	274@37
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 63174 1652 395 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1652@395 corner: 1668@411
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1652@395 corner: 1668@411
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(212336640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1652@395 1652@395 mouseMove CMD 63174 nil]
		targetOffset: 	274@37
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 63174 1652 395 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>DoItIn:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Handle class>>recompileAll
30 November 2010 3:54:16 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Handle class(Object)>>doesNotUnderstand: #recompileAll
	Receiver: Handle
	Arguments and temporary variables: 
		aMessage: 	recompileAll
		exception: 	MessageNotUnderstood: Handle class>>recompileAll
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addBehavior->(Handle>>#addBehavior "a CompiledM...etc...
		format: 	138
		instanceVariables: 	#('receiver' 'classLookup' 'state' 'configuration')
		organization: 	('accessing' classLookup classLookup: configuration receiver rece...etc...
		subclasses: 	{MetaHandle. ObjectHandle. AbstractMirrorHandle. CapabilityHandle. ...etc...
		name: 	#Handle
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Core'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'Handle recompileAll'
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $H and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 20 and rectangle 121@0 corner: 121@16
 i...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5))
		initialText: 	a Text for 'H'
		selectionShowing: 	false
		otherInterval: 	(19 to: 19)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(819462144)
		oldInterval: 	nil
		pivotBlock: 	nil
		inBackTo: 	false


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(819462144)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(575143936)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (52690944) [other:  (blinkStart -> 31222)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Handle recompileAll'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(235405312)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(819462144)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'Handle recompileAll'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(575143936)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (52690944) [other:  (blinkStart -> 31222)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Handle recompileAll'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(235405312)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(819462144)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(575143936)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (52690944) [other:  (blinkStart -> 31222)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Handle recompileAll'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(235405312)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(819462144)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(575143936)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (52690944) [other:  (blinkStart -> 31222)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Handle recompileAll'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(235405312)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(819462144)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a SHWorkspace
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(819462144)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(819462144)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(819462144)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(575143936)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (52690944) [other:  (blinkStart -> 31222)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Handle recompileAll'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(235405312)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(819462144)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableShoutMorph(235405312)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(575143936)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (52690944) [other:  (blinkStart -> 31222)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Handle recompileAll'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(235405312)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(819462144)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(575143936)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (52690944) [other:  (blinkStart -> 31222)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Handle recompileAll'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(235405312)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(819462144)
	Receiver's instance variables: 
		timeStamp: 	30718
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	142@26
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(819462144)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(575143936)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (52690944) [other:  (blinkStart -> 31222)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Handle recompileAll'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(235405312)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(819462144)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(575143936)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (52690944) [other:  (blinkStart -> 31222)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Handle recompileAll'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(235405312)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForShout(819462144)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	938@117 corner: 954@133
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	938@117 corner: 954@133
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(794558464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[938@117 938@117 mouseMove CMD 30596 nil]
		targetOffset: 	154@25
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 30596 938 117 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(538181632) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(538181632) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	938@117 corner: 954@133
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	938@117 corner: 954@133
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(794558464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[938@117 938@117 mouseMove CMD 30596 nil]
		targetOffset: 	154@25
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 30596 938 117 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	938@117 corner: 954@133
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	938@117 corner: 954@133
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(794558464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[938@117 938@117 mouseMove CMD 30596 nil]
		targetOffset: 	154@25
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 30596 938 117 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	938@117 corner: 954@133
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	938@117 corner: 954@133
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(794558464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[938@117 938@117 mouseMove CMD 30596 nil]
		targetOffset: 	154@25
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 30596 938 117 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	938@117 corner: 954@133
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	938@117 corner: 954@133
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(794558464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[938@117 938@117 mouseMove CMD 30596 nil]
		targetOffset: 	154@25
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 30596 938 117 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 30718 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	938@117 corner: 954@133
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	938@117 corner: 954@133
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(794558464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[938@117 938@117 mouseMove CMD 30596 nil]
		targetOffset: 	154@25
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 30596 938 117 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(825753600))(a SystemWin...etc...
		lastStepTime: 	30702
		lastStepMessage: 	nil
		lastCycleTime: 	30742
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	30702
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(825753600))(a SystemWin...etc...
		lastStepTime: 	30702
		lastStepMessage: 	nil
		lastCycleTime: 	30742
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	30702
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Handle class(Object)>>doesNotUnderstand: #recompileAll
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: x is multiply defined
30 November 2010 3:59:50 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ClassBuilder(Object)>>error:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		aString: 	'x is multiply defined'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>validateInstvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#A
		newSuper: 	Object
		type: 	#normal
		classVarString: 	'Coucou'
		poolString: 	''
		category: 	#'Handles-ClassTest'
		unsafe: 	false
		oldClass: 	A
		instVars: 	#('var1' 'x' 'x')
		classVars: 	#(#Coucou)
		copyOfOldClass: 	A
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	#(nil)
		newCategory: 	nil
		oldCategory: 	nil
		needNew: 	nil
		force: 	nil
		organization: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


BlockClosure>>ensure:
	Receiver: [| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateS...etc...
	Arguments and temporary variables: 
		aBlock: 	[copyOfOldClass
		ifNotNil: [copyOfOldClass superclass removeSubclass: ...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariable...etc...
		startpc: 	350
		numArgs: 	0


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#A
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'var1 x x'
		classVarString: 	'Coucou'
		poolString: 	''
		category: 	#'Handles-ClassTest'
		unsafe: 	false
		oldClass: 	A
		instVars: 	#('var1' 'x' 'x')
		classVars: 	#(#Coucou)
		copyOfOldClass: 	A
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	#(nil)
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#A
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'var1 x x'
		classVarString: 	'Coucou'
		poolString: 	''
		category: 	#'Handles-ClassTest'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


A class(Class)>>addInstVarName:
	Receiver: A
	Arguments and temporary variables: 
		aString: 	'x'
	Receiver's instance variables: 
		superclass: 	A
		methodDict: 	StructuralHandleClass
		format: 	an Array(Object a MethodDictionary(#change->(A>>#change "a CompiledMeth...etc...
		instanceVariables: 	3
		organization: 	<<error during printing>>

ClassHandleTest>>testAddInstVarName
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 
		tutu: 	A
	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


ClassHandleTest(TestCase)>>performTest
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


[] in ClassHandleTest(TestCase)>>runCase
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClassHandleTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


ClassHandleTest(TestCase)>>runCase
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


[] in ClassHandleTest(TestCase)>>debug
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[self resources
		do: [:each | each reset]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClassHandleTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


ClassHandleTest(TestCase)>>debug
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	4 run, 3 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		message: 	'4 run, 3 passed, 0 failures, 1 errors'
		defect: 	ClassHandleTest>>#testAddInstVarName
	Receiver's instance variables: 
		target: 	OBClassNode<ClassHandleTest>
		requestor: 	an OBColumn(ClassHandleTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(834142208)
	Receiver's instance variables: 
		target: 	OBClassNode<ClassHandleTest>
		requestor: 	an OBColumn(ClassHandleTest)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(890503168)'run tests (t)'
	Arguments and temporary variables: 
		evt: 	[916@525 mouseUp 22418 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	889@521 corner: 1084@535
		owner: 	a MenuMorph(61603840)
		submorphs: 	#()
		fullBounds: 	889@521 corner: 1084@535
		color: 	Color black
		extension: 	a MorphExtension (125304832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(834142208))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(890503168)'run tests (t)'
	Arguments and temporary variables: 
		evt: 	[916@525 mouseUp 22418 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	889@521 corner: 1084@535
		owner: 	a MenuMorph(61603840)
		submorphs: 	#()
		fullBounds: 	889@521 corner: 1084@535
		color: 	Color black
		extension: 	a MorphExtension (125304832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(834142208))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(890503168)'run tests (t)'
	Arguments and temporary variables: 
		evt: 	[916@525 mouseUp 22418 nil]
	Receiver's instance variables: 
		bounds: 	889@521 corner: 1084@535
		owner: 	a MenuMorph(61603840)
		submorphs: 	#()
		fullBounds: 	889@521 corner: 1084@535
		color: 	Color black
		extension: 	a MorphExtension (125304832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(834142208))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(890503168)'run tests (t)'
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
	Receiver's instance variables: 
		bounds: 	889@521 corner: 1084@535
		owner: 	a MenuMorph(61603840)
		submorphs: 	#()
		fullBounds: 	889@521 corner: 1084@535
		color: 	Color black
		extension: 	a MorphExtension (125304832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(834142208))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [916@525 mouseUp 22418 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(890503168)'run tests (t)'
	Receiver's instance variables: 
		timeStamp: 	22418
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	916@525
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(890503168)'run tests (t)'
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
	Receiver's instance variables: 
		bounds: 	889@521 corner: 1084@535
		owner: 	a MenuMorph(61603840)
		submorphs: 	#()
		fullBounds: 	889@521 corner: 1084@535
		color: 	Color black
		extension: 	a MorphExtension (125304832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(834142208))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
		aMorph: 	a ToggleMenuItemMorph(890503168)'run tests (t)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
		aMorph: 	a ToggleMenuItemMorph(890503168)'run tests (t)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(890503168)'run tests (t)'
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	889@521 corner: 1084@535
		owner: 	a MenuMorph(61603840)
		submorphs: 	#()
		fullBounds: 	889@521 corner: 1084@535
		color: 	Color black
		extension: 	a MorphExtension (125304832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(834142208))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
		aMorph: 	a MenuMorph(61603840)
		localEvt: 	[916@525 mouseUp 22418 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(890503168)'run tests (t)'
		morphs: 	an Array(a ToggleMenuItemMorph(789053440)'file out (o)' a ToggleMenuIte...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
		aMorph: 	a MenuMorph(61603840)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(61603840)
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	885@339 corner: 1088@617
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(789053440)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	885@339 corner: 1089@618
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (487587840) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(ClassHandleTest)
		selectedItem: 	a ToggleMenuItemMorph(890503168)'run tests (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(61603840)
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
	Receiver's instance variables: 
		bounds: 	885@339 corner: 1088@617
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(789053440)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	885@339 corner: 1089@618
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (487587840) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(ClassHandleTest)
		selectedItem: 	a ToggleMenuItemMorph(890503168)'run tests (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(61603840)
	Arguments and temporary variables: 
		evt: 	[916@525 mouseUp 22418 nil]
	Receiver's instance variables: 
		bounds: 	885@339 corner: 1088@617
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(789053440)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	885@339 corner: 1089@618
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (487587840) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(ClassHandleTest)
		selectedItem: 	a ToggleMenuItemMorph(890503168)'run tests (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
		focusHolder: 	a MenuMorph(61603840)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	916@525 corner: 932@541
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	916@525 corner: 932@541
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(241696768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[916@525 mouseUp 22418 nil]
		targetOffset: 	27@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22418 916 525 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2467@1548
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(481034240) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[916@525 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2467@1548
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(481034240) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
		focusHolder: 	a MenuMorph(61603840)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	916@525 corner: 932@541
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	916@525 corner: 932@541
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(241696768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[916@525 mouseUp 22418 nil]
		targetOffset: 	27@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22418 916 525 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[916@525 mouseUp 22418 nil]
		focusHolder: 	a MenuMorph(61603840)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	916@525 corner: 932@541
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	916@525 corner: 932@541
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(241696768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[916@525 mouseUp 22418 nil]
		targetOffset: 	27@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22418 916 525 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil



--- The full stack ---
ClassBuilder(Object)>>error:
ClassBuilder>>validateInstvars:from:forSuper:
[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
BlockClosure>>ensure:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
A class(Class)>>addInstVarName:
ClassHandleTest>>testAddInstVarName
ClassHandleTest(TestCase)>>performTest
[] in ClassHandleTest(TestCase)>>runCase
BlockClosure>>ensure:
ClassHandleTest(TestCase)>>runCase
[] in ClassHandleTest(TestCase)>>debug
BlockClosure>>ensure:
ClassHandleTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: x is multiply defined
30 November 2010 4:01:22 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ClassBuilder(Object)>>error:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		aString: 	'x is multiply defined'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>validateInstvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		t1: 	#A
		t3: 	Object
		t4: 	#normal
		t6: 	'Coucou'
		t7: 	''
		t8: 	#'Handles-ClassTest'
		t9: 	false
		t10: 	A
		t11: 	#('var1' 'x' 'x')
		t12: 	#(#Coucou)
		t13: 	A
		t14: 	nil
		t15: 	nil
		t16: 	#(nil)
		t18: 	nil
		t19: 	nil
		t20: 	nil
		t21: 	nil
		t22: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariable...etc...
		startpc: 	350
		numArgs: 	0


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		t1: 	#A
		t2: 	a SystemDictionary(lots of globals)
		t3: 	Object
		t4: 	#normal
		t5: 	'var1 x x'
		t6: 	'Coucou'
		t7: 	''
		t8: 	#'Handles-ClassTest'
		t9: 	false
		t10: 	A
		t11: 	#('var1' 'x' 'x')
		t12: 	#(#Coucou)
		t13: 	A
		t14: 	nil
		t15: 	nil
		t16: 	#(nil)
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#A
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'var1 x x'
		classVarString: 	'Coucou'
		poolString: 	''
		category: 	#'Handles-ClassTest'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


A class(Class)>>addInstVarName:
	Receiver: A
	Arguments and temporary variables: 
		aString: 	'x'
	Receiver's instance variables: 
		superclass: 	A
		methodDict: 	StructuralHandleClass
		format: 	an Array(Object a MethodDictionary(#change->(A>>#change "a CompiledMeth...etc...
		instanceVariables: 	3
		organization: 	<<error during printing>>

ClassHandleTest class>>DoIt
	Receiver: ClassHandleTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#deleteClass->(ClassHandleTest>>#deleteClass "a ...etc...
		format: 	136
		instanceVariables: 	#('className' 'renamedName')
		organization: 	('setup' deleteClass deleteRenamedClass tearDown)
('testing' test...etc...
		subclasses: 	nil
		name: 	#ClassHandleTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Test'
		traitComposition: 	nil
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testAddInstVarName) #failures->a Set() #p...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '(ClassHandle for: A)
addInstVarName: ''x'''
		requestor: 	an OBTextMorphEditorWithShout
		class: 	ClassHandleTest class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		rcvr: 	ClassHandleTest
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	ClassHandleTest
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
	Receiver: an OBTextMorphEditorWithShout
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	an OBDefinitionPanel
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 35 and character $( and rectangle 56@32...etc...
		stopBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@48...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := ClassHandle for: A.
...etc...
		selectionShowing: 	false
		otherInterval: 	(76 to: 75)
		lastParentLocation: 	nil
		morph: 	an OBTextMorphWithShout(354680832)
		oldInterval: 	(76 to: 75)
		pivotBlock: 	a CharacterBlock with index 75 and character $. and rectangle 118@4...etc...
		inBackTo: 	false


[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(354680832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 833@114
		owner: 	a TransformMorph(321126400)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 833@114
		color: 	Color black
		extension: 	a MorphExtension (1033895936) [other:  (blinkStart -> 62450)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
addIns...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(876609536)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(354680832)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	an OBTextMorphEditorWithShout
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
add...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 833@114
		owner: 	a TransformMorph(321126400)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 833@114
		color: 	Color black
		extension: 	a MorphExtension (1033895936) [other:  (blinkStart -> 62450)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
addIns...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(876609536)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
	Receiver: an OBTextMorphWithShout(354680832)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 833@114
		owner: 	a TransformMorph(321126400)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 833@114
		color: 	Color black
		extension: 	a MorphExtension (1033895936) [other:  (blinkStart -> 62450)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
addIns...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(876609536)
		acceptOnCR: 	false


[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(354680832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 833@114
		owner: 	a TransformMorph(321126400)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 833@114
		color: 	Color black
		extension: 	a MorphExtension (1033895936) [other:  (blinkStart -> 62450)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
addIns...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(876609536)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(354680832)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	an OBTextMorphEditorWithShout
		stringHolder: 	an OBDefinitionPanel
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(354680832)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	an OBTextMorphWithShout(354680832)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


OBTextMorphWithShout(TextMorph)>>keyStroke:
	Receiver: an OBTextMorphWithShout(354680832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 833@114
		owner: 	a TransformMorph(321126400)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 833@114
		color: 	Color black
		extension: 	a MorphExtension (1033895936) [other:  (blinkStart -> 62450)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
addIns...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(876609536)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
	Receiver: an OBTextMorphWithShout(354680832)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	an OBPluggableTextMorphWithShout(876609536)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 833@114
		owner: 	a TransformMorph(321126400)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 833@114
		color: 	Color black
		extension: 	a MorphExtension (1033895936) [other:  (blinkStart -> 62450)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
addIns...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(876609536)
		acceptOnCR: 	false


OBTextMorphWithShout(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorphWithShout(354680832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 833@114
		owner: 	a TransformMorph(321126400)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 833@114
		color: 	Color black
		extension: 	a MorphExtension (1033895936) [other:  (blinkStart -> 62450)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
addIns...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(876609536)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	an OBTextMorphWithShout(354680832)
	Receiver's instance variables: 
		timeStamp: 	61935
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	55@40
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


OBTextMorphWithShout(Morph)>>handleEvent:
	Receiver: an OBTextMorphWithShout(354680832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 833@114
		owner: 	a TransformMorph(321126400)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 833@114
		color: 	Color black
		extension: 	a MorphExtension (1033895936) [other:  (blinkStart -> 62450)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
addIns...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(876609536)
		acceptOnCR: 	false


OBTextMorphWithShout(Morph)>>handleFocusEvent:
	Receiver: an OBTextMorphWithShout(354680832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 833@114
		owner: 	a TransformMorph(321126400)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 833@114
		color: 	Color black
		extension: 	a MorphExtension (1033895936) [other:  (blinkStart -> 62450)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testAddInstVarName
	| t1 |
	t1 := (ClassHandle for: A)
addIns...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	an OBTextMorphEditorWithShout
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	an OBPluggableTextMorphWithShout(876609536)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	an OBTextMorphWithShout(354680832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1127@554 corner: 1143@570
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1127@554 corner: 1143@570
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(681050112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1127@554 1127@554 mouseMove CMD 61414 nil]
		targetOffset: 	117@58
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 61414 1127 554 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(669777920) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(669777920) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1127@554 corner: 1143@570
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1127@554 corner: 1143@570
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(681050112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1127@554 1127@554 mouseMove CMD 61414 nil]
		targetOffset: 	117@58
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 61414 1127 554 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1127@554 corner: 1143@570
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1127@554 corner: 1143@570
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(681050112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1127@554 1127@554 mouseMove CMD 61414 nil]
		targetOffset: 	117@58
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 61414 1127 554 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
ClassBuilder(Object)>>error:
ClassBuilder>>validateInstvars:from:forSuper:
[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
BlockClosure>>ensure:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
A class(Class)>>addInstVarName:
ClassHandleTest class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
OBTextMorphEditorWithShout(ParagraphEditor)>>evaluateSelection
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>printIt:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: x is multiply defined
30 November 2010 4:01:54 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ClassBuilder(Object)>>error:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		aString: 	'x is multiply defined'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>validateInstvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		t1: 	#A
		t3: 	Object
		t4: 	#normal
		t6: 	'Coucou'
		t7: 	''
		t8: 	#'Handles-ClassTest'
		t9: 	false
		t10: 	A
		t11: 	#('var1' 'x' 'x')
		t12: 	#(#Coucou)
		t13: 	A
		t14: 	nil
		t15: 	nil
		t16: 	#(nil)
		t18: 	nil
		t19: 	nil
		t20: 	nil
		t21: 	nil
		t22: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariable...etc...
		startpc: 	350
		numArgs: 	0


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		t1: 	#A
		t2: 	a SystemDictionary(lots of globals)
		t3: 	Object
		t4: 	#normal
		t5: 	'var1 x x'
		t6: 	'Coucou'
		t7: 	''
		t8: 	#'Handles-ClassTest'
		t9: 	false
		t10: 	A
		t11: 	#('var1' 'x' 'x')
		t12: 	#(#Coucou)
		t13: 	A
		t14: 	nil
		t15: 	nil
		t16: 	#(nil)
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#A
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'var1 x x'
		classVarString: 	'Coucou'
		poolString: 	''
		category: 	#'Handles-ClassTest'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


A class(Class)>>addInstVarName:
	Receiver: A
	Arguments and temporary variables: 
		aString: 	'x'
	Receiver's instance variables: 
		superclass: 	A
		methodDict: 	StructuralHandleClass
		format: 	an Array(Object a MethodDictionary(#change->(A>>#change "a CompiledMeth...etc...
		instanceVariables: 	3
		organization: 	<<error during printing>>

ClassHandleTest>>testAddInstVarName
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 
		t1: 	A
	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


ClassHandleTest(TestCase)>>performTest
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


[] in ClassHandleTest(TestCase)>>runCase
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ClassHandleTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


ClassHandleTest(TestCase)>>runCase
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


[] in ClassHandleTest(TestCase)>>debug
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		t1: 	[self resources
		do: [:each | each reset]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	ClassHandleTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


ClassHandleTest(TestCase)>>debug
	Receiver: ClassHandleTest>>#testAddInstVarName
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddInstVarName
		className: 	nil
		renamedName: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		t1: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpected pa...etc...
		t2: 	'1 run, 0 passed, 0 failures, 1 errors'
		t3: 	ClassHandleTest>>#testAddInstVarName
	Receiver's instance variables: 
		target: 	OBMethodNode<ClassHandleTest#testAddInstVarName>
		requestor: 	an OBColumn(testAddInstVarName)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		t1: 	#execute
		t2: 	an OBPluggableListMorph(367525888)
	Receiver's instance variables: 
		target: 	OBMethodNode<ClassHandleTest#testAddInstVarName>
		requestor: 	an OBColumn(testAddInstVarName)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(68681728)'run test (t)'
	Arguments and temporary variables: 
		t1: 	[1794@607 mouseUp 94088 nil]
		t3: 	2
	Receiver's instance variables: 
		bounds: 	1752@594 corner: 1947@608
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	1752@594 corner: 1947@608
		color: 	Color black
		extension: 	a MorphExtension (531103744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run test (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(367525888))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	[oldcursor show]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(68681728)'run test (t)'
	Arguments and temporary variables: 
		t1: 	[1794@607 mouseUp 94088 nil]
		t2: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	1752@594 corner: 1947@608
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	1752@594 corner: 1947@608
		color: 	Color black
		extension: 	a MorphExtension (531103744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run test (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(367525888))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(68681728)'run test (t)'
	Arguments and temporary variables: 
		evt: 	[1794@607 mouseUp 94088 nil]
	Receiver's instance variables: 
		bounds: 	1752@594 corner: 1947@608
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	1752@594 corner: 1947@608
		color: 	Color black
		extension: 	a MorphExtension (531103744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run test (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(367525888))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(68681728)'run test (t)'
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
	Receiver's instance variables: 
		bounds: 	1752@594 corner: 1947@608
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	1752@594 corner: 1947@608
		color: 	Color black
		extension: 	a MorphExtension (531103744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run test (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(367525888))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [1794@607 mouseUp 94088 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(68681728)'run test (t)'
	Receiver's instance variables: 
		timeStamp: 	94088
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1794@607
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(68681728)'run test (t)'
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
	Receiver's instance variables: 
		bounds: 	1752@594 corner: 1947@608
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	1752@594 corner: 1947@608
		color: 	Color black
		extension: 	a MorphExtension (531103744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run test (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(367525888))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
		aMorph: 	a ToggleMenuItemMorph(68681728)'run test (t)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1794@607 mouseUp 94088 nil]
		t2: 	a ToggleMenuItemMorph(68681728)'run test (t)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(68681728)'run test (t)'
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1752@594 corner: 1947@608
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	1752@594 corner: 1947@608
		color: 	Color black
		extension: 	a MorphExtension (531103744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run test (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(367525888))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
		aMorph: 	a MenuMorph(692060160)
		localEvt: 	[1794@607 mouseUp 94088 nil]
		index: 	19
		child: 	a ToggleMenuItemMorph(68681728)'run test (t)'
		morphs: 	an Array(a ToggleMenuItemMorph(274989056)'file out (o)' a ToggleMenuIte...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1794@607 mouseUp 94088 nil]
		t2: 	a MenuMorph(692060160)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(692060160)
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1748@340 corner: 1951@720
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(274989056)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1748@340 corner: 1952@721
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (559153152) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(testAddInstVarName)
		selectedItem: 	a ToggleMenuItemMorph(68681728)'run test (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(692060160)
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
	Receiver's instance variables: 
		bounds: 	1748@340 corner: 1951@720
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(274989056)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1748@340 corner: 1952@721
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (559153152) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(testAddInstVarName)
		selectedItem: 	a ToggleMenuItemMorph(68681728)'run test (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(692060160)
	Arguments and temporary variables: 
		evt: 	[1794@607 mouseUp 94088 nil]
	Receiver's instance variables: 
		bounds: 	1748@340 corner: 1951@720
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(274989056)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1748@340 corner: 1952@721
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (559153152) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(testAddInstVarName)
		selectedItem: 	a ToggleMenuItemMorph(68681728)'run test (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
		focusHolder: 	a MenuMorph(692060160)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1794@607 corner: 1810@623
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1794@607 corner: 1810@623
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(623378432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1794@607 mouseUp 94088 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 94088 1794 607 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(579338240) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[1794@607 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(579338240) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
		focusHolder: 	a MenuMorph(692060160)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1794@607 corner: 1810@623
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1794@607 corner: 1810@623
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(623378432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1794@607 mouseUp 94088 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 94088 1794 607 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1794@607 mouseUp 94088 nil]
		focusHolder: 	a MenuMorph(692060160)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1794@607 corner: 1810@623
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1794@607 corner: 1810@623
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(623378432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1794@607 mouseUp 94088 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 94088 1794 607 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
ClassBuilder(Object)>>error:
ClassBuilder>>validateInstvars:from:forSuper:
[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
BlockClosure>>ensure:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
A class(Class)>>addInstVarName:
ClassHandleTest>>testAddInstVarName
ClassHandleTest(TestCase)>>performTest
[] in ClassHandleTest(TestCase)>>runCase
BlockClosure>>ensure:
ClassHandleTest(TestCase)>>runCase
[] in ClassHandleTest(TestCase)>>debug
BlockClosure>>ensure:
ClassHandleTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: AnObsoleteCopyHandle>>storeAt:
30 November 2010 4:07:10 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

AnObsoleteCopyHandle(Object)>>doesNotUnderstand: #storeAt:
	Receiver: an AnObsoleteCopyHandle
	Arguments and temporary variables: 
		aMessage: 	storeAt: A
		exception: 	MessageNotUnderstood: AnObsoleteCopyHandle>>storeAt:
		resumeValue: 	nil
	Receiver's instance variables: 
		receiver: 	an A
		classLookup: 	B
		state: 	#('var1' nil)
		configuration: 	0


[] in CopyHandleTest>>testAddingMethod
	Receiver: CopyHandleTest>>#testAddingMethod
	Arguments and temporary variables: 
		t2: 	an AnObsoleteCopyHandle
	Receiver's instance variables: 
		testSelector: 	#testAddingMethod
		storeIntoInstVar: 	nil


BlockClosure>>valueWithPossibleArgs:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		anArray: 	an Array(MessageNotUnderstood: AnObsoleteCopyHandle>>storeAt:)
	Receiver's instance variables: 
		outerContext: 	CopyHandleTest>>testAddingMethod
		startpc: 	94
		numArgs: 	0


[] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood: AnObsoleteCopyHandle>>storeAt:
	Receiver's instance variables: 
		sender: 	CopyHandleTest>>testAddingMethod
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		valueWithPossibleArgs: {exception}]
	Arguments and temporary variables: 
		t1: 	[self tempAt: 3 put: true]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	90
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood: AnObsoleteCopyHandle>>storeAt:
		val: 	nil
	Receiver's instance variables: 
		sender: 	CopyHandleTest>>testAddingMethod
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

MessageNotUnderstood(Exception)>>signal
	Receiver: MessageNotUnderstood: AnObsoleteCopyHandle>>storeAt:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		message: 	storeAt: A
		receiver: 	an AnObsoleteCopyHandle
		reachedDefaultHandler: 	false


AnObsoleteCopyHandle(Object)>>doesNotUnderstand: #storeAt:
	Receiver: an AnObsoleteCopyHandle
	Arguments and temporary variables: 
		aMessage: 	storeAt: A
		exception: 	MessageNotUnderstood: AnObsoleteCopyHandle>>storeAt:
		resumeValue: 	nil
	Receiver's instance variables: 
		receiver: 	an A
		classLookup: 	B
		state: 	#('var1' nil)
		configuration: 	0


[] in CopyHandleTest>>testAddingMethod
	Receiver: CopyHandleTest>>#testAddingMethod
	Arguments and temporary variables: 
		t2: 	an AnObsoleteCopyHandle
	Receiver's instance variables: 
		testSelector: 	#testAddingMethod
		storeIntoInstVar: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	CopyHandleTest>>testAddingMethod
		startpc: 	82
		numArgs: 	0


CopyHandleTest>>testAddingMethod
	Receiver: CopyHandleTest>>#testAddingMethod
	Arguments and temporary variables: 
		t1: 	an A
		t2: 	an AnObsoleteCopyHandle
	Receiver's instance variables: 
		testSelector: 	#testAddingMethod
		storeIntoInstVar: 	nil


CopyHandleTest(TestCase)>>performTest
	Receiver: CopyHandleTest>>#testAddingMethod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddingMethod
		storeIntoInstVar: 	nil


[] in CopyHandleTest(TestCase)>>runCase
	Receiver: CopyHandleTest>>#testAddingMethod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddingMethod
		storeIntoInstVar: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	CopyHandleTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


CopyHandleTest(TestCase)>>runCase
	Receiver: CopyHandleTest>>#testAddingMethod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddingMethod
		storeIntoInstVar: 	nil


[] in CopyHandleTest(TestCase)>>debug
	Receiver: CopyHandleTest>>#testAddingMethod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddingMethod
		storeIntoInstVar: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		t1: 	[self resources
		do: [:each | each reset]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	CopyHandleTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


CopyHandleTest(TestCase)>>debug
	Receiver: CopyHandleTest>>#testAddingMethod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAddingMethod
		storeIntoInstVar: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		t1: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpected pa...etc...
		t2: 	'1 run, 0 passed, 0 failures, 1 errors'
		t3: 	CopyHandleTest>>#testAddingMethod
	Receiver's instance variables: 
		target: 	OBClassNode<CopyHandleTest>
		requestor: 	an OBColumn(CopyHandleTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		t1: 	#execute
		t2: 	an OBPluggableListMorph(544997376)
	Receiver's instance variables: 
		target: 	OBClassNode<CopyHandleTest>
		requestor: 	an OBColumn(CopyHandleTest)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(16777216)'run tests (t)'
	Arguments and temporary variables: 
		t1: 	[1671@476 mouseUp 138129 nil]
		t3: 	2
	Receiver's instance variables: 
		bounds: 	1613@470 corner: 1808@484
		owner: 	a MenuMorph(927989760)
		submorphs: 	#()
		fullBounds: 	1613@470 corner: 1808@484
		color: 	Color black
		extension: 	a MorphExtension (724828160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	[oldcursor show]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(16777216)'run tests (t)'
	Arguments and temporary variables: 
		t1: 	[1671@476 mouseUp 138129 nil]
		t2: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	1613@470 corner: 1808@484
		owner: 	a MenuMorph(927989760)
		submorphs: 	#()
		fullBounds: 	1613@470 corner: 1808@484
		color: 	Color black
		extension: 	a MorphExtension (724828160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(16777216)'run tests (t)'
	Arguments and temporary variables: 
		evt: 	[1671@476 mouseUp 138129 nil]
	Receiver's instance variables: 
		bounds: 	1613@470 corner: 1808@484
		owner: 	a MenuMorph(927989760)
		submorphs: 	#()
		fullBounds: 	1613@470 corner: 1808@484
		color: 	Color black
		extension: 	a MorphExtension (724828160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(16777216)'run tests (t)'
	Arguments and temporary variables: 
		anEvent: 	[1671@476 mouseUp 138129 nil]
	Receiver's instance variables: 
		bounds: 	1613@470 corner: 1808@484
		owner: 	a MenuMorph(927989760)
		submorphs: 	#()
		fullBounds: 	1613@470 corner: 1808@484
		color: 	Color black
		extension: 	a MorphExtension (724828160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [1671@476 mouseUp 138129 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(16777216)'run tests (t)'
	Receiver's instance variables: 
		timeStamp: 	138129
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1671@476
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(16777216)'run tests (t)'
	Arguments and temporary variables: 
		anEvent: 	[1671@476 mouseUp 138129 nil]
	Receiver's instance variables: 
		bounds: 	1613@470 corner: 1808@484
		owner: 	a MenuMorph(927989760)
		submorphs: 	#()
		fullBounds: 	1613@470 corner: 1808@484
		color: 	Color black
		extension: 	a MorphExtension (724828160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[1671@476 mouseUp 138129 nil]
		aMorph: 	a ToggleMenuItemMorph(16777216)'run tests (t)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1671@476 mouseUp 138129 nil]
		t2: 	a ToggleMenuItemMorph(16777216)'run tests (t)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(16777216)'run tests (t)'
	Arguments and temporary variables: 
		anEvent: 	[1671@476 mouseUp 138129 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1613@470 corner: 1808@484
		owner: 	a MenuMorph(927989760)
		submorphs: 	#()
		fullBounds: 	1613@470 corner: 1808@484
		color: 	Color black
		extension: 	a MorphExtension (724828160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[1671@476 mouseUp 138129 nil]
		aMorph: 	a MenuMorph(927989760)
		localEvt: 	[1671@476 mouseUp 138129 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(16777216)'run tests (t)'
		morphs: 	an Array(a ToggleMenuItemMorph(782761984)'file out (o)' a ToggleMenuIte...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1671@476 mouseUp 138129 nil]
		t2: 	a MenuMorph(927989760)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(927989760)
	Arguments and temporary variables: 
		anEvent: 	[1671@476 mouseUp 138129 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1609@288 corner: 1812@581
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(782761984)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1609@288 corner: 1813@582
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (992215040) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(CopyHandleTest)
		selectedItem: 	a ToggleMenuItemMorph(16777216)'run tests (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(927989760)
	Arguments and temporary variables: 
		anEvent: 	[1671@476 mouseUp 138129 nil]
	Receiver's instance variables: 
		bounds: 	1609@288 corner: 1812@581
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(782761984)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1609@288 corner: 1813@582
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (992215040) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(CopyHandleTest)
		selectedItem: 	a ToggleMenuItemMorph(16777216)'run tests (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(927989760)
	Arguments and temporary variables: 
		evt: 	[1671@476 mouseUp 138129 nil]
	Receiver's instance variables: 
		bounds: 	1609@288 corner: 1812@581
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(782761984)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1609@288 corner: 1813@582
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (992215040) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(CopyHandleTest)
		selectedItem: 	a ToggleMenuItemMorph(16777216)'run tests (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1671@476 mouseUp 138129 nil]
		focusHolder: 	a MenuMorph(927989760)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1671@476 corner: 1687@492
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1671@476 corner: 1687@492
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(722993152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1671@476 mouseUp 138129 nil]
		targetOffset: 	58@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 138129 1671 476 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(235929600) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
AnObsoleteCopyHandle(Object)>>doesNotUnderstand: #storeAt:
[] in CopyHandleTest>>testAddingMethod
BlockClosure>>valueWithPossibleArgs:
[] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
MessageNotUnderstood(Exception)>>signal
AnObsoleteCopyHandle(Object)>>doesNotUnderstand: #storeAt:
[] in CopyHandleTest>>testAddingMethod
BlockClosure>>on:do:
CopyHandleTest>>testAddingMethod
CopyHandleTest(TestCase)>>performTest
[] in CopyHandleTest(TestCase)>>runCase
BlockClosure>>ensure:
CopyHandleTest(TestCase)>>runCase
[] in CopyHandleTest(TestCase)>>debug
BlockClosure>>ensure:
CopyHandleTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
30 November 2010 4:11:24 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

HandleSelfWrappingTest(TestCase)>>signalFailure:
	Receiver: HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testDesactiveSelfWrap


HandleSelfWrappingTest(TestCase)>>assert:
	Receiver: HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Arguments and temporary variables: 
		t1: 	false
	Receiver's instance variables: 
		testSelector: 	#testDesactiveSelfWrap


HandleSelfWrappingTest(TestCase)>>should:raise:
	Receiver: HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		testSelector: 	#testDesactiveSelfWrap


HandleSelfWrappingTest>>testDesactiveSelfWrap
	Receiver: HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Arguments and temporary variables: 
		t1: 	an A
		t2: 	an A
	Receiver's instance variables: 
		testSelector: 	#testDesactiveSelfWrap


HandleSelfWrappingTest(TestCase)>>performTest
	Receiver: HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDesactiveSelfWrap


[] in HandleSelfWrappingTest(TestCase)>>runCase
	Receiver: HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDesactiveSelfWrap


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	HandleSelfWrappingTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


HandleSelfWrappingTest(TestCase)>>runCase
	Receiver: HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDesactiveSelfWrap


[] in HandleSelfWrappingTest(TestCase)>>debug
	Receiver: HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDesactiveSelfWrap


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		t1: 	[self resources
		do: [:each | each reset]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	HandleSelfWrappingTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


HandleSelfWrappingTest(TestCase)>>debug
	Receiver: HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDesactiveSelfWrap


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		t1: 	2 run, 1 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpected pa...etc...
		t2: 	'2 run, 1 passed, 1 failures, 0 errors'
		t3: 	HandleSelfWrappingTest>>#testDesactiveSelfWrap
	Receiver's instance variables: 
		target: 	OBClassNode<HandleSelfWrappingTest>
		requestor: 	an OBColumn(HandleSelfWrappingTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		t1: 	#execute
		t2: 	an OBPluggableListMorph(544997376)
	Receiver's instance variables: 
		target: 	OBClassNode<HandleSelfWrappingTest>
		requestor: 	an OBColumn(HandleSelfWrappingTest)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(467664896)'run tests (t)'
	Arguments and temporary variables: 
		t1: 	[1727@537 mouseUp 392164 nil]
		t3: 	2
	Receiver's instance variables: 
		bounds: 	1688@535 corner: 1883@549
		owner: 	a MenuMorph(914096128)
		submorphs: 	#()
		fullBounds: 	1688@535 corner: 1883@549
		color: 	Color black
		extension: 	a MorphExtension (110362624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	[oldcursor show]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(467664896)'run tests (t)'
	Arguments and temporary variables: 
		t1: 	[1727@537 mouseUp 392164 nil]
		t2: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	1688@535 corner: 1883@549
		owner: 	a MenuMorph(914096128)
		submorphs: 	#()
		fullBounds: 	1688@535 corner: 1883@549
		color: 	Color black
		extension: 	a MorphExtension (110362624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(467664896)'run tests (t)'
	Arguments and temporary variables: 
		evt: 	[1727@537 mouseUp 392164 nil]
	Receiver's instance variables: 
		bounds: 	1688@535 corner: 1883@549
		owner: 	a MenuMorph(914096128)
		submorphs: 	#()
		fullBounds: 	1688@535 corner: 1883@549
		color: 	Color black
		extension: 	a MorphExtension (110362624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(467664896)'run tests (t)'
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
	Receiver's instance variables: 
		bounds: 	1688@535 corner: 1883@549
		owner: 	a MenuMorph(914096128)
		submorphs: 	#()
		fullBounds: 	1688@535 corner: 1883@549
		color: 	Color black
		extension: 	a MorphExtension (110362624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [1727@537 mouseUp 392164 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(467664896)'run tests (t)'
	Receiver's instance variables: 
		timeStamp: 	392164
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1727@537
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(467664896)'run tests (t)'
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
	Receiver's instance variables: 
		bounds: 	1688@535 corner: 1883@549
		owner: 	a MenuMorph(914096128)
		submorphs: 	#()
		fullBounds: 	1688@535 corner: 1883@549
		color: 	Color black
		extension: 	a MorphExtension (110362624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
		aMorph: 	a ToggleMenuItemMorph(467664896)'run tests (t)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1727@537 mouseUp 392164 nil]
		t2: 	a ToggleMenuItemMorph(467664896)'run tests (t)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(467664896)'run tests (t)'
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1688@535 corner: 1883@549
		owner: 	a MenuMorph(914096128)
		submorphs: 	#()
		fullBounds: 	1688@535 corner: 1883@549
		color: 	Color black
		extension: 	a MorphExtension (110362624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'run tests (t)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
		aMorph: 	a MenuMorph(914096128)
		localEvt: 	[1727@537 mouseUp 392164 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(467664896)'run tests (t)'
		morphs: 	an Array(a ToggleMenuItemMorph(578289664)'file out (o)' a ToggleMenuIte...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1727@537 mouseUp 392164 nil]
		t2: 	a MenuMorph(914096128)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(914096128)
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1684@353 corner: 1887@646
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(578289664)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1684@353 corner: 1888@647
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (950009856) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(HandleSelfWrappingTest)
		selectedItem: 	a ToggleMenuItemMorph(467664896)'run tests (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(914096128)
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
	Receiver's instance variables: 
		bounds: 	1684@353 corner: 1887@646
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(578289664)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1684@353 corner: 1888@647
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (950009856) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(HandleSelfWrappingTest)
		selectedItem: 	a ToggleMenuItemMorph(467664896)'run tests (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(914096128)
	Arguments and temporary variables: 
		evt: 	[1727@537 mouseUp 392164 nil]
	Receiver's instance variables: 
		bounds: 	1684@353 corner: 1887@646
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(578289664)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1684@353 corner: 1888@647
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (950009856) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(HandleSelfWrappingTest)
		selectedItem: 	a ToggleMenuItemMorph(467664896)'run tests (t)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
		focusHolder: 	a MenuMorph(914096128)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1727@537 corner: 1743@553
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1727@537 corner: 1743@553
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(700710912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1727@537 mouseUp 392164 nil]
		targetOffset: 	39@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 392164 1727 537 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(256376832) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[1727@537 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(256376832) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
		focusHolder: 	a MenuMorph(914096128)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1727@537 corner: 1743@553
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1727@537 corner: 1743@553
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(700710912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1727@537 mouseUp 392164 nil]
		targetOffset: 	39@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 392164 1727 537 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
		focusHolder: 	a MenuMorph(914096128)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1727@537 corner: 1743@553
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1727@537 corner: 1743@553
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(700710912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1727@537 mouseUp 392164 nil]
		targetOffset: 	39@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 392164 1727 537 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1727@537 mouseUp 392164 nil]
	Receiver's instance variables: 
		bounds: 	1727@537 corner: 1743@553
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1727@537 corner: 1743@553
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(700710912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1727@537 mouseUp 392164 nil]
		targetOffset: 	39@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 392164 1727 537 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1727@537 mouseUp 392164 nil]
		t2: 	[1727@537 mouseUp 392164 nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	1727@537 corner: 1743@553
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1727@537 corner: 1743@553
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(700710912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1727@537 mouseUp 392164 nil]
		targetOffset: 	39@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 392164 1727 537 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1727@537 mouseUp 392164 nil]
		t2: 	#(1 392164 1727 537 0 0 0 1)
		t3: 	1
		t4: 	false
	Receiver's instance variables: 
		bounds: 	1727@537 corner: 1743@553
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1727@537 corner: 1743@553
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(700710912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1727@537 mouseUp 392164 nil]
		targetOffset: 	39@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 392164 1727 537 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(256376832))(a PreDebu...etc...
		lastStepTime: 	392159
		lastStepMessage: 	nil
		lastCycleTime: 	392202
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	392159
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
HandleSelfWrappingTest(TestCase)>>signalFailure:
HandleSelfWrappingTest(TestCase)>>assert:
HandleSelfWrappingTest(TestCase)>>should:raise:
HandleSelfWrappingTest>>testDesactiveSelfWrap
HandleSelfWrappingTest(TestCase)>>performTest
[] in HandleSelfWrappingTest(TestCase)>>runCase
BlockClosure>>ensure:
HandleSelfWrappingTest(TestCase)>>runCase
[] in HandleSelfWrappingTest(TestCase)>>debug
BlockClosure>>ensure:
HandleSelfWrappingTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:35:12 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[306@42 mouseUp 1819230 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[306@42 mouseUp 1819230 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[306@42 mouseUp 1819230 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[306@42 mouseUp 1819230 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [306@42 mouseUp 1819230 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	1819230
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	306@42
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[306@42 mouseUp 1819230 nil]
	Receiver's instance variables: 
		bounds: 	296@30 corner: 360@56
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	296@30 corner: 360@56
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:35:49 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	[] in ProgressInitiationException>>defaultMorphicAction
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopy>>changesRelativeToRepository:
	Receiver: a MCWorkingCopy(Handles)
	Arguments and temporary variables: 
		aRepository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/packag...etc...
		ancestorVersion: 	nil
		ancestorSnapshot: 	a MCSnapshot
	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		modified: 	true
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


[] in MCWorkingCopyBrowser>>viewChanges
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil


--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>changesRelativeToRepository:
[] in MCWorkingCopyBrowser>>viewChanges
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
MCWorkingCopyBrowser>>viewChanges
MCWorkingCopyBrowser(MCTool)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:36:30 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	nil
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[478@359 mouseUp 1898212 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[478@359 mouseUp 1898212 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[478@359 mouseUp 1898212 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[478@359 mouseUp 1898212 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [478@359 mouseUp 1898212 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	1898212
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	478@359
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[478@359 mouseUp 1898212 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid source pointer
30 November 2010 4:37:42 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

OBMethodVersion(Object)>>error:
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 
		aString: 	'Invalid source pointer'
	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Deskto...etc...
		pointer: 	47063922
		classRef: 	nil
		category: 	nil
		stamp: 	nil
		prior: 	nil
		selector: 	nil


OBMethodVersion>>parseSource
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13509490
		t3: 	''
	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Deskto...etc...
		pointer: 	47063922
		classRef: 	nil
		category: 	nil
		stamp: 	nil
		prior: 	nil
		selector: 	nil


OBMethodVersion>>setSources:pointer:
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 
		t1: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t2: 	47063922
	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Deskto...etc...
		pointer: 	47063922
		classRef: 	nil
		category: 	nil
		stamp: 	nil
		prior: 	nil
		selector: 	nil


OBMethodVersion class>>fromSources:andPointer:
	Receiver: OBMethodVersion
	Arguments and temporary variables: 
		t1: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t2: 	47063922
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->(OBMethodVersion>>#= "a CompiledMethod(26869...etc...
		format: 	144
		instanceVariables: 	#('sources' 'pointer' 'classRef' 'category' 'stamp' 'prior' ...etc...
		organization: 	('accessing' category classSymbol latest pointer selector source ...etc...
		subclasses: 	nil
		name: 	#OBMethodVersion
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Standard-Utilities'
		traitComposition: 	{}
		localSelectors: 	nil


OBMethodVersion class>>scan:from:
	Receiver: OBMethodVersion
	Arguments and temporary variables: 
		t1: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t2: 	47063922
		t3: 	an OrderedCollection()
		t4: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->(OBMethodVersion>>#= "a CompiledMethod(26869...etc...
		format: 	144
		instanceVariables: 	#('sources' 'pointer' 'classRef' 'category' 'stamp' 'prior' ...etc...
		organization: 	('accessing' category classSymbol latest pointer selector source ...etc...
		subclasses: 	nil
		name: 	#OBMethodVersion
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Standard-Utilities'
		traitComposition: 	{}
		localSelectors: 	nil


OBMethodNode>>versions
	Receiver: OBMethodNode<SmalltalkImage#recreateSpecialObjectsArray>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Method

		theClass: 	SmalltalkImage
		selector: 	#recreateSpecialObjectsArray


OBVersionBrowser class>>openOn:
	Receiver: OBVersionBrowser
	Arguments and temporary variables: 
		t1: 	OBMethodNode<SmalltalkImage#recreateSpecialObjectsArray>
	Receiver's instance variables: 
		superclass: 	OBCodeBrowser
		methodDict: 	a MethodDictionary(#defaultBackgroundColor->(OBVersionBrowser>>#def...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('accessing' defaultLabel)
('morphic' defaultBackgroundColor)

		subclasses: 	nil
		name: 	#OBVersionBrowser
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Standard-Browsers'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdBrowseMethodVersions>>execute
	Receiver: an OBCmdBrowseMethodVersions
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMethodNode<SmalltalkImage#recreateSpecialObjectsArray>
		requestor: 	an OBFixedButtonPanel


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(141557760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	705@266 corner: 786@290
		owner: 	an OBButtonBar(902561792)
		submorphs: 	an Array(an AlignmentMorph(1044381696))
		fullBounds: 	705@266 corner: 786@290
		color: 	Color transparent
		extension: 	a MorphExtension (712507392) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(141557760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	705@266 corner: 786@290
		owner: 	an OBButtonBar(902561792)
		submorphs: 	an Array(an AlignmentMorph(1044381696))
		fullBounds: 	705@266 corner: 786@290
		color: 	Color transparent
		extension: 	a MorphExtension (712507392) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(141557760)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(141557760)
		m: 	[772@277 mouseUp 1970234 nil]
	Receiver's instance variables: 
		bounds: 	705@266 corner: 786@290
		owner: 	an OBButtonBar(902561792)
		submorphs: 	an Array(an AlignmentMorph(1044381696))
		fullBounds: 	705@266 corner: 786@290
		color: 	Color transparent
		extension: 	a MorphExtension (712507392) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(673710080) a PluggableButtonMorphPlus(513802240) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	7
		indexLimiT: 	8
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(673710080) a PluggableButtonMorphPlus(513802240) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(141557760)
	Arguments and temporary variables: 
		evt: 	[772@277 mouseUp 1970234 nil]
		all: 	an Array(a PluggableButtonMorphPlus(673710080) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	705@266 corner: 786@290
		owner: 	an OBButtonBar(902561792)
		submorphs: 	an Array(an AlignmentMorph(1044381696))
		fullBounds: 	705@266 corner: 786@290
		color: 	Color transparent
		extension: 	a MorphExtension (712507392) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(141557760)
	Arguments and temporary variables: 
		evt: 	[772@277 mouseUp 1970234 nil]
	Receiver's instance variables: 
		bounds: 	705@266 corner: 786@290
		owner: 	an OBButtonBar(902561792)
		submorphs: 	an Array(an AlignmentMorph(1044381696))
		fullBounds: 	705@266 corner: 786@290
		color: 	Color transparent
		extension: 	a MorphExtension (712507392) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(141557760)
	Arguments and temporary variables: 
		anEvent: 	[772@277 mouseUp 1970234 nil]
	Receiver's instance variables: 
		bounds: 	705@266 corner: 786@290
		owner: 	an OBButtonBar(902561792)
		submorphs: 	an Array(an AlignmentMorph(1044381696))
		fullBounds: 	705@266 corner: 786@290
		color: 	Color transparent
		extension: 	a MorphExtension (712507392) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [772@277 mouseUp 1970234 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(141557760)
	Receiver's instance variables: 
		timeStamp: 	1970234
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	772@277
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(141557760)
	Arguments and temporary variables: 
		anEvent: 	[772@277 mouseUp 1970234 nil]
	Receiver's instance variables: 
		bounds: 	705@266 corner: 786@290
		owner: 	an OBButtonBar(902561792)
		submorphs: 	an Array(an AlignmentMorph(1044381696))
		fullBounds: 	705@266 corner: 786@290
		color: 	Color transparent
		extension: 	a MorphExtension (712507392) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorphPlus(141557760)
	Arguments and temporary variables: 
		anEvent: 	[772@277 mouseUp 1970234 nil]
	Receiver's instance variables: 
		bounds: 	705@266 corner: 786@290
		owner: 	an OBButtonBar(902561792)
		submorphs: 	an Array(an AlignmentMorph(1044381696))
		fullBounds: 	705@266 corner: 786@290
		color: 	Color transparent
		extension: 	a MorphExtension (712507392) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[772@277 mouseUp 1970234 nil]
		focusHolder: 	a PluggableButtonMorphPlus(141557760)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	772@277 corner: 788@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	772@277 corner: 788@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271843328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[772@277 mouseUp 1970234 nil]
		targetOffset: 	67@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970234 772 277 0 0 0 1)
		lastKeyScanCode: 	15
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(546832384) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[772@277 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(546832384) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[772@277 mouseUp 1970234 nil]
		focusHolder: 	a PluggableButtonMorphPlus(141557760)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	772@277 corner: 788@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	772@277 corner: 788@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271843328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[772@277 mouseUp 1970234 nil]
		targetOffset: 	67@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970234 772 277 0 0 0 1)
		lastKeyScanCode: 	15
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[772@277 mouseUp 1970234 nil]
		focusHolder: 	a PluggableButtonMorphPlus(141557760)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	772@277 corner: 788@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	772@277 corner: 788@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271843328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[772@277 mouseUp 1970234 nil]
		targetOffset: 	67@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970234 772 277 0 0 0 1)
		lastKeyScanCode: 	15
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[772@277 mouseUp 1970234 nil]
	Receiver's instance variables: 
		bounds: 	772@277 corner: 788@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	772@277 corner: 788@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271843328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[772@277 mouseUp 1970234 nil]
		targetOffset: 	67@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970234 772 277 0 0 0 1)
		lastKeyScanCode: 	15
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[772@277 mouseUp 1970234 nil]
		t2: 	[772@277 mouseUp 1970234 nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	772@277 corner: 788@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	772@277 corner: 788@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271843328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[772@277 mouseUp 1970234 nil]
		targetOffset: 	67@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970234 772 277 0 0 0 1)
		lastKeyScanCode: 	15
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[772@277 mouseUp 1970234 nil]
		t2: 	#(1 1970234 772 277 0 0 0 1)
		t3: 	1
		t4: 	false
	Receiver's instance variables: 
		bounds: 	772@277 corner: 788@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	772@277 corner: 788@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271843328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[772@277 mouseUp 1970234 nil]
		targetOffset: 	67@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970234 772 277 0 0 0 1)
		lastKeyScanCode: 	15
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(825753600))(a SystemWin...etc...
		lastStepTime: 	1970220
		lastStepMessage: 	nil
		lastCycleTime: 	1970260
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1970220
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(825753600))(a SystemWin...etc...
		lastStepTime: 	1970220
		lastStepMessage: 	nil
		lastCycleTime: 	1970260
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1970220
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(825753600))(a SystemWin...etc...
		lastStepTime: 	1970220
		lastStepMessage: 	nil
		lastCycleTime: 	1970260
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1970220
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(825753600))(a SystemWin...etc...
		lastStepTime: 	1970220
		lastStepMessage: 	nil
		lastCycleTime: 	1970260
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1970220
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(546832384) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(6236405...etc...
		format: 	168
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'previous...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
OBMethodVersion(Object)>>error:
OBMethodVersion>>parseSource
OBMethodVersion>>setSources:pointer:
OBMethodVersion class>>fromSources:andPointer:
OBMethodVersion class>>scan:from:
OBMethodNode>>versions
OBVersionBrowser class>>openOn:
OBCmdBrowseMethodVersions>>execute
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:53:07 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	nil
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[489@358 mouseUp 2895093 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[489@358 mouseUp 2895093 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[489@358 mouseUp 2895093 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[489@358 mouseUp 2895093 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [489@358 mouseUp 2895093 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	2895093
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	489@358
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[489@358 mouseUp 2895093 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:54:12 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MetaWatcher>>#unWatch "a CompiledMethod(802947072)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22845482
		t3: 	a WriteStream ' '
		t5: 	22845482
		t4: 	nil
	Receiver's instance variables: 
(MetaWatcher>>#unWatch "a CompiledMethod(802947072)")

CompiledMethod>>timeStamp
	Receiver: (MetaWatcher>>#unWatch "a CompiledMethod(802947072)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MetaWatcher>>#unWatch "a CompiledMethod(802947072)")

MethodReference>>timeStamp
	Receiver: a MethodReference MetaWatcher >> #unWatch
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#unWatch
		stringVersion: 	'MetaWatcher unWatch'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MetaWatcher >> #unWatch
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((SmalltalkIma...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MetaWatcher >> #unWatch
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#unWatch
		stringVersion: 	'MetaWatcher unWatch'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MetaWatcher >> #unWatch
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[473@360 mouseUp 2959625 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[473@360 mouseUp 2959625 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[473@360 mouseUp 2959625 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[473@360 mouseUp 2959625 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [473@360 mouseUp 2959625 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	2959625
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	473@360
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[473@360 mouseUp 2959625 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:54:39 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MetaWatcher>>#unWatch "a CompiledMethod(122421248)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22845482
		t3: 	a WriteStream ' '
		t5: 	22845482
		t4: 	nil
	Receiver's instance variables: 
(MetaWatcher>>#unWatch "a CompiledMethod(122421248)")

CompiledMethod>>timeStamp
	Receiver: (MetaWatcher>>#unWatch "a CompiledMethod(122421248)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MetaWatcher>>#unWatch "a CompiledMethod(122421248)")

MethodReference>>timeStamp
	Receiver: a MethodReference MetaWatcher >> #unWatch
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#unWatch
		stringVersion: 	'MetaWatcher unWatch'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MetaWatcher >> #unWatch
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((SmalltalkIma...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MetaWatcher >> #unWatch
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#unWatch
		stringVersion: 	'MetaWatcher unWatch'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MetaWatcher >> #unWatch
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[443@353 mouseUp 2986865 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[443@353 mouseUp 2986865 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[443@353 mouseUp 2986865 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[443@353 mouseUp 2986865 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [443@353 mouseUp 2986865 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	2986865
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	443@353
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[443@353 mouseUp 2986865 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:55 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MetaWatcher>>#unWatch "a CompiledMethod(1026818048)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22845482
		t3: 	a WriteStream ' '
		t5: 	22845482
		t4: 	nil
	Receiver's instance variables: 
(MetaWatcher>>#unWatch "a CompiledMethod(1026818048)")

CompiledMethod>>timeStamp
	Receiver: (MetaWatcher>>#unWatch "a CompiledMethod(1026818048)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MetaWatcher>>#unWatch "a CompiledMethod(1026818048)")

MethodReference>>timeStamp
	Receiver: a MethodReference MetaWatcher >> #unWatch
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#unWatch
		stringVersion: 	'MetaWatcher unWatch'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MetaWatcher >> #unWatch
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((SmalltalkIma...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MetaWatcher >> #unWatch
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#unWatch
		stringVersion: 	'MetaWatcher unWatch'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MetaWatcher >> #unWatch
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[455@353 mouseUp 3007951 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[455@353 mouseUp 3007951 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[455@353 mouseUp 3007951 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[455@353 mouseUp 3007951 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [455@353 mouseUp 3007951 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3007951
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	455@353
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[455@353 mouseUp 3007951 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MetaWatcher class>>MetaWatcher
30 November 2010 4:55:15 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

MetaWatcher class(Object)>>doesNotUnderstand: #MetaWatcher
	Receiver: MetaWatcher
	Arguments and temporary variables: 
		aMessage: 	MetaWatcher
		exception: 	MessageNotUnderstood: MetaWatcher class>>MetaWatcher
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	MetaHandle
		methodDict: 	a MethodDictionary(#isMeta->(MetaWatcher>>#isMeta "a CompiledMethod...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified' isMeta unWatch)

		subclasses: 	nil
		name: 	#MetaWatcher
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Watcher'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '
MetaWatcher compileAll
MetaWatcher class compileAl...etc...
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 72 and character Character cr and recta...etc...
		stopBlock: 	a CharacterBlock with index 124 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(123 to: 123)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(95 to: 94)
		pivotBlock: 	a CharacterBlock with index 95 and character Character cr and recta...etc...
		inBackTo: 	false


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 3023719)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each c...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphForShoutEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | eac...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 3023719)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each c...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 3023719)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each c...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 3023719)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each c...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(1038352384)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	a TextMorphForShoutEditor
		stringHolder: 	a SHWorkspace
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(1038352384)
		evt: 	[keystroke '<Cmd-p>']
		toolSet: 	ECToolSet
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForShout(1038352384)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 3023719)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each c...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableShoutMorph(193724416)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 3023719)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each c...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 3023719)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each c...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForShout(1038352384)
	Receiver's instance variables: 
		timeStamp: 	3023205
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	177@37
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 3023719)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each c...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 3023719)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each c...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForShout(1038352384)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1020@177 corner: 1036@193
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1020@177 corner: 1036@193
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(91750400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1020@177 1020@177 mouseMove CMD 3022703 nil]
		targetOffset: 	168@35
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3022703 1020 177 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(882638848) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(882638848) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1020@177 corner: 1036@193
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1020@177 corner: 1036@193
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(91750400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1020@177 1020@177 mouseMove CMD 3022703 nil]
		targetOffset: 	168@35
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3022703 1020 177 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1020@177 corner: 1036@193
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1020@177 corner: 1036@193
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(91750400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1020@177 1020@177 mouseMove CMD 3022703 nil]
		targetOffset: 	168@35
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3022703 1020 177 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	1020@177 corner: 1036@193
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1020@177 corner: 1036@193
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(91750400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1020@177 1020@177 mouseMove CMD 3022703 nil]
		targetOffset: 	168@35
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3022703 1020 177 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	[keystroke '<Cmd-p>']
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	1020@177 corner: 1036@193
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1020@177 corner: 1036@193
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(91750400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1020@177 1020@177 mouseMove CMD 3022703 nil]
		targetOffset: 	168@35
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3022703 1020 177 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	#(2 3023205 112 0 8 112 0 1)
		t3: 	2
		t4: 	true
	Receiver's instance variables: 
		bounds: 	1020@177 corner: 1036@193
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1020@177 corner: 1036@193
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(91750400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1020@177 1020@177 mouseMove CMD 3022703 nil]
		targetOffset: 	168@35
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3022703 1020 177 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(673447936))(a PreDebu...etc...
		lastStepTime: 	3023199
		lastStepMessage: 	nil
		lastCycleTime: 	3023239
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	3023199
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(673447936))(a PreDebu...etc...
		lastStepTime: 	3023199
		lastStepMessage: 	nil
		lastCycleTime: 	3023239
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	3023199
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
MetaWatcher class(Object)>>doesNotUnderstand: #MetaWatcher
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:55:26 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MetaWatcher>>#unWatch "a CompiledMethod(314310656)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22845482
		t3: 	a WriteStream ' '
		t5: 	22845482
		t4: 	nil
	Receiver's instance variables: 
(MetaWatcher>>#unWatch "a CompiledMethod(314310656)")

CompiledMethod>>timeStamp
	Receiver: (MetaWatcher>>#unWatch "a CompiledMethod(314310656)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MetaWatcher>>#unWatch "a CompiledMethod(314310656)")

MethodReference>>timeStamp
	Receiver: a MethodReference MetaWatcher >> #unWatch
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#unWatch
		stringVersion: 	'MetaWatcher unWatch'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MetaWatcher >> #unWatch
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((SmalltalkIma...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MetaWatcher >> #unWatch
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#unWatch
		stringVersion: 	'MetaWatcher unWatch'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MetaWatcher >> #unWatch
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[448@345 mouseUp 3033896 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[448@345 mouseUp 3033896 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[448@345 mouseUp 3033896 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[448@345 mouseUp 3033896 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [448@345 mouseUp 3033896 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3033896
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	448@345
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[448@345 mouseUp 3033896 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:55:54 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MetaWatcher>>#isMeta "a CompiledMethod(486801408)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22838073
		t3: 	a WriteStream ' '
		t5: 	22838073
		t4: 	nil
	Receiver's instance variables: 
(MetaWatcher>>#isMeta "a CompiledMethod(486801408)")

CompiledMethod>>timeStamp
	Receiver: (MetaWatcher>>#isMeta "a CompiledMethod(486801408)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MetaWatcher>>#isMeta "a CompiledMethod(486801408)")

MethodReference>>timeStamp
	Receiver: a MethodReference MetaWatcher >> #isMeta
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#isMeta
		stringVersion: 	'MetaWatcher isMeta'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MetaWatcher >> #isMeta
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((MetaWatcher>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MetaWatcher >> #isMeta
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#isMeta
		stringVersion: 	'MetaWatcher isMeta'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MetaWatcher >> #isMeta
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[449@341 mouseUp 3061473 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[449@341 mouseUp 3061473 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[449@341 mouseUp 3061473 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[449@341 mouseUp 3061473 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [449@341 mouseUp 3061473 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3061473
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	449@341
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[449@341 mouseUp 3061473 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:55:55 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MetaWatcher>>#isMeta "a CompiledMethod(486801408)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22838073
		t3: 	a WriteStream ' '
		t5: 	22838073
		t4: 	nil
	Receiver's instance variables: 
(MetaWatcher>>#isMeta "a CompiledMethod(486801408)")

CompiledMethod>>timeStamp
	Receiver: (MetaWatcher>>#isMeta "a CompiledMethod(486801408)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MetaWatcher>>#isMeta "a CompiledMethod(486801408)")

MethodReference>>timeStamp
	Receiver: a MethodReference MetaWatcher >> #isMeta
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#isMeta
		stringVersion: 	'MetaWatcher isMeta'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MetaWatcher >> #isMeta
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((MetaWatcher>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MetaWatcher >> #isMeta
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaWatcher
		classIsMeta: 	false
		methodSymbol: 	#isMeta
		stringVersion: 	'MetaWatcher isMeta'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MetaWatcher >> #isMeta
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[448@344 mouseUp 3061935 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[448@344 mouseUp 3061935 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[448@344 mouseUp 3061935 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[448@344 mouseUp 3061935 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [448@344 mouseUp 3061935 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3061935
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	448@344
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[448@344 mouseUp 3061935 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:56:21 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MyBeeper>>#play "a CompiledMethod(218628096)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22936404
		t3: 	a WriteStream ' '
		t5: 	22936404
		t4: 	nil
	Receiver's instance variables: 
(MyBeeper>>#play "a CompiledMethod(218628096)")

CompiledMethod>>timeStamp
	Receiver: (MyBeeper>>#play "a CompiledMethod(218628096)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MyBeeper>>#play "a CompiledMethod(218628096)")

MethodReference>>timeStamp
	Receiver: a MethodReference MyBeeper >> #play
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MyBeeper
		classIsMeta: 	false
		methodSymbol: 	#play
		stringVersion: 	'MyBeeper play'
		category: 	#'play interface'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MyBeeper >> #play
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((MetaWatcher>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MyBeeper >> #play
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MyBeeper
		classIsMeta: 	false
		methodSymbol: 	#play
		stringVersion: 	'MyBeeper play'
		category: 	#'play interface'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MyBeeper >> #play
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[467@356 mouseUp 3089013 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[467@356 mouseUp 3089013 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[467@356 mouseUp 3089013 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[467@356 mouseUp 3089013 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [467@356 mouseUp 3089013 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3089013
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	467@356
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[467@356 mouseUp 3089013 nil]
	Receiver's instance variables: 
		bounds: 	433@341 corner: 497@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	433@341 corner: 497@367
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:57:17 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (ClassHandle>>#initializeHandleWith:to: "a CompiledMethod(691011584)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20567223
		t3: 	a WriteStream ' '
		t5: 	20567223
		t4: 	nil
	Receiver's instance variables: 
(ClassHandle>>#initializeHandleWith:to: "a CompiledMethod(691011584)")

CompiledMethod>>timeStamp
	Receiver: (ClassHandle>>#initializeHandleWith:to: "a CompiledMethod(691011584)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(ClassHandle>>#initializeHandleWith:to: "a CompiledMethod(691011584)")

MethodReference>>timeStamp
	Receiver: a MethodReference ClassHandle >> #initializeHandleWith:to:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#ClassHandle
		classIsMeta: 	false
		methodSymbol: 	#initializeHandleWith:to:
		stringVersion: 	'ClassHandle initializeHandleWith:to:'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference ClassHandle >> #initializeHandleWith:to:
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((MetaWatcher>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference ClassHandle >> #initializeHandleWith:to:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#ClassHandle
		classIsMeta: 	false
		methodSymbol: 	#initializeHandleWith:to:
		stringVersion: 	'ClassHandle initializeHandleWith:to:'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference ClassHandle >> #initializeHandleWith:to:
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[936@434 mouseUp 3144657 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[936@434 mouseUp 3144657 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[936@434 mouseUp 3144657 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[936@434 mouseUp 3144657 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [936@434 mouseUp 3144657 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3144657
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	936@434
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[936@434 mouseUp 3144657 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:57:52 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (PropagationTest>>#setUp "a CompiledMethod(1032060928)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	14365042
		t3: 	a WriteStream ' '
		t5: 	14365042
		t4: 	nil
	Receiver's instance variables: 
(PropagationTest>>#setUp "a CompiledMethod(1032060928)")

CompiledMethod>>timeStamp
	Receiver: (PropagationTest>>#setUp "a CompiledMethod(1032060928)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(PropagationTest>>#setUp "a CompiledMethod(1032060928)")

MethodReference>>timeStamp
	Receiver: a MethodReference PropagationTest >> #setUp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#PropagationTest
		classIsMeta: 	false
		methodSymbol: 	#setUp
		stringVersion: 	'PropagationTest setUp'
		category: 	#private
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference PropagationTest >> #setUp
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference PropagationTest >> #setUp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#PropagationTest
		classIsMeta: 	false
		methodSymbol: 	#setUp
		stringVersion: 	'PropagationTest setUp'
		category: 	#private
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference PropagationTest >> #setUp
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[930@435 mouseUp 3179343 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[930@435 mouseUp 3179343 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[930@435 mouseUp 3179343 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[930@435 mouseUp 3179343 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [930@435 mouseUp 3179343 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3179343
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	930@435
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[930@435 mouseUp 3179343 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:59:14 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (PropagationTest>>#setUp "a CompiledMethod(738721792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	14365042
		t3: 	a WriteStream ' '
		t5: 	14365042
		t4: 	nil
	Receiver's instance variables: 
(PropagationTest>>#setUp "a CompiledMethod(738721792)")

CompiledMethod>>timeStamp
	Receiver: (PropagationTest>>#setUp "a CompiledMethod(738721792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(PropagationTest>>#setUp "a CompiledMethod(738721792)")

MethodReference>>timeStamp
	Receiver: a MethodReference PropagationTest >> #setUp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#PropagationTest
		classIsMeta: 	false
		methodSymbol: 	#setUp
		stringVersion: 	'PropagationTest setUp'
		category: 	#private
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference PropagationTest >> #setUp
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference PropagationTest >> #setUp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#PropagationTest
		classIsMeta: 	false
		methodSymbol: 	#setUp
		stringVersion: 	'PropagationTest setUp'
		category: 	#private
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference PropagationTest >> #setUp
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[935@439 mouseUp 3261532 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[935@439 mouseUp 3261532 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[935@439 mouseUp 3261532 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[935@439 mouseUp 3261532 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [935@439 mouseUp 3261532 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3261532
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	935@439
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[935@439 mouseUp 3261532 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 4:59:41 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle class>>#createHandle "a CompiledMethod(379322368)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13984760
		t3: 	a WriteStream ' '
		t5: 	13984760
		t4: 	nil
	Receiver's instance variables: 
(Handle class>>#createHandle "a CompiledMethod(379322368)")

CompiledMethod>>timeStamp
	Receiver: (Handle class>>#createHandle "a CompiledMethod(379322368)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle class>>#createHandle "a CompiledMethod(379322368)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle class >> #createHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	true
		methodSymbol: 	#createHandle
		stringVersion: 	'Handle class createHandle'
		category: 	#'instance creation'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle class >> #createHandle
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle class >> #createHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	true
		methodSymbol: 	#createHandle
		stringVersion: 	'Handle class createHandle'
		category: 	#'instance creation'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle class >> #createHandle
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[922@433 mouseUp 3288770 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[922@433 mouseUp 3288770 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[922@433 mouseUp 3288770 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[922@433 mouseUp 3288770 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [922@433 mouseUp 3288770 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3288770
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	922@433
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[922@433 mouseUp 3288770 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:00:02 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MirrorTest>>#testOverload "a CompiledMethod(341311488)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20499505
		t3: 	a WriteStream ' '
		t5: 	20499505
		t4: 	nil
	Receiver's instance variables: 
(MirrorTest>>#testOverload "a CompiledMethod(341311488)")

CompiledMethod>>timeStamp
	Receiver: (MirrorTest>>#testOverload "a CompiledMethod(341311488)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MirrorTest>>#testOverload "a CompiledMethod(341311488)")

MethodReference>>timeStamp
	Receiver: a MethodReference MirrorTest >> #testOverload
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorTest
		classIsMeta: 	false
		methodSymbol: 	#testOverload
		stringVersion: 	'MirrorTest testOverload'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MirrorTest >> #testOverload
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MirrorTest >> #testOverload
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorTest
		classIsMeta: 	false
		methodSymbol: 	#testOverload
		stringVersion: 	'MirrorTest testOverload'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MirrorTest >> #testOverload
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[955@429 mouseUp 3309773 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[955@429 mouseUp 3309773 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[955@429 mouseUp 3309773 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[955@429 mouseUp 3309773 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [955@429 mouseUp 3309773 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3309773
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	955@429
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[955@429 mouseUp 3309773 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:00:29 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MirrorTest>>#testMirrorOverSuperSend "a CompiledMethod(790626304)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20498108
		t3: 	a WriteStream ' '
		t5: 	20498108
		t4: 	nil
	Receiver's instance variables: 
(MirrorTest>>#testMirrorOverSuperSend "a CompiledMethod(790626304)")

CompiledMethod>>timeStamp
	Receiver: (MirrorTest>>#testMirrorOverSuperSend "a CompiledMethod(790626304)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MirrorTest>>#testMirrorOverSuperSend "a CompiledMethod(790626304)")

MethodReference>>timeStamp
	Receiver: a MethodReference MirrorTest >> #testMirrorOverSuperSend
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorTest
		classIsMeta: 	false
		methodSymbol: 	#testMirrorOverSuperSend
		stringVersion: 	'MirrorTest testMirrorOverSuperSend'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MirrorTest >> #testMirrorOverSuperSend
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MirrorTest >> #testMirrorOverSuperSend
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorTest
		classIsMeta: 	false
		methodSymbol: 	#testMirrorOverSuperSend
		stringVersion: 	'MirrorTest testMirrorOverSuperSend'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MirrorTest >> #testMirrorOverSuperSend
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[934@435 mouseUp 3336946 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[934@435 mouseUp 3336946 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[934@435 mouseUp 3336946 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[934@435 mouseUp 3336946 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [934@435 mouseUp 3336946 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3336946
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	934@435
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[934@435 mouseUp 3336946 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:01:19 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MirrorTest>>#testMirrorOverSuperSend "a CompiledMethod(790626304)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20498108
		t3: 	a WriteStream ' '
		t5: 	20498108
		t4: 	nil
	Receiver's instance variables: 
(MirrorTest>>#testMirrorOverSuperSend "a CompiledMethod(790626304)")

CompiledMethod>>timeStamp
	Receiver: (MirrorTest>>#testMirrorOverSuperSend "a CompiledMethod(790626304)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MirrorTest>>#testMirrorOverSuperSend "a CompiledMethod(790626304)")

MethodReference>>timeStamp
	Receiver: a MethodReference MirrorTest >> #testMirrorOverSuperSend
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorTest
		classIsMeta: 	false
		methodSymbol: 	#testMirrorOverSuperSend
		stringVersion: 	'MirrorTest testMirrorOverSuperSend'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MirrorTest >> #testMirrorOverSuperSend
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MirrorTest >> #testMirrorOverSuperSend
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorTest
		classIsMeta: 	false
		methodSymbol: 	#testMirrorOverSuperSend
		stringVersion: 	'MirrorTest testMirrorOverSuperSend'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MirrorTest >> #testMirrorOverSuperSend
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[910@440 mouseUp 3386586 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[910@440 mouseUp 3386586 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[910@440 mouseUp 3386586 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[910@440 mouseUp 3386586 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [910@440 mouseUp 3386586 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3386586
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	910@440
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[910@440 mouseUp 3386586 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:01:33 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (HandleOtherTest>>#testStoreIntoInstVarReference "a CompiledMethod(676855808)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20401377
		t3: 	a WriteStream ' '
		t5: 	20401377
		t4: 	nil
	Receiver's instance variables: 
(HandleOtherTest>>#testStoreIntoInstVarReference "a CompiledMethod(676855808)")

CompiledMethod>>timeStamp
	Receiver: (HandleOtherTest>>#testStoreIntoInstVarReference "a CompiledMethod(676855808)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(HandleOtherTest>>#testStoreIntoInstVarReference "a CompiledMethod(676855808)")

MethodReference>>timeStamp
	Receiver: a MethodReference HandleOtherTest >> #testStoreIntoInstVarReference
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#HandleOtherTest
		classIsMeta: 	false
		methodSymbol: 	#testStoreIntoInstVarReference
		stringVersion: 	'HandleOtherTest testStoreIntoInstVarReference'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference HandleOtherTest >> #testStoreIntoInstVarReference
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference HandleOtherTest >> #testStoreIntoInstVarReference
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#HandleOtherTest
		classIsMeta: 	false
		methodSymbol: 	#testStoreIntoInstVarReference
		stringVersion: 	'HandleOtherTest testStoreIntoInstVarReference'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference HandleOtherTest >> #testStoreIntoInstVarReference
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[931@425 mouseUp 3400654 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[931@425 mouseUp 3400654 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[931@425 mouseUp 3400654 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[931@425 mouseUp 3400654 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [931@425 mouseUp 3400654 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3400654
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	931@425
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[931@425 mouseUp 3400654 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:01:58 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (TransactionalManager class>>#for: "a CompiledMethod(260833280)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20519676
		t3: 	a WriteStream ' '
		t5: 	20519676
		t4: 	nil
	Receiver's instance variables: 
(TransactionalManager class>>#for: "a CompiledMethod(260833280)")

CompiledMethod>>timeStamp
	Receiver: (TransactionalManager class>>#for: "a CompiledMethod(260833280)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(TransactionalManager class>>#for: "a CompiledMethod(260833280)")

MethodReference>>timeStamp
	Receiver: a MethodReference TransactionalManager class >> #for:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#TransactionalManager
		classIsMeta: 	true
		methodSymbol: 	#for:
		stringVersion: 	'TransactionalManager class for:'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference TransactionalManager class >> #for:
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference TransactionalManager class >> #for:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#TransactionalManager
		classIsMeta: 	true
		methodSymbol: 	#for:
		stringVersion: 	'TransactionalManager class for:'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference TransactionalManager class >> #for:
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[958@437 mouseUp 3425371 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[958@437 mouseUp 3425371 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[958@437 mouseUp 3425371 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[958@437 mouseUp 3425371 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [958@437 mouseUp 3425371 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3425371
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	958@437
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[958@437 mouseUp 3425371 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:02:31 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MirrorHandleClassTest>>#readAccess "a CompiledMethod(340787200)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20482127
		t3: 	a WriteStream ' '
		t5: 	20482127
		t4: 	nil
	Receiver's instance variables: 
(MirrorHandleClassTest>>#readAccess "a CompiledMethod(340787200)")

CompiledMethod>>timeStamp
	Receiver: (MirrorHandleClassTest>>#readAccess "a CompiledMethod(340787200)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MirrorHandleClassTest>>#readAccess "a CompiledMethod(340787200)")

MethodReference>>timeStamp
	Receiver: a MethodReference MirrorHandleClassTest >> #readAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorHandleClassTest
		classIsMeta: 	false
		methodSymbol: 	#readAccess
		stringVersion: 	'MirrorHandleClassTest readAccess'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MirrorHandleClassTest >> #readAccess
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MirrorHandleClassTest >> #readAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorHandleClassTest
		classIsMeta: 	false
		methodSymbol: 	#readAccess
		stringVersion: 	'MirrorHandleClassTest readAccess'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MirrorHandleClassTest >> #readAccess
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[925@434 mouseUp 3458763 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[925@434 mouseUp 3458763 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[925@434 mouseUp 3458763 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[925@434 mouseUp 3458763 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [925@434 mouseUp 3458763 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3458763
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	925@434
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[925@434 mouseUp 3458763 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:04:32 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (AA>>#initialize "a CompiledMethod(858783744)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20267026
		t3: 	a WriteStream ' '
		t5: 	20267026
		t4: 	nil
	Receiver's instance variables: 
(AA>>#initialize "a CompiledMethod(858783744)")

CompiledMethod>>timeStamp
	Receiver: (AA>>#initialize "a CompiledMethod(858783744)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(AA>>#initialize "a CompiledMethod(858783744)")

MethodReference>>timeStamp
	Receiver: a MethodReference AA >> #initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#AA
		classIsMeta: 	false
		methodSymbol: 	#initialize
		stringVersion: 	'AA initialize'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference AA >> #initialize
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference AA >> #initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#AA
		classIsMeta: 	false
		methodSymbol: 	#initialize
		stringVersion: 	'AA initialize'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference AA >> #initialize
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[916@432 mouseUp 3579627 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[916@432 mouseUp 3579627 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[916@432 mouseUp 3579627 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[916@432 mouseUp 3579627 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [916@432 mouseUp 3579627 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3579627
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	916@432
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[916@432 mouseUp 3579627 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: subscript is out of bounds: 6
30 November 2010 5:04:45 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Array(Object)>>error:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		aString: 	'subscript is out of bounds: 6'
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		index: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>at:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
		index: 	6
		repOff: 	0
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		start: 	39
		stop: 	38
		replacementCollection: 	#(#toto1)
		newSequenceableCollection: 	#(#initialize #isA #isB #test2 #testReturn nil)
		newSize: 	6
		endReplacement: 	39
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto1
		heading: 	#accessing
		aBoolean: 	true
		catName: 	nil
		catIndex: 	2
		elemIndex: 	39
		realHeading: 	#accessing
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto1
		heading: 	#accessing
		aBoolean: 	true
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto1
		heading: 	#accessing
		aBoolean: 	true
		oldCat: 	nil
		newCat: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


ClassOrganizer(Categorizer)>>classify:under:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#accessing
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#toto1
		category: 	#accessing
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#toto1
		compiledMethod: 	(B>>#toto1 "a CompiledMethod(924057600)")
		category: 	#accessing
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		priorMethodOrNil: 	(B>>#toto1 "a CompiledMethod(113770496)")
		oldProtocol: 	nil
		newProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'toto1
	^ ''test'' '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:04'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		logSource: 	true
		methodAndNode: 	a CompiledMethodWithNode
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'toto1
	^ ''test'' '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:04'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test'' '
		t2: 	#accessing
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
		t4: 	'JB 11/30/2010 17:04'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
toto1
	^ 'test' ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto1
	^ ''test'' '
		selector: 	#toto1
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
toto1
	^ 'test' ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto1
	^ ''test'' '
		selector: 	#toto1
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
	Receiver: !B methodsFor: 'accessing!
toto1
	^ 'test' ! !
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto1
	^ ''test'' '
		selector: 	#toto1
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryChange)>>execute
	Receiver: !B methodsFor: 'accessing!
toto1
	^ 'test' ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto1
	^ ''test'' '
		selector: 	#toto1
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


[] in RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
toto1
	^ 'test' ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'execution!
execut...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'execution!
execut...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
toto1
	^ 'test' ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'execution!
execut...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


ORMethodDefinition>>compileNotifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	an OBPluggableTextMorphWithShout(1031798784)
		t2: 	!B methodsFor: 'accessing!
toto1
	^ 'test' ! !
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto1
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test'' '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto1
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test'' '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
		t3: 	nil
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto1
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

[] in [] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'toto1
	^ ''test'' '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in OBDefinitionPanel>>accept:notifying:
		startpc: 	51
		numArgs: 	0


[] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'toto1
	^ ''test'' '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test'' '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


[] in OBPluggableTextMorphWithShout>>acceptTextInModel
	Receiver: an OBPluggableTextMorphWithShout(1031798784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	18@1090 corner: 708@1293
		owner: 	an OBGroupingMorph(653524992)
		submorphs: 	an Array(a TransformMorph(398983168))
		fullBounds: 	18@1090 corner: 708@1293
		color: 	Color transparent
		extension: 	a MorphExtension (616562688)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(554172416)
		scroller: 	a TransformMorph(398983168)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(375914496)
		textMorph: 	an OBTextMorphWithShout(597164032)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(17 to: 16)
		hasEditingConflicts: 	false
		styler: 	a SHTextStylerST80
		unstyledAcceptText: 	a Text for 'toto1
	^ ''test'' '


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorphWithShout>>acceptTextInModel
		startpc: 	69
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
Array>>replaceFrom:to:with:startingAt:
Array(SequenceableCollection)>>copyReplaceFrom:to:with:
ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
[] in ClassOrganizer>>classify:under:suppressIfDefault:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
ClassOrganizer>>classify:under:suppressIfDefault:
ClassOrganizer(Categorizer)>>classify:under:
[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
B class(ClassDescription)>>compile:classified:withStamp:notifying:
B class(ClassDescription)>>compile:classified:notifying:
InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
InteractiveAddMethodChange>>primitiveExecute
InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
InteractiveAddMethodChange(RefactoryChange)>>execute
[] in RefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RefactoryChangeManager>>ignoreChangesWhile:
RefactoryChangeManager>>performChange:
ORMethodDefinition>>compileNotifying:
ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
[] in [] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[] in OBPluggableTextMorphWithShout>>acceptTextInModel
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBPluggableTextMorphWithShout>>acceptTextInModel
OBPluggableTextMorphWithShout(PluggableTextMorph)>>accept
OBTextMorphWithShout(TextMorphForEditView)>>acceptContents
OBTextMorphEditorWithShout(TextMorphEditor)>>accept
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: subscript is out of bounds: 6
30 November 2010 5:04:52 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Array(Object)>>error:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		aString: 	'subscript is out of bounds: 6'
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		index: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>at:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
		index: 	6
		repOff: 	0
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		start: 	39
		stop: 	38
		replacementCollection: 	#(#toto1)
		newSequenceableCollection: 	#(#initialize #isA #isB #test2 #testReturn nil)
		newSize: 	6
		endReplacement: 	39
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto1
		heading: 	#accessing
		aBoolean: 	true
		catName: 	nil
		catIndex: 	2
		elemIndex: 	39
		realHeading: 	#accessing
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto1
		heading: 	#accessing
		aBoolean: 	true
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto1
		heading: 	#accessing
		aBoolean: 	true
		oldCat: 	nil
		newCat: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


ClassOrganizer(Categorizer)>>classify:under:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#accessing
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#toto1
		category: 	#accessing
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#toto1
		compiledMethod: 	(B>>#toto1 "a CompiledMethod(392691712)")
		category: 	#accessing
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		priorMethodOrNil: 	(B>>#toto1 "a CompiledMethod(924057600)")
		oldProtocol: 	nil
		newProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'toto1
	^ ''test''  '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:04'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		logSource: 	true
		methodAndNode: 	a CompiledMethodWithNode
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'toto1
	^ ''test''  '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:04'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	#accessing
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
		t4: 	'JB 11/30/2010 17:04'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
toto1
	^ 'test'  ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto1
	^ ''test''  '
		selector: 	#toto1
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
toto1
	^ 'test'  ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto1
	^ ''test''  '
		selector: 	#toto1
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
	Receiver: !B methodsFor: 'accessing!
toto1
	^ 'test'  ! !
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto1
	^ ''test''  '
		selector: 	#toto1
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryChange)>>execute
	Receiver: !B methodsFor: 'accessing!
toto1
	^ 'test'  ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto1
	^ ''test''  '
		selector: 	#toto1
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


[] in RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
toto1
	^ 'test'  ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'execution!
execut...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'execution!
execut...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
toto1
	^ 'test'  ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'execution!
execut...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


ORMethodDefinition>>compileNotifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	an OBPluggableTextMorphWithShout(1031798784)
		t2: 	!B methodsFor: 'accessing!
toto1
	^ 'test'  ! !
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto1
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto1
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
		t3: 	nil
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto1
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

[] in [] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'toto1
	^ ''test''  '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in OBDefinitionPanel>>accept:notifying:
		startpc: 	51
		numArgs: 	0


[] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'toto1
	^ ''test''  '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


[] in OBPluggableTextMorphWithShout>>acceptTextInModel
	Receiver: an OBPluggableTextMorphWithShout(1031798784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	18@1090 corner: 708@1293
		owner: 	an OBGroupingMorph(653524992)
		submorphs: 	an Array(a TransformMorph(398983168))
		fullBounds: 	18@1090 corner: 708@1293
		color: 	Color transparent
		extension: 	a MorphExtension (616562688)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(554172416)
		scroller: 	a TransformMorph(398983168)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(375914496)
		textMorph: 	an OBTextMorphWithShout(597164032)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(18 to: 17)
		hasEditingConflicts: 	false
		styler: 	a SHTextStylerST80
		unstyledAcceptText: 	a Text for 'toto1
	^ ''test''  '


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorphWithShout>>acceptTextInModel
		startpc: 	69
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
Array>>replaceFrom:to:with:startingAt:
Array(SequenceableCollection)>>copyReplaceFrom:to:with:
ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
[] in ClassOrganizer>>classify:under:suppressIfDefault:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
ClassOrganizer>>classify:under:suppressIfDefault:
ClassOrganizer(Categorizer)>>classify:under:
[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
B class(ClassDescription)>>compile:classified:withStamp:notifying:
B class(ClassDescription)>>compile:classified:notifying:
InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
InteractiveAddMethodChange>>primitiveExecute
InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
InteractiveAddMethodChange(RefactoryChange)>>execute
[] in RefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RefactoryChangeManager>>ignoreChangesWhile:
RefactoryChangeManager>>performChange:
ORMethodDefinition>>compileNotifying:
ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
[] in [] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[] in OBPluggableTextMorphWithShout>>acceptTextInModel
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBPluggableTextMorphWithShout>>acceptTextInModel
OBPluggableTextMorphWithShout(PluggableTextMorph)>>accept
OBTextMorphWithShout(TextMorphForEditView)>>acceptContents
OBTextMorphEditorWithShout(TextMorphEditor)>>accept
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: subscript is out of bounds: 6
30 November 2010 5:05:07 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Array(Object)>>error:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		aString: 	'subscript is out of bounds: 6'
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		index: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>at:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
		index: 	6
		repOff: 	0
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		start: 	39
		stop: 	38
		replacementCollection: 	#(#toto)
		newSequenceableCollection: 	#(#initialize #isA #isB #test2 #testReturn nil)
		newSize: 	6
		endReplacement: 	39
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto
		heading: 	#accessing
		aBoolean: 	true
		catName: 	nil
		catIndex: 	2
		elemIndex: 	39
		realHeading: 	#accessing
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto
		heading: 	#accessing
		aBoolean: 	true
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto
		heading: 	#accessing
		aBoolean: 	true
		oldCat: 	nil
		newCat: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


ClassOrganizer(Categorizer)>>classify:under:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto
		t2: 	#accessing
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#toto
		category: 	#accessing
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#toto
		compiledMethod: 	(B>>#toto "a CompiledMethod(958922752)")
		category: 	#accessing
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		priorMethodOrNil: 	(B>>#toto "a CompiledMethod(42205184)")
		oldProtocol: 	nil
		newProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'toto
	^ ''test'' '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:05'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		logSource: 	true
		methodAndNode: 	a CompiledMethodWithNode
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'toto
	^ ''test'' '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:05'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto
	^ ''test'' '
		t2: 	#accessing
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
		t4: 	'JB 11/30/2010 17:05'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
toto
	^ 'test' ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto
	^ ''test'' '
		selector: 	#toto
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
toto
	^ 'test' ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto
	^ ''test'' '
		selector: 	#toto
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
	Receiver: !B methodsFor: 'accessing!
toto
	^ 'test' ! !
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto
	^ ''test'' '
		selector: 	#toto
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryChange)>>execute
	Receiver: !B methodsFor: 'accessing!
toto
	^ 'test' ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto
	^ ''test'' '
		selector: 	#toto
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


[] in RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
toto
	^ 'test' ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'as yet unclassifi...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'as yet unclassifi...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
toto
	^ 'test' ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'as yet unclassifi...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


ORMethodDefinition>>compileNotifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	an OBPluggableTextMorphWithShout(1031798784)
		t2: 	!B methodsFor: 'accessing!
toto
	^ 'test' ! !
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'toto
	^ ''test'' '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'toto
	^ ''test'' '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
		t3: 	nil
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

[] in [] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'toto
	^ ''test'' '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in OBDefinitionPanel>>accept:notifying:
		startpc: 	51
		numArgs: 	0


[] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'toto
	^ ''test'' '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	a Text for 'toto
	^ ''test'' '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


[] in OBPluggableTextMorphWithShout>>acceptTextInModel
	Receiver: an OBPluggableTextMorphWithShout(1031798784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	18@1090 corner: 708@1293
		owner: 	an OBGroupingMorph(653524992)
		submorphs: 	an Array(a TransformMorph(398983168))
		fullBounds: 	18@1090 corner: 708@1293
		color: 	Color transparent
		extension: 	a MorphExtension (616562688)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(554172416)
		scroller: 	a TransformMorph(398983168)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(375914496)
		textMorph: 	an OBTextMorphWithShout(597164032)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(16 to: 15)
		hasEditingConflicts: 	false
		styler: 	a SHTextStylerST80
		unstyledAcceptText: 	a Text for 'toto
	^ ''test'' '


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorphWithShout>>acceptTextInModel
		startpc: 	69
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
Array>>replaceFrom:to:with:startingAt:
Array(SequenceableCollection)>>copyReplaceFrom:to:with:
ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
[] in ClassOrganizer>>classify:under:suppressIfDefault:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
ClassOrganizer>>classify:under:suppressIfDefault:
ClassOrganizer(Categorizer)>>classify:under:
[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
B class(ClassDescription)>>compile:classified:withStamp:notifying:
B class(ClassDescription)>>compile:classified:notifying:
InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
InteractiveAddMethodChange>>primitiveExecute
InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
InteractiveAddMethodChange(RefactoryChange)>>execute
[] in RefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RefactoryChangeManager>>ignoreChangesWhile:
RefactoryChangeManager>>performChange:
ORMethodDefinition>>compileNotifying:
ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
[] in [] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[] in OBPluggableTextMorphWithShout>>acceptTextInModel
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBPluggableTextMorphWithShout>>acceptTextInModel
OBPluggableTextMorphWithShout(PluggableTextMorph)>>accept
OBTextMorphWithShout(TextMorphForEditView)>>acceptContents
OBTextMorphEditorWithShout(TextMorphEditor)>>accept
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: subscript is out of bounds: 6
30 November 2010 5:05:12 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Array(Object)>>error:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		aString: 	'subscript is out of bounds: 6'
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		index: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>at:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
		index: 	6
		repOff: 	0
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		start: 	39
		stop: 	38
		replacementCollection: 	#(#toto)
		newSequenceableCollection: 	#(#initialize #isA #isB #test2 #testReturn nil)
		newSize: 	6
		endReplacement: 	39
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto
		heading: 	#accessing
		aBoolean: 	true
		catName: 	nil
		catIndex: 	2
		elemIndex: 	39
		realHeading: 	#accessing
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto
		heading: 	#accessing
		aBoolean: 	true
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#toto
		heading: 	#accessing
		aBoolean: 	true
		oldCat: 	nil
		newCat: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


ClassOrganizer(Categorizer)>>classify:under:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto
		t2: 	#accessing
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#toto
		category: 	#accessing
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#toto
		compiledMethod: 	(B>>#toto "a CompiledMethod(611581952)")
		category: 	#accessing
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		priorMethodOrNil: 	(B>>#toto "a CompiledMethod(958922752)")
		oldProtocol: 	nil
		newProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'toto
	^ ''tes22t'' '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:05'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		logSource: 	true
		methodAndNode: 	a CompiledMethodWithNode
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'toto
	^ ''tes22t'' '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:05'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto
	^ ''tes22t'' '
		t2: 	#accessing
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
		t4: 	'JB 11/30/2010 17:05'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
toto
	^ 'tes22t' ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto
	^ ''tes22t'' '
		selector: 	#toto
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
toto
	^ 'tes22t' ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto
	^ ''tes22t'' '
		selector: 	#toto
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
	Receiver: !B methodsFor: 'accessing!
toto
	^ 'tes22t' ! !
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto
	^ ''tes22t'' '
		selector: 	#toto
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryChange)>>execute
	Receiver: !B methodsFor: 'accessing!
toto
	^ 'tes22t' ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'toto
	^ ''tes22t'' '
		selector: 	#toto
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


[] in RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
toto
	^ 'tes22t' ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'as yet unclassifi...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'as yet unclassifi...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
toto
	^ 'tes22t' ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!TransactionalManager methodsFor: 'as yet unclassifi...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


ORMethodDefinition>>compileNotifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	an OBPluggableTextMorphWithShout(1031798784)
		t2: 	!B methodsFor: 'accessing!
toto
	^ 'tes22t' ! !
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'toto
	^ ''tes22t'' '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'toto
	^ ''tes22t'' '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
		t3: 	nil
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'toto
	^ ''test'''
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

[] in [] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'toto
	^ ''tes22t'' '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in OBDefinitionPanel>>accept:notifying:
		startpc: 	51
		numArgs: 	0


[] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'toto
	^ ''tes22t'' '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	a Text for 'toto
	^ ''tes22t'' '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


[] in OBPluggableTextMorphWithShout>>acceptTextInModel
	Receiver: an OBPluggableTextMorphWithShout(1031798784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	18@1090 corner: 708@1293
		owner: 	an OBGroupingMorph(653524992)
		submorphs: 	an Array(a TransformMorph(398983168))
		fullBounds: 	18@1090 corner: 708@1293
		color: 	Color transparent
		extension: 	a MorphExtension (616562688)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(554172416)
		scroller: 	a TransformMorph(398983168)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(375914496)
		textMorph: 	an OBTextMorphWithShout(597164032)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(15 to: 14)
		hasEditingConflicts: 	false
		styler: 	a SHTextStylerST80
		unstyledAcceptText: 	a Text for 'toto
	^ ''tes22t'' '


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorphWithShout>>acceptTextInModel
		startpc: 	69
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
Array>>replaceFrom:to:with:startingAt:
Array(SequenceableCollection)>>copyReplaceFrom:to:with:
ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
[] in ClassOrganizer>>classify:under:suppressIfDefault:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
ClassOrganizer>>classify:under:suppressIfDefault:
ClassOrganizer(Categorizer)>>classify:under:
[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
B class(ClassDescription)>>compile:classified:withStamp:notifying:
B class(ClassDescription)>>compile:classified:notifying:
InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
InteractiveAddMethodChange>>primitiveExecute
InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
InteractiveAddMethodChange(RefactoryChange)>>execute
[] in RefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RefactoryChangeManager>>ignoreChangesWhile:
RefactoryChangeManager>>performChange:
ORMethodDefinition>>compileNotifying:
ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
[] in [] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[] in OBPluggableTextMorphWithShout>>acceptTextInModel
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBPluggableTextMorphWithShout>>acceptTextInModel
OBPluggableTextMorphWithShout(PluggableTextMorph)>>accept
OBTextMorphWithShout(TextMorphForEditView)>>acceptContents
OBTextMorphEditorWithShout(TextMorphEditor)>>accept
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: subscript is out of bounds: 6
30 November 2010 5:05:44 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Array(Object)>>error:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		aString: 	'subscript is out of bounds: 6'
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		index: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>at:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
		index: 	6
		repOff: 	0
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array>>replaceFrom:to:with:startingAt:
	Receiver: #(#initialize #isA #isB #test2 #testReturn nil)
	Arguments and temporary variables: 
		start: 	1
		stop: 	38
		replacement: 	#(#initialize #isA #isB #test2 #testReturn)
		repStart: 	1
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn nil)

Array(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		start: 	39
		stop: 	38
		replacementCollection: 	#(#activeTestWrap)
		newSequenceableCollection: 	#(#initialize #isA #isB #test2 #testReturn nil)
		newSize: 	6
		endReplacement: 	39
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#activeTestWrap
		heading: 	#accessing
		aBoolean: 	true
		catName: 	nil
		catIndex: 	2
		elemIndex: 	39
		realHeading: 	#accessing
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#activeTestWrap
		heading: 	#accessing
		aBoolean: 	true
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[super
		classify: element
		under: heading
		suppressIfDefault: aBoole...etc...
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		element: 	#activeTestWrap
		heading: 	#accessing
		aBoolean: 	true
		oldCat: 	nil
		newCat: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


ClassOrganizer(Categorizer)>>classify:under:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#activeTestWrap
		t2: 	#accessing
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#activeTestWrap
		category: 	#accessing
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		t1: 	[silenceLevel > 0
		ifTrue: [silenceLevel := silenceLevel - 1]]
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
		aBlock: 	[self organization classify: selector under: category]
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		selector: 	#activeTestWrap
		compiledMethod: 	(B>>#activeTestWrap "a CompiledMethod(97517568)")
		category: 	#accessing
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		priorMethodOrNil: 	(B>>#activeTestWrap "a CompiledMethod(137101312)")
		oldProtocol: 	nil
		newProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'activeTestWrap
	^ self test2 '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:05'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
		logSource: 	true
		methodAndNode: 	a CompiledMethodWithNode
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: B
	Arguments and temporary variables: 
		text: 	a Text for 'activeTestWrap
	^ self test2 '
		category: 	#accessing
		changeStamp: 	'JB 11/30/2010 17:05'
		requestor: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'activeTestWrap
	^ self test2 '
		t2: 	#accessing
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
		t4: 	'JB 11/30/2010 17:05'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
activeTestWrap
	^ self test2 ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'activeTestWrap
	^ self test2 '
		selector: 	#activeTestWrap
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange>>primitiveExecute
	Receiver: !B methodsFor: 'accessing!
activeTestWrap
	^ self test2 ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'activeTestWrap
	^ self test2 '
		selector: 	#activeTestWrap
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
	Receiver: !B methodsFor: 'accessing!
activeTestWrap
	^ self test2 ! !
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'activeTestWrap
	^ self test2 '
		selector: 	#activeTestWrap
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


InteractiveAddMethodChange(RefactoryChange)>>execute
	Receiver: !B methodsFor: 'accessing!
activeTestWrap
	^ self test2 ! !
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#B
		isMeta: 	false
		source: 	a Text for 'activeTestWrap
	^ self test2 '
		selector: 	#activeTestWrap
		protocols: 	#(#accessing)
		controller: 	an OBPluggableTextMorphWithShout(1031798784)
		definedSelector: 	nil


[] in RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
activeTestWrap
	^ self test2 ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!PropagationTestClass methodsFor: 'send method!
send...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!PropagationTestClass methodsFor: 'send method!
send...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RefactoryChangeManager>>performChange:
	Receiver: a RefactoryChangeManager
	Arguments and temporary variables: 
		t1: 	!B methodsFor: 'accessing!
activeTestWrap
	^ self test2 ! !
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!PropagationTestClass methodsFor: 'send method!
send...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


ORMethodDefinition>>compileNotifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	an OBPluggableTextMorphWithShout(1031798784)
		t2: 	!B methodsFor: 'accessing!
activeTestWrap
	^ self test2 ! !
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'activeTestWrap
	^ self test2'
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'activeTestWrap
	^ self test2 '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'activeTestWrap
	^ self test2'
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		t1: 	a Text for 'activeTestWrap
	^ self test2 '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
		t3: 	nil
	Receiver's instance variables: 
		theClass: 	B
		category: 	nil
		source: 	a Text for 'activeTestWrap
	^ self test2'
		selection: 	(1 to: 0)
		callback: 	<<error during printing>>

[] in [] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'activeTestWrap
	^ self test2 '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in OBDefinitionPanel>>accept:notifying:
		startpc: 	51
		numArgs: 	0


[] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	an ORMethodDefinition
		t2: 	a Text for 'activeTestWrap
	^ self test2 '
		t3: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		t1: 	a Text for 'activeTestWrap
	^ self test2 '
		t2: 	an OBPluggableTextMorphWithShout(1031798784)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 0)


[] in OBPluggableTextMorphWithShout>>acceptTextInModel
	Receiver: an OBPluggableTextMorphWithShout(1031798784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	18@1090 corner: 708@1293
		owner: 	an OBGroupingMorph(653524992)
		submorphs: 	an Array(a TransformMorph(398983168))
		fullBounds: 	18@1090 corner: 708@1293
		color: 	Color transparent
		extension: 	a MorphExtension (616562688)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(554172416)
		scroller: 	a TransformMorph(398983168)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(375914496)
		textMorph: 	an OBTextMorphWithShout(597164032)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(30 to: 29)
		hasEditingConflicts: 	false
		styler: 	a SHTextStylerST80
		unstyledAcceptText: 	a Text for 'activeTestWrap
	^ self test2 '


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorphWithShout>>acceptTextInModel
		startpc: 	69
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
Array>>replaceFrom:to:with:startingAt:
Array(SequenceableCollection)>>copyReplaceFrom:to:with:
ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
[] in ClassOrganizer>>classify:under:suppressIfDefault:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
ClassOrganizer>>classify:under:suppressIfDefault:
ClassOrganizer(Categorizer)>>classify:under:
[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
B class(ClassDescription)>>compile:classified:withStamp:notifying:
B class(ClassDescription)>>compile:classified:notifying:
InteractiveAddMethodChange(AddMethodChange)>>primitiveExecute
InteractiveAddMethodChange>>primitiveExecute
InteractiveAddMethodChange(RefactoryClassChange)>>executeNotifying:
InteractiveAddMethodChange(RefactoryChange)>>execute
[] in RefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RefactoryChangeManager>>ignoreChangesWhile:
RefactoryChangeManager>>performChange:
ORMethodDefinition>>compileNotifying:
ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
[] in [] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[] in OBPluggableTextMorphWithShout>>acceptTextInModel
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBPluggableTextMorphWithShout>>acceptTextInModel
OBPluggableTextMorphWithShout(PluggableTextMorph)>>accept
OBTextMorphWithShout(TextMorphForEditView)>>acceptContents
OBTextMorphEditorWithShout(TextMorphEditor)>>accept
[] in OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>terminateAndInitializeAround:
OBTextMorphEditorWithShout(ParagraphEditor)>>save:
OBTextMorphEditorWithShout(ParagraphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(TextMorphEditor)>>dispatchOnKeyEvent:with:
OBTextMorphEditorWithShout(ParagraphEditor)>>keystroke:
OBTextMorphEditorWithShout(TextMorphEditor)>>keystroke:
[] in [] in OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleInteraction:
OBTextMorphWithShout(TextMorphForEditView)>>handleInteraction:
[] in OBTextMorphWithShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
OBTextMorphWithShout(TextMorph)>>keyStroke:
OBTextMorphWithShout(TextMorphForEditView)>>keyStroke:
OBTextMorphWithShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorphWithShout(Morph)>>handleEvent:
OBTextMorphWithShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:06:23 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MirrorHandleTest>>#mirrorSend "a CompiledMethod(773849088)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20497784
		t3: 	a WriteStream ' '
		t5: 	20497784
		t4: 	nil
	Receiver's instance variables: 
(MirrorHandleTest>>#mirrorSend "a CompiledMethod(773849088)")

CompiledMethod>>timeStamp
	Receiver: (MirrorHandleTest>>#mirrorSend "a CompiledMethod(773849088)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MirrorHandleTest>>#mirrorSend "a CompiledMethod(773849088)")

MethodReference>>timeStamp
	Receiver: a MethodReference MirrorHandleTest >> #mirrorSend
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorHandleTest
		classIsMeta: 	false
		methodSymbol: 	#mirrorSend
		stringVersion: 	'MirrorHandleTest mirrorSend'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MirrorHandleTest >> #mirrorSend
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((AA>>#initial...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MirrorHandleTest >> #mirrorSend
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorHandleTest
		classIsMeta: 	false
		methodSymbol: 	#mirrorSend
		stringVersion: 	'MirrorHandleTest mirrorSend'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MirrorHandleTest >> #mirrorSend
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[922@421 mouseUp 3691023 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[922@421 mouseUp 3691023 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[922@421 mouseUp 3691023 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[922@421 mouseUp 3691023 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [922@421 mouseUp 3691023 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3691023
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	922@421
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[922@421 mouseUp 3691023 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:06:51 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MirrorHandleTest>>#mirrorSend "a CompiledMethod(773849088)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20497784
		t3: 	a WriteStream ' '
		t5: 	20497784
		t4: 	nil
	Receiver's instance variables: 
(MirrorHandleTest>>#mirrorSend "a CompiledMethod(773849088)")

CompiledMethod>>timeStamp
	Receiver: (MirrorHandleTest>>#mirrorSend "a CompiledMethod(773849088)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(MirrorHandleTest>>#mirrorSend "a CompiledMethod(773849088)")

MethodReference>>timeStamp
	Receiver: a MethodReference MirrorHandleTest >> #mirrorSend
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorHandleTest
		classIsMeta: 	false
		methodSymbol: 	#mirrorSend
		stringVersion: 	'MirrorHandleTest mirrorSend'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MirrorHandleTest >> #mirrorSend
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((AA>>#initial...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MirrorHandleTest >> #mirrorSend
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MirrorHandleTest
		classIsMeta: 	false
		methodSymbol: 	#mirrorSend
		stringVersion: 	'MirrorHandleTest mirrorSend'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MirrorHandleTest >> #mirrorSend
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[925@431 mouseUp 3718303 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[925@431 mouseUp 3718303 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[925@431 mouseUp 3718303 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[925@431 mouseUp 3718303 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [925@431 mouseUp 3718303 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3718303
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	925@431
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[925@431 mouseUp 3718303 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:07:27 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream ' '
		t5: 	22798873
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[957@426 mouseUp 3754960 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[957@426 mouseUp 3754960 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[957@426 mouseUp 3754960 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[957@426 mouseUp 3754960 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [957@426 mouseUp 3754960 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3754960
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	957@426
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[957@426 mouseUp 3754960 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:08:11 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] Squeak VM 4.2.5b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream ' '
		t5: 	22798873
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[934@434 mouseUp 4458 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[934@434 mouseUp 4458 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[934@434 mouseUp 4458 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[934@434 mouseUp 4458 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [934@434 mouseUp 4458 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	4458
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	934@434
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[934@434 mouseUp 4458 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Unmatched string quote
30 November 2010 5:08:45 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] Squeak VM 4.2.5b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Scanner(Object)>>error:
	Receiver: a Scanner
	Arguments and temporary variables: 
		aString: 	'Unmatched string quote'
	Receiver's instance variables: 
		source: 	a ReadStream 'Association methodsFor: ''*system-settings-browser'' stam...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#stamp:
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream 'alain.'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>notify:
	Receiver: a Scanner
	Arguments and temporary variables: 
		string: 	'Unmatched string quote'
	Receiver's instance variables: 
		source: 	a ReadStream 'Association methodsFor: ''*system-settings-browser'' stam...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#stamp:
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream 'alain.'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>offEnd:
	Receiver: a Scanner
	Arguments and temporary variables: 
		aString: 	'Unmatched string quote'
	Receiver's instance variables: 
		source: 	a ReadStream 'Association methodsFor: ''*system-settings-browser'' stam...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#stamp:
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream 'alain.'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>xSingleQuote
	Receiver: a Scanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream 'Association methodsFor: ''*system-settings-browser'' stam...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#stamp:
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream 'alain.'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>scanToken
	Receiver: a Scanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream 'Association methodsFor: ''*system-settings-browser'' stam...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#stamp:
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream 'alain.'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>scanLitVec
	Receiver: a Scanner
	Arguments and temporary variables: 
		s: 	a WriteStream #(#Association #methodsFor: '*system-settings-browser' #stamp:...etc...
	Receiver's instance variables: 
		source: 	a ReadStream 'Association methodsFor: ''*system-settings-browser'' stam...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#stamp:
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream 'alain.'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>scanTokens:
	Receiver: a Scanner
	Arguments and temporary variables: 
		textOrString: 	'Association methodsFor: ''*system-settings-browser'' stamp: ''al...etc...
	Receiver's instance variables: 
		source: 	a ReadStream 'Association methodsFor: ''*system-settings-browser'' stam...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#stamp:
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream 'alain.'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


CompiledMethod>>timeStamp
	Receiver: (PropagationTest>>#setUp "a CompiledMethod(216530944)")
	Arguments and temporary variables: 
		preamble: 	'Association methodsFor: ''*system-settings-browser'' stamp: ''alain....etc...
		stamp: 	''
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(PropagationTest>>#setUp "a CompiledMethod(216530944)")

MethodReference>>timeStamp
	Receiver: a MethodReference PropagationTest >> #setUp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#PropagationTest
		classIsMeta: 	false
		methodSymbol: 	#setUp
		stringVersion: 	'PropagationTest setUp'
		category: 	#private
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		aMethodReference: 	a MethodReference PropagationTest >> #setUp
		definition: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((ClassHandle>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference PropagationTest >> #setUp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#PropagationTest
		classIsMeta: 	false
		methodSymbol: 	#setUp
		stringVersion: 	'PropagationTest setUp'
		category: 	#private
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		definitions: 	a MethodReference PropagationTest >> #setUp
		ea: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(T...etc...
		index: 	8
		indexLimiT: 	824
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	824
		minVal: 	0
		aPoint: 	951@433
		progressTitle: 	''


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	824
		minVal: 	0
		aPoint: 	951@433
		progressTitle: 	''


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	824
		minVal: 	0
		aPoint: 	951@433
		progressTitle: 	''


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	824
		minVal: 	0
		aPoint: 	951@433
		progressTitle: 	''


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	824
		minVal: 	0
		aPoint: 	951@433
		progressTitle: 	''


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		argString: 	''
		argPoint: 	951@433
		argMinVal: 	0
		argMaxVal: 	824
		argWorkBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					o...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	824
		minVal: 	0
		aPoint: 	951@433
		progressTitle: 	''


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	''
		aPoint: 	951@433
		minVal: 	0
		maxVal: 	824
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
		aPoint: 	951@433
		minVal: 	0
		maxVal: 	824
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
		aBlock: 	[:ea | definitions add: ea asMethodDefinition]
		aStringOrBlock: 	'Snapshotting methods...'
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		packageInfo: 	a PackageInfo(handles)
		definitions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' ...etc...
		categories: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Ap...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[951@433 mouseUp 3139 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[951@433 mouseUp 3139 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[951@433 mouseUp 3139 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[951@433 mouseUp 3139 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [951@433 mouseUp 3139 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	3139
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	951@433
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Scanner(Object)>>error:
Scanner>>notify:
Scanner>>offEnd:
Scanner>>xSingleQuote
Scanner>>scanToken
Scanner>>scanLitVec
Scanner>>scanTokens:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:13:18 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] Squeak VM 4.2.5b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream ' '
		t5: 	22798873
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(703332352)
		m: 	[942@438 mouseUp 247581 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[942@438 mouseUp 247581 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		evt: 	[942@438 mouseUp 247581 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[942@438 mouseUp 247581 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [942@438 mouseUp 247581 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(703332352)
	Receiver's instance variables: 
		timeStamp: 	247581
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	942@438
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(703332352)
	Arguments and temporary variables: 
		anEvent: 	[942@438 mouseUp 247581 nil]
	Receiver's instance variables: 
		bounds: 	903@420 corner: 967@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(116129792))
		fullBounds: 	903@420 corner: 967@446
		color: 	Color transparent
		extension: 	a MorphExtension (958136320) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid source pointer
30 November 2010 5:13:56 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] Squeak VM 4.2.5b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

OBMethodVersion(Object)>>error:
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 
		aString: 	'Invalid source pointer'
	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downlo...etc...
		pointer: 	70872619
		classRef: 	nil
		category: 	nil
		stamp: 	nil
		prior: 	nil
		selector: 	nil


OBMethodVersion>>parseSource
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20540971
		t3: 	''
	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downlo...etc...
		pointer: 	70872619
		classRef: 	nil
		category: 	nil
		stamp: 	nil
		prior: 	nil
		selector: 	nil


OBMethodVersion>>setSources:pointer:
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 
		t1: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downloads/0...etc...
		t2: 	70872619
	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downlo...etc...
		pointer: 	70872619
		classRef: 	nil
		category: 	nil
		stamp: 	nil
		prior: 	nil
		selector: 	nil


OBMethodVersion class>>fromSources:andPointer:
	Receiver: OBMethodVersion
	Arguments and temporary variables: 
		t1: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downloads/0...etc...
		t2: 	70872619
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->(OBMethodVersion>>#= "a CompiledMethod(26869...etc...
		format: 	144
		instanceVariables: 	#('sources' 'pointer' 'classRef' 'category' 'stamp' 'prior' ...etc...
		organization: 	('accessing' category classSymbol latest pointer selector source ...etc...
		subclasses: 	nil
		name: 	#OBMethodVersion
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Standard-Utilities'
		traitComposition: 	{}
		localSelectors: 	nil


OBMethodVersion>>previous
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downlo...etc...
		pointer: 	33689098
		classRef: 	OBClassReference<Handle>
		category: 	'option'
		stamp: 	'JB 11/30/2010 17:13'
		prior: 	70872619
		selector: 	nil


OBMethodVersion class>>scan:from:
	Receiver: OBMethodVersion
	Arguments and temporary variables: 
		t1: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downloads/0...etc...
		t2: 	33689098
		t3: 	an OrderedCollection(an OBMethodVersion)
		t4: 	an OBMethodVersion
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->(OBMethodVersion>>#= "a CompiledMethod(26869...etc...
		format: 	144
		instanceVariables: 	#('sources' 'pointer' 'classRef' 'category' 'stamp' 'prior' ...etc...
		organization: 	('accessing' category classSymbol latest pointer selector source ...etc...
		subclasses: 	nil
		name: 	#OBMethodVersion
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Standard-Utilities'
		traitComposition: 	{}
		localSelectors: 	nil


OBMethodNode>>versions
	Receiver: OBMethodNode<Handle#addBehavior>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Method

		theClass: 	Handle
		selector: 	#addBehavior


OBVersionBrowser class>>openOn:
	Receiver: OBVersionBrowser
	Arguments and temporary variables: 
		t1: 	OBMethodNode<Handle#addBehavior>
	Receiver's instance variables: 
		superclass: 	OBCodeBrowser
		methodDict: 	a MethodDictionary(#defaultBackgroundColor->(OBVersionBrowser>>#def...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('accessing' defaultLabel)
('morphic' defaultBackgroundColor)

		subclasses: 	nil
		name: 	#OBVersionBrowser
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Standard-Browsers'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdBrowseMethodVersions>>execute
	Receiver: an OBCmdBrowseMethodVersions
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMethodNode<Handle#addBehavior>
		requestor: 	an OBFixedButtonPanel


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(403439616)
		m: 	[809@973 mouseUp 285506 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(937689088) a PluggableButtonMorphPlus(657719296) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	7
		indexLimiT: 	8
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(937689088) a PluggableButtonMorphPlus(657719296) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		evt: 	[809@973 mouseUp 285506 nil]
		all: 	an Array(a PluggableButtonMorphPlus(937689088) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		evt: 	[809@973 mouseUp 285506 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		anEvent: 	[809@973 mouseUp 285506 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [809@973 mouseUp 285506 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(403439616)
	Receiver's instance variables: 
		timeStamp: 	285506
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	809@973
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		anEvent: 	[809@973 mouseUp 285506 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		anEvent: 	[809@973 mouseUp 285506 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[809@973 mouseUp 285506 nil]
		focusHolder: 	a PluggableButtonMorphPlus(403439616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	809@973 corner: 825@989
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	809@973 corner: 825@989
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(622329856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[809@973 mouseUp 285506 nil]
		targetOffset: 	7@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 285506 809 973 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(439091200) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[809@973 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(439091200) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[809@973 mouseUp 285506 nil]
		focusHolder: 	a PluggableButtonMorphPlus(403439616)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	809@973 corner: 825@989
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	809@973 corner: 825@989
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(622329856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[809@973 mouseUp 285506 nil]
		targetOffset: 	7@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 285506 809 973 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[809@973 mouseUp 285506 nil]
		focusHolder: 	a PluggableButtonMorphPlus(403439616)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	809@973 corner: 825@989
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	809@973 corner: 825@989
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(622329856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[809@973 mouseUp 285506 nil]
		targetOffset: 	7@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 285506 809 973 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[809@973 mouseUp 285506 nil]
	Receiver's instance variables: 
		bounds: 	809@973 corner: 825@989
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	809@973 corner: 825@989
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(622329856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[809@973 mouseUp 285506 nil]
		targetOffset: 	7@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 285506 809 973 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[809@973 mouseUp 285506 nil]
		t2: 	[809@973 mouseUp 285506 nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	809@973 corner: 825@989
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	809@973 corner: 825@989
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(622329856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[809@973 mouseUp 285506 nil]
		targetOffset: 	7@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 285506 809 973 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[809@973 mouseUp 285506 nil]
		t2: 	#(1 285506 809 973 0 0 0 1)
		t3: 	1
		t4: 	false
	Receiver's instance variables: 
		bounds: 	809@973 corner: 825@989
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	809@973 corner: 825@989
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(622329856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[809@973 mouseUp 285506 nil]
		targetOffset: 	7@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 285506 809 973 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(357826560))(a SystemWin...etc...
		lastStepTime: 	285494
		lastStepMessage: 	nil
		lastCycleTime: 	285534
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	285494
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(357826560))(a SystemWin...etc...
		lastStepTime: 	285494
		lastStepMessage: 	nil
		lastCycleTime: 	285534
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	285494
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(357826560))(a SystemWin...etc...
		lastStepTime: 	285494
		lastStepMessage: 	nil
		lastCycleTime: 	285534
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	285494
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(357826560))(a SystemWin...etc...
		lastStepTime: 	285494
		lastStepMessage: 	nil
		lastCycleTime: 	285534
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	285494
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(439091200) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(6236405...etc...
		format: 	168
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'previous...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
OBMethodVersion(Object)>>error:
OBMethodVersion>>parseSource
OBMethodVersion>>setSources:pointer:
OBMethodVersion class>>fromSources:andPointer:
OBMethodVersion>>previous
OBMethodVersion class>>scan:from:
OBMethodNode>>versions
OBVersionBrowser class>>openOn:
OBCmdBrowseMethodVersions>>execute
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid source pointer
30 November 2010 5:14:06 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] Squeak VM 4.2.5b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

OBMethodVersion(Object)>>error:
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 
		aString: 	'Invalid source pointer'
	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downlo...etc...
		pointer: 	73130387
		classRef: 	nil
		category: 	nil
		stamp: 	nil
		prior: 	nil
		selector: 	nil


OBMethodVersion>>parseSource
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798739
		t3: 	''
	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downlo...etc...
		pointer: 	73130387
		classRef: 	nil
		category: 	nil
		stamp: 	nil
		prior: 	nil
		selector: 	nil


OBMethodVersion>>setSources:pointer:
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 
		t1: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downloads/0...etc...
		t2: 	73130387
	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downlo...etc...
		pointer: 	73130387
		classRef: 	nil
		category: 	nil
		stamp: 	nil
		prior: 	nil
		selector: 	nil


OBMethodVersion class>>fromSources:andPointer:
	Receiver: OBMethodVersion
	Arguments and temporary variables: 
		t1: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downloads/0...etc...
		t2: 	73130387
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->(OBMethodVersion>>#= "a CompiledMethod(26869...etc...
		format: 	144
		instanceVariables: 	#('sources' 'pointer' 'classRef' 'category' 'stamp' 'prior' ...etc...
		organization: 	('accessing' category classSymbol latest pointer selector source ...etc...
		subclasses: 	nil
		name: 	#OBMethodVersion
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Standard-Utilities'
		traitComposition: 	{}
		localSelectors: 	nil


OBMethodVersion>>previous
	Receiver: an OBMethodVersion
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sources: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downlo...etc...
		pointer: 	33689324
		classRef: 	OBClassReference<Handle>
		category: 	'option'
		stamp: 	'JB 11/30/2010 17:14'
		prior: 	73130387
		selector: 	nil


OBMethodVersion class>>scan:from:
	Receiver: OBMethodVersion
	Arguments and temporary variables: 
		t1: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Downloads/0...etc...
		t2: 	33689324
		t3: 	an OrderedCollection(an OBMethodVersion)
		t4: 	an OBMethodVersion
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->(OBMethodVersion>>#= "a CompiledMethod(26869...etc...
		format: 	144
		instanceVariables: 	#('sources' 'pointer' 'classRef' 'category' 'stamp' 'prior' ...etc...
		organization: 	('accessing' category classSymbol latest pointer selector source ...etc...
		subclasses: 	nil
		name: 	#OBMethodVersion
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Standard-Utilities'
		traitComposition: 	{}
		localSelectors: 	nil


OBMethodNode>>versions
	Receiver: OBMethodNode<Handle#addSelfWrapping>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Method

		theClass: 	Handle
		selector: 	#addSelfWrapping


OBVersionBrowser class>>openOn:
	Receiver: OBVersionBrowser
	Arguments and temporary variables: 
		t1: 	OBMethodNode<Handle#addSelfWrapping>
	Receiver's instance variables: 
		superclass: 	OBCodeBrowser
		methodDict: 	a MethodDictionary(#defaultBackgroundColor->(OBVersionBrowser>>#def...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('accessing' defaultLabel)
('morphic' defaultBackgroundColor)

		subclasses: 	nil
		name: 	#OBVersionBrowser
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OB-Standard-Browsers'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdBrowseMethodVersions>>execute
	Receiver: an OBCmdBrowseMethodVersions
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMethodNode<Handle#addSelfWrapping>
		requestor: 	an OBFixedButtonPanel


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(403439616)
		m: 	[831@963 mouseUp 295587 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(937689088) a PluggableButtonMorphPlus(657719296) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	7
		indexLimiT: 	8
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(937689088) a PluggableButtonMorphPlus(657719296) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		evt: 	[831@963 mouseUp 295587 nil]
		all: 	an Array(a PluggableButtonMorphPlus(937689088) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		evt: 	[831@963 mouseUp 295587 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		anEvent: 	[831@963 mouseUp 295587 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [831@963 mouseUp 295587 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(403439616)
	Receiver's instance variables: 
		timeStamp: 	295587
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	831@963
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		anEvent: 	[831@963 mouseUp 295587 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorphPlus(403439616)
	Arguments and temporary variables: 
		anEvent: 	[831@963 mouseUp 295587 nil]
	Receiver's instance variables: 
		bounds: 	801@962 corner: 882@986
		owner: 	an OBButtonBar(962068480)
		submorphs: 	an Array(an AlignmentMorph(438042624))
		fullBounds: 	801@962 corner: 882@986
		color: 	Color transparent
		extension: 	a MorphExtension (1051983872) [balloonText]  [other:  (lastState -> ...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	an OBCmdBrowseMethodVersions
		label: 	'versions'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	(Color r: 0.861 g: 0.861 b: 0.861)
		onColor: 	(Color r: 0.833 g: 0.833 b: 0.833)
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[831@963 mouseUp 295587 nil]
		focusHolder: 	a PluggableButtonMorphPlus(403439616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	831@963 corner: 847@979
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	831@963 corner: 847@979
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(49545216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@963 mouseUp 295587 nil]
		targetOffset: 	30@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 295587 831 963 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(123731968) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[831@963 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(123731968) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[831@963 mouseUp 295587 nil]
		focusHolder: 	a PluggableButtonMorphPlus(403439616)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	831@963 corner: 847@979
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	831@963 corner: 847@979
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(49545216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@963 mouseUp 295587 nil]
		targetOffset: 	30@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 295587 831 963 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[831@963 mouseUp 295587 nil]
		focusHolder: 	a PluggableButtonMorphPlus(403439616)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	831@963 corner: 847@979
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	831@963 corner: 847@979
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(49545216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@963 mouseUp 295587 nil]
		targetOffset: 	30@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 295587 831 963 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[831@963 mouseUp 295587 nil]
	Receiver's instance variables: 
		bounds: 	831@963 corner: 847@979
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	831@963 corner: 847@979
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(49545216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@963 mouseUp 295587 nil]
		targetOffset: 	30@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 295587 831 963 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[831@963 mouseUp 295587 nil]
		t2: 	[831@963 mouseUp 295587 nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	831@963 corner: 847@979
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	831@963 corner: 847@979
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(49545216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@963 mouseUp 295587 nil]
		targetOffset: 	30@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 295587 831 963 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[831@963 mouseUp 295587 nil]
		t2: 	#(1 295587 831 963 0 0 0 1)
		t3: 	1
		t4: 	false
	Receiver's instance variables: 
		bounds: 	831@963 corner: 847@979
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	831@963 corner: 847@979
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(49545216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@963 mouseUp 295587 nil]
		targetOffset: 	30@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 295587 831 963 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(123731968))(a PreDebu...etc...
		lastStepTime: 	295579
		lastStepMessage: 	nil
		lastCycleTime: 	295619
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	295579
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(123731968))(a PreDebu...etc...
		lastStepTime: 	295579
		lastStepMessage: 	nil
		lastCycleTime: 	295619
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	295579
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(123731968))(a PreDebu...etc...
		lastStepTime: 	295579
		lastStepMessage: 	nil
		lastCycleTime: 	295619
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	295579
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(123731968))(a PreDebu...etc...
		lastStepTime: 	295579
		lastStepMessage: 	nil
		lastCycleTime: 	295619
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	295579
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(123731968) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(6236405...etc...
		format: 	168
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'previous...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
OBMethodVersion(Object)>>error:
OBMethodVersion>>parseSource
OBMethodVersion>>setSources:pointer:
OBMethodVersion class>>fromSources:andPointer:
OBMethodVersion>>previous
OBMethodVersion class>>scan:from:
OBMethodNode>>versions
OBVersionBrowser class>>openOn:
OBCmdBrowseMethodVersions>>execute
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asSymbol" is nil
30 November 2010 5:14:58 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asSymbol
		exception: 	MessageNotUnderstood: receiver of "asSymbol" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MCMethodDefinition>>initializeWithClassName:classIsMeta:selector:category:timeStamp:source:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		classString: 	#B
		metaBoolean: 	false
		selectorString: 	#toto
		catString: 	nil
		timeString: 	'jb 9/30/2010 11:20'
		sourceString: 	'toto ^''test'''
	Receiver's instance variables: 
		classIsMeta: 	nil
		source: 	nil
		category: 	nil
		selector: 	#toto
		className: 	#B
		timeStamp: 	nil


MCMethodDefinition class>>className:classIsMeta:selector:category:timeStamp:source:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		classString: 	#B
		metaBoolean: 	false
		selectorString: 	#toto
		catString: 	nil
		timeString: 	'jb 9/30/2010 11:20'
		sourceString: 	'toto ^''test'''
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 158) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		aMethodReference: 	a MethodReference B >> #toto
		definition: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 158) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference B >> #toto
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#B
		classIsMeta: 	false
		methodSymbol: 	#toto
		stringVersion: 	'B toto'
		category: 	nil
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		definitions: 	a MethodReference B >> #toto
		ea: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-ShadowStruct' #...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(T...etc...
		index: 	159
		indexLimiT: 	806
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	806
		minVal: 	0
		aPoint: 	413@998
		progressTitle: 	''


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	806
		minVal: 	0
		aPoint: 	413@998
		progressTitle: 	''


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	806
		minVal: 	0
		aPoint: 	413@998
		progressTitle: 	''


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	806
		minVal: 	0
		aPoint: 	413@998
		progressTitle: 	''


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	806
		minVal: 	0
		aPoint: 	413@998
		progressTitle: 	''


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		argString: 	''
		argPoint: 	413@998
		argMinVal: 	0
		argMaxVal: 	806
		argWorkBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					o...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	806
		minVal: 	0
		aPoint: 	413@998
		progressTitle: 	''


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	''
		aPoint: 	413@998
		minVal: 	0
		maxVal: 	806
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
		aPoint: 	413@998
		minVal: 	0
		maxVal: 	806
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
		aBlock: 	[:ea | definitions add: ea asMethodDefinition]
		aStringOrBlock: 	'Snapshotting methods...'
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		packageInfo: 	a PackageInfo(Handles)
		definitions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Shadow...etc...
		categories: 	#(#'Handles-ShadowStruct' #'Handles-Core' #'Handles-Test' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	nil
		defaults: 	a Dictionary()
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(640155648)
		m: 	[413@998 mouseUp 7878 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(522715136) a PluggableButtonMorphPlus(920911872) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(522715136) a PluggableButtonMorphPlus(920911872) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		evt: 	[413@998 mouseUp 7878 nil]
		all: 	an Array(a PluggableButtonMorphPlus(522715136) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		evt: 	[413@998 mouseUp 7878 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		anEvent: 	[413@998 mouseUp 7878 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [413@998 mouseUp 7878 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(640155648)
	Receiver's instance variables: 
		timeStamp: 	7878
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	413@998
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		anEvent: 	[413@998 mouseUp 7878 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		anEvent: 	[413@998 mouseUp 7878 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[413@998 mouseUp 7878 nil]
		focusHolder: 	a PluggableButtonMorphPlus(640155648)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1061@1105 corner: 1077@1121
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1061@1105 corner: 1077@1121
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(905445376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[413@998 1061@1105 mouseMove 8048 nil]
		targetOffset: 	10@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 8048 415 1001 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2467@1548
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(244842496) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[413@998 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2467@1548
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(244842496) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
MCMethodDefinition>>initializeWithClassName:classIsMeta:selector:category:timeStamp:source:
MCMethodDefinition class>>className:classIsMeta:selector:category:timeStamp:source:
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asSymbol" is nil
30 November 2010 5:15:41 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asSymbol
		exception: 	MessageNotUnderstood: receiver of "asSymbol" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MCMethodDefinition>>initializeWithClassName:classIsMeta:selector:category:timeStamp:source:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		classString: 	#B
		metaBoolean: 	false
		selectorString: 	#activeTestWrap
		catString: 	nil
		timeString: 	'JB 10/22/2010 14:47'
		sourceString: 	'activeTestWrap 
	 ^self test2.'
	Receiver's instance variables: 
		classIsMeta: 	nil
		source: 	nil
		category: 	nil
		selector: 	#activeTestWrap
		className: 	#B
		timeStamp: 	nil


MCMethodDefinition class>>className:classIsMeta:selector:category:timeStamp:source:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		classString: 	#B
		metaBoolean: 	false
		selectorString: 	#activeTestWrap
		catString: 	nil
		timeString: 	'JB 10/22/2010 14:47'
		sourceString: 	'activeTestWrap 
	 ^self test2.'
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 158) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		aMethodReference: 	a MethodReference B >> #activeTestWrap
		definition: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 158) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference B >> #activeTestWrap
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#B
		classIsMeta: 	false
		methodSymbol: 	#activeTestWrap
		stringVersion: 	'B activeTestWrap'
		category: 	nil
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		definitions: 	a MethodReference B >> #activeTestWrap
		ea: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-ShadowStruct' #...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(T...etc...
		index: 	158
		indexLimiT: 	804
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	804
		minVal: 	0
		aPoint: 	445@999
		progressTitle: 	''


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	804
		minVal: 	0
		aPoint: 	445@999
		progressTitle: 	''


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	804
		minVal: 	0
		aPoint: 	445@999
		progressTitle: 	''


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	804
		minVal: 	0
		aPoint: 	445@999
		progressTitle: 	''


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	804
		minVal: 	0
		aPoint: 	445@999
		progressTitle: 	''


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		argString: 	''
		argPoint: 	445@999
		argMinVal: 	0
		argMaxVal: 	804
		argWorkBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					o...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	804
		minVal: 	0
		aPoint: 	445@999
		progressTitle: 	''


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	''
		aPoint: 	445@999
		minVal: 	0
		maxVal: 	804
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
		aPoint: 	445@999
		minVal: 	0
		maxVal: 	804
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
		aBlock: 	[:ea | definitions add: ea asMethodDefinition]
		aStringOrBlock: 	'Snapshotting methods...'
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		packageInfo: 	a PackageInfo(Handles)
		definitions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Shadow...etc...
		categories: 	#(#'Handles-ShadowStruct' #'Handles-Core' #'Handles-Test' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCWorkingCopyBrowser>>browseWorkingCopy
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(Handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	nil
		defaults: 	a Dictionary()
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(640155648)
		m: 	[445@999 mouseUp 51989 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(522715136) a PluggableButtonMorphPlus(920911872) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	3
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(522715136) a PluggableButtonMorphPlus(920911872) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		evt: 	[445@999 mouseUp 51989 nil]
		all: 	an Array(a PluggableButtonMorphPlus(522715136) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		evt: 	[445@999 mouseUp 51989 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		anEvent: 	[445@999 mouseUp 51989 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


MouseButtonEvent>>sentTo:
	Receiver: [445@999 mouseUp 51989 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorphPlus(640155648)
	Receiver's instance variables: 
		timeStamp: 	51989
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	445@999
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorphPlus(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		anEvent: 	[445@999 mouseUp 51989 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorphPlus(640155648)
	Arguments and temporary variables: 
		anEvent: 	[445@999 mouseUp 51989 nil]
	Receiver's instance variables: 
		bounds: 	400@994 corner: 464@1020
		owner: 	a PluggableThemedPanelMorph(385613824)
		submorphs: 	an Array(an AlignmentMorph(388497408))
		fullBounds: 	400@994 corner: 464@1020
		color: 	Color transparent
		extension: 	a MorphExtension (404226048) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Browse'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#browseWorkingCopy
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasWorkingCopy


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[445@999 mouseUp 51989 nil]
		focusHolder: 	a PluggableButtonMorphPlus(640155648)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	445@1000 corner: 461@1016
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	445@1000 corner: 461@1016
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(685506560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[445@999 445@1000 mouseMove 52194 nil]
		targetOffset: 	45@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 52194 445 1000 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2467@1548
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(244842496) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[445@999 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2467@1548
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(244842496) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
MCMethodDefinition>>initializeWithClassName:classIsMeta:selector:category:timeStamp:source:
MCMethodDefinition class>>className:classIsMeta:selector:category:timeStamp:source:
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopyBrowser>>browseWorkingCopy
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:25:19 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream ' '
		t5: 	22798873
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCMergeRecord>>packageSnapshot
	Receiver: a MCMergeRecord
	Arguments and temporary variables: 

	Receiver's instance variables: 
		version: 	a MCVersion(Handles-JB.1)
		packageSnapshot: 	nil
		ancestorInfo: 	nil
		ancestor: 	nil
		ancestorSnapshot: 	nil
		imagePatch: 	nil
		mergePatch: 	nil


[] in MCVersionMerger>>mergeWithNameLike:
	Receiver: a MCVersionMerger
	Arguments and temporary variables: 
		ea: 	a MCMergeRecord
	Receiver's instance variables: 
		records: 	an OrderedCollection(a MCMergeRecord)
		merger: 	a MCThreeWayMerger


OrderedCollection>>do:
	Receiver: an OrderedCollection(a MCMergeRecord)
	Arguments and temporary variables: 
		aBlock: 	[:ea | merger addBaseSnapshot: ea packageSnapshot]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a MCMergeRecord nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


MCVersionMerger>>mergeWithNameLike:
	Receiver: a MCVersionMerger
	Arguments and temporary variables: 
		baseName: 	'Handles-JB.1'
	Receiver's instance variables: 
		records: 	an OrderedCollection(a MCMergeRecord)
		merger: 	a MCThreeWayMerger


MCVersionMerger class>>mergeVersion:
	Receiver: MCVersionMerger
	Arguments and temporary variables: 
		aVersion: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addVersion:->(MCVersionMerger>>#addVersion: "a ...etc...
		format: 	134
		instanceVariables: 	#('records' 'merger')
		organization: 	('as yet unclassified' addVersion: initialize merge mergeWithName...etc...
		subclasses: 	nil
		name: 	#MCVersionMerger
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Versioning'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersion>>merge
	Receiver: a MCVersion(Handles-JB.1)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		info: 	a MCVersionInfo(Handles-JB.1)
		snapshot: 	a MCSnapshot
		dependencies: 	#()


MCMczReader class(MCVersionReader class)>>mergeVersionStream:
	Receiver: MCMczReader
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
	Receiver's instance variables: 
		superclass: 	MCVersionReader
		methodDict: 	a MethodDictionary(#associate:->(MCMczReader>>#associate: "a Compil...etc...
		format: 	146
		instanceVariables: 	#('zip' 'infoCache')
		organization: 	('as yet unclassified' associate: extractDefinitionsFrom: extract...etc...
		subclasses: 	{MCMcdReader}
		name: 	#MCMczReader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Storing'
		traitComposition: 	nil
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (MCMczReader --- mergeVersionStream:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	MCMczReader
		label: 	'merge version'
		selector: 	#mergeVersionStream:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'merge a package version into the image'
		argumentGetter: 	[:fileList | fileList readOnlyStream]
		buttonLabel: 	'merge'


[] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		stream: 	SimpleServiceEntry: (MCMczReader --- mergeVersionStream:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handl...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[1347@253 dropFilesEvent nil]
		numArgs: 	1
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(745799680) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCMergeRecord>>packageSnapshot
[] in MCVersionMerger>>mergeWithNameLike:
OrderedCollection>>do:
MCVersionMerger>>mergeWithNameLike:
MCVersionMerger class>>mergeVersion:
MCVersion>>merge
MCMczReader class(MCVersionReader class)>>mergeVersionStream:
SimpleServiceEntry>>performServiceFor:
[] in ExternalDropHandler class>>lookupServiceBasedHandler:
ExternalDropHandler>>handle:in:dropEvent:
[] in PasteUpMorph>>dropFiles:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Warning
30 November 2010 5:25:27 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Warning>>defaultAction
	Receiver: Warning: You are about to load new versions of the following packages that have unsaved ch...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'You are about to load new versions of the following packages that...etc...
		tag: 	nil
		signalContext: 	Warning(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	Warning: You are about to load new versions of the following package...etc...
	Receiver's instance variables: 
nil

Warning(Exception)>>signal
	Receiver: Warning: You are about to load new versions of the following packages that have unsaved ch...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'You are about to load new versions of the following packages that...etc...
		tag: 	nil
		signalContext: 	Warning(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


Warning(Exception)>>signal:
	Receiver: Warning: You are about to load new versions of the following packages that have unsaved ch...etc...
	Arguments and temporary variables: 
		signalerText: 	'You are about to load new versions of the following packages tha...etc...
	Receiver's instance variables: 
		messageText: 	'You are about to load new versions of the following packages that...etc...
		tag: 	nil
		signalContext: 	Warning(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


Warning class(Exception class)>>signal:
	Receiver: Warning
	Arguments and temporary variables: 
		signalerText: 	'You are about to load new versions of the following packages tha...etc...
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->(Warning>>#defaultAction "a Comp...etc...
		format: 	140
		instanceVariables: 	nil
		organization: 	('exceptiondescription' defaultAction)

		subclasses: 	{UndeclaredVariableWarning. Deprecation}
		name: 	#Warning
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Exceptions-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersionLoader(Object)>>notify:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'You are about to load new versions of the following packages that hav...etc...
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader>>warnAboutLosingChangesTo:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		versionCollection: 	an OrderedCollection(a MCVersion(Handles-JB.1))
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader>>checkForModifications
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		modifications: 	an OrderedCollection(a MCVersion(Handles-JB.1))
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'Handles-JB.1'
		loader: 	nil
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader class>>loadVersion:
	Receiver: MCVersionLoader
	Arguments and temporary variables: 
		aVersion: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependency:->(MCVersionLoader>>#addDependenc...etc...
		format: 	132
		instanceVariables: 	#('versions')
		organization: 	('*gofer-core-accessing' goferHasVersions goferVersions)
('*metac...etc...
		subclasses: 	nil
		name: 	#MCVersionLoader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Loading'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersion>>load
	Receiver: a MCVersion(Handles-JB.1)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		info: 	a MCVersionInfo(Handles-JB.1)
		snapshot: 	a MCSnapshot
		dependencies: 	#()


MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
	Receiver: MCMczReader
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		directory: 	UnixFileDirectory on '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle...etc...
		version: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	MCVersionReader
		methodDict: 	a MethodDictionary(#associate:->(MCMczReader>>#associate: "a Compil...etc...
		format: 	146
		instanceVariables: 	#('zip' 'infoCache')
		organization: 	('as yet unclassified' associate: extractDefinitionsFrom: extract...etc...
		subclasses: 	{MCMcdReader}
		name: 	#MCMczReader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Storing'
		traitComposition: 	nil
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	MCMczReader
		label: 	'load version'
		selector: 	#loadVersionStream:fromDirectory:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'load a package version'
		argumentGetter: 	[:fileList | {fileList readOnlyStream. fileList directory}]
		buttonLabel: 	'load'


[] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		stream: 	SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handl...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[1500@103 dropFilesEvent nil]
		numArgs: 	1
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(579600384) a Plugg...etc...
		fullBounds: 	0@0 corner: 2219@1466
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>dropFiles:
		startpc: 	82
		numArgs: 	0


PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(579600384) a Plugg...etc...
		fullBounds: 	0@0 corner: 2219@1466
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>handleDropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[1500@103 dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(579600384) a Plugg...etc...
		fullBounds: 	0@0 corner: 2219@1466
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


DropFilesEvent>>sentTo:
	Receiver: [1500@103 dropFilesEvent nil]
	Arguments and temporary variables: 
		anObject: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		timeStamp: 	nil
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		position: 	1500@103
		contents: 	1
		wasHandled: 	true


PasteUpMorph(Morph)>>handleEvent:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[1500@103 dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(579600384) a Plugg...etc...
		fullBounds: 	0@0 corner: 2219@1466
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[1500@103 dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
		localEvt: 	[1500@103 dropFilesEvent nil]
		index: 	17
		child: 	an AlphaImageMorph(686292992)
		morphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(579600384) a Pluggabl...etc...
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1500@103 dropFilesEvent nil]
		t2: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:


PasteUpMorph(Morph)>>processEvent:using:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[1500@103 dropFilesEvent nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(579600384) a Plugg...etc...
		fullBounds: 	0@0 corner: 2219@1466
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph>>processEvent:using:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[1500@103 dropFilesEvent nil]
		defaultDispatcher: 	a MorphicEventDispatcher
		priorWorld: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(579600384) a Plugg...etc...
		fullBounds: 	0@0 corner: 2219@1466
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>processEvent:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[1500@103 dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(579600384) a Plugg...etc...
		fullBounds: 	0@0 corner: 2219@1466
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1500@103 dropFilesEvent nil]
		focusHolder: 	nil
		aBlock: 	[]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1511@45 corner: 1527@61
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1511@45 corner: 1527@61
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorphWithShout(216006656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1511@45 mouseUp 21065 nil]
		targetOffset: 	32@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 21065 1511 45 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>sendEvent:focus:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1500@103 dropFilesEvent nil]
		focusHolder: 	nil
	Receiver's instance variables: 
		bounds: 	1511@45 corner: 1527@61
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1511@45 corner: 1527@61
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorphWithShout(216006656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1511@45 mouseUp 21065 nil]
		targetOffset: 	32@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 21065 1511 45 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1500@103 dropFilesEvent nil]
		t2: 	[1500@103 dropFilesEvent nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	1511@45 corner: 1527@61
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1511@45 corner: 1527@61
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorphWithShout(216006656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1511@45 mouseUp 21065 nil]
		targetOffset: 	32@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 21065 1511 45 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1500@103 dropFilesEvent nil]
		t2: 	#(3 19736 4 1500 103 0 1 1)
		t3: 	3
		t4: 	false
	Receiver's instance variables: 
		bounds: 	1511@45 corner: 1527@61
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1511@45 corner: 1527@61
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorphWithShout(216006656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1511@45 mouseUp 21065 nil]
		targetOffset: 	32@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 21065 1511 45 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> an OBTextMorphWithShout(21600665...etc...
		lastStepTime: 	21127
		lastStepMessage: 	nil
		lastCycleTime: 	21071
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	21127
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> an OBTextMorphWithShout(21600665...etc...
		lastStepTime: 	21127
		lastStepMessage: 	nil
		lastCycleTime: 	21071
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	21127
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> an OBTextMorphWithShout(21600665...etc...
		lastStepTime: 	21127
		lastStepMessage: 	nil
		lastCycleTime: 	21071
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	21127
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2219@1466
		canvas: 	a FormCanvas on: DisplayScreen(2219x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> an OBTextMorphWithShout(21600665...etc...
		lastStepTime: 	21127
		lastStepMessage: 	nil
		lastCycleTime: 	21071
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	21127
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(579600384) a Plugg...etc...
		fullBounds: 	0@0 corner: 2219@1466
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(6236405...etc...
		format: 	168
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'previous...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
Warning>>defaultAction
UndefinedObject>>handleSignal:
Warning(Exception)>>signal
Warning(Exception)>>signal:
Warning class(Exception class)>>signal:
MCVersionLoader(Object)>>notify:
MCVersionLoader>>warnAboutLosingChangesTo:
MCVersionLoader>>checkForModifications
MCVersionLoader>>loadWithNameLike:
MCVersionLoader>>load
MCVersionLoader class>>loadVersion:
MCVersion>>load
MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
SimpleServiceEntry>>performServiceFor:
[] in ExternalDropHandler class>>lookupServiceBasedHandler:
ExternalDropHandler>>handle:in:dropEvent:
[] in PasteUpMorph>>dropFiles:
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:25:30 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream ' '
		t5: 	22798873
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCPackageLoader>>updatePackage:withSnapshot:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		aPackage: 	a MCPackage(Handles)
		aSnapshot: 	a MCSnapshot
		patch: 	nil
		packageSnap: 	nil
	Receiver's instance variables: 
		requirements: 	nil
		unloadableDefinitions: 	nil
		obsoletions: 	a Dictionary()
		additions: 	an OrderedCollection()
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	nil
		methodAdditions: 	an OrderedCollection()


[] in MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		loader: 	a MCVersion(Handles-JB.1)
		ea: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


OrderedCollection>>do:
	Receiver: an OrderedCollection(a MCVersion(Handles-JB.1))
	Arguments and temporary variables: 
		aBlock: 	[:ea | ea canOptimizeLoading
		ifTrue: [ea patch applyTo: loader]
		ifF...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a MCVersion(Handles-JB.1) nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'Handles-JB.1'
		loader: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader class>>loadVersion:
	Receiver: MCVersionLoader
	Arguments and temporary variables: 
		aVersion: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependency:->(MCVersionLoader>>#addDependenc...etc...
		format: 	132
		instanceVariables: 	#('versions')
		organization: 	('*gofer-core-accessing' goferHasVersions goferVersions)
('*metac...etc...
		subclasses: 	nil
		name: 	#MCVersionLoader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Loading'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersion>>load
	Receiver: a MCVersion(Handles-JB.1)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		info: 	a MCVersionInfo(Handles-JB.1)
		snapshot: 	a MCSnapshot
		dependencies: 	#()


MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
	Receiver: MCMczReader
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		directory: 	UnixFileDirectory on '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle...etc...
		version: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	MCVersionReader
		methodDict: 	a MethodDictionary(#associate:->(MCMczReader>>#associate: "a Compil...etc...
		format: 	146
		instanceVariables: 	#('zip' 'infoCache')
		organization: 	('as yet unclassified' associate: extractDefinitionsFrom: extract...etc...
		subclasses: 	{MCMcdReader}
		name: 	#MCMczReader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Storing'
		traitComposition: 	nil
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	MCMczReader
		label: 	'load version'
		selector: 	#loadVersionStream:fromDirectory:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'load a package version'
		argumentGetter: 	[:fileList | {fileList readOnlyStream. fileList directory}]
		buttonLabel: 	'load'


[] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		stream: 	SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handl...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[1500@103 dropFilesEvent nil]
		numArgs: 	1
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCPackageLoader>>updatePackage:withSnapshot:
[] in MCVersionLoader>>loadWithNameLike:
OrderedCollection>>do:
MCVersionLoader>>loadWithNameLike:
MCVersionLoader>>load
MCVersionLoader class>>loadVersion:
MCVersion>>load
MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
SimpleServiceEntry>>performServiceFor:
[] in ExternalDropHandler class>>lookupServiceBasedHandler:
ExternalDropHandler>>handle:in:dropEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[] in PasteUpMorph>>dropFiles:
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:25:32 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>nextPut:
	Receiver: a WriteStream '  '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	2
		readLimit: 	2
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream '  '
		t5: 	22798872
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCPackageLoader>>updatePackage:withSnapshot:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		aPackage: 	a MCPackage(Handles)
		aSnapshot: 	a MCSnapshot
		patch: 	nil
		packageSnap: 	nil
	Receiver's instance variables: 
		requirements: 	nil
		unloadableDefinitions: 	nil
		obsoletions: 	a Dictionary()
		additions: 	an OrderedCollection()
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	nil
		methodAdditions: 	an OrderedCollection()


[] in MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		loader: 	a MCVersion(Handles-JB.1)
		ea: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


OrderedCollection>>do:
	Receiver: an OrderedCollection(a MCVersion(Handles-JB.1))
	Arguments and temporary variables: 
		aBlock: 	[:ea | ea canOptimizeLoading
		ifTrue: [ea patch applyTo: loader]
		ifF...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a MCVersion(Handles-JB.1) nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'Handles-JB.1'
		loader: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader class>>loadVersion:
	Receiver: MCVersionLoader
	Arguments and temporary variables: 
		aVersion: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependency:->(MCVersionLoader>>#addDependenc...etc...
		format: 	132
		instanceVariables: 	#('versions')
		organization: 	('*gofer-core-accessing' goferHasVersions goferVersions)
('*metac...etc...
		subclasses: 	nil
		name: 	#MCVersionLoader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Loading'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersion>>load
	Receiver: a MCVersion(Handles-JB.1)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		info: 	a MCVersionInfo(Handles-JB.1)
		snapshot: 	a MCSnapshot
		dependencies: 	#()


MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
	Receiver: MCMczReader
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		directory: 	UnixFileDirectory on '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle...etc...
		version: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	MCVersionReader
		methodDict: 	a MethodDictionary(#associate:->(MCMczReader>>#associate: "a Compil...etc...
		format: 	146
		instanceVariables: 	#('zip' 'infoCache')
		organization: 	('as yet unclassified' associate: extractDefinitionsFrom: extract...etc...
		subclasses: 	{MCMcdReader}
		name: 	#MCMczReader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Storing'
		traitComposition: 	nil
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	MCMczReader
		label: 	'load version'
		selector: 	#loadVersionStream:fromDirectory:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'load a package version'
		argumentGetter: 	[:fileList | {fileList readOnlyStream. fileList directory}]
		buttonLabel: 	'load'


[] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		stream: 	SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handl...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[1500@103 dropFilesEvent nil]
		numArgs: 	1
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(745799680) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCPackageLoader>>updatePackage:withSnapshot:
[] in MCVersionLoader>>loadWithNameLike:
OrderedCollection>>do:
MCVersionLoader>>loadWithNameLike:
MCVersionLoader>>load
MCVersionLoader class>>loadVersion:
MCVersion>>load
MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
SimpleServiceEntry>>performServiceFor:
[] in ExternalDropHandler class>>lookupServiceBasedHandler:
ExternalDropHandler>>handle:in:dropEvent:
[] in PasteUpMorph>>dropFiles:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:25:33 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	3
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>nextPut:
	Receiver: a WriteStream '   '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	3
		readLimit: 	3
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream '   '
		t5: 	22798871
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCPackageLoader>>updatePackage:withSnapshot:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		aPackage: 	a MCPackage(Handles)
		aSnapshot: 	a MCSnapshot
		patch: 	nil
		packageSnap: 	nil
	Receiver's instance variables: 
		requirements: 	nil
		unloadableDefinitions: 	nil
		obsoletions: 	a Dictionary()
		additions: 	an OrderedCollection()
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	nil
		methodAdditions: 	an OrderedCollection()


[] in MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		loader: 	a MCVersion(Handles-JB.1)
		ea: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


OrderedCollection>>do:
	Receiver: an OrderedCollection(a MCVersion(Handles-JB.1))
	Arguments and temporary variables: 
		aBlock: 	[:ea | ea canOptimizeLoading
		ifTrue: [ea patch applyTo: loader]
		ifF...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a MCVersion(Handles-JB.1) nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'Handles-JB.1'
		loader: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader class>>loadVersion:
	Receiver: MCVersionLoader
	Arguments and temporary variables: 
		aVersion: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependency:->(MCVersionLoader>>#addDependenc...etc...
		format: 	132
		instanceVariables: 	#('versions')
		organization: 	('*gofer-core-accessing' goferHasVersions goferVersions)
('*metac...etc...
		subclasses: 	nil
		name: 	#MCVersionLoader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Loading'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersion>>load
	Receiver: a MCVersion(Handles-JB.1)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		info: 	a MCVersionInfo(Handles-JB.1)
		snapshot: 	a MCSnapshot
		dependencies: 	#()


MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
	Receiver: MCMczReader
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		directory: 	UnixFileDirectory on '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle...etc...
		version: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	MCVersionReader
		methodDict: 	a MethodDictionary(#associate:->(MCMczReader>>#associate: "a Compil...etc...
		format: 	146
		instanceVariables: 	#('zip' 'infoCache')
		organization: 	('as yet unclassified' associate: extractDefinitionsFrom: extract...etc...
		subclasses: 	{MCMcdReader}
		name: 	#MCMczReader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Storing'
		traitComposition: 	nil
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	MCMczReader
		label: 	'load version'
		selector: 	#loadVersionStream:fromDirectory:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'load a package version'
		argumentGetter: 	[:fileList | {fileList readOnlyStream. fileList directory}]
		buttonLabel: 	'load'


[] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		stream: 	SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handl...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[1500@103 dropFilesEvent nil]
		numArgs: 	1
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(745799680) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCPackageLoader>>updatePackage:withSnapshot:
[] in MCVersionLoader>>loadWithNameLike:
OrderedCollection>>do:
MCVersionLoader>>loadWithNameLike:
MCVersionLoader>>load
MCVersionLoader class>>loadVersion:
MCVersion>>load
MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
SimpleServiceEntry>>performServiceFor:
[] in ExternalDropHandler class>>lookupServiceBasedHandler:
ExternalDropHandler>>handle:in:dropEvent:
[] in PasteUpMorph>>dropFiles:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:25:34 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	4
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>nextPut:
	Receiver: a WriteStream '    '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	4
		readLimit: 	4
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream '    '
		t5: 	22798870
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCPackageLoader>>updatePackage:withSnapshot:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		aPackage: 	a MCPackage(Handles)
		aSnapshot: 	a MCSnapshot
		patch: 	nil
		packageSnap: 	nil
	Receiver's instance variables: 
		requirements: 	nil
		unloadableDefinitions: 	nil
		obsoletions: 	a Dictionary()
		additions: 	an OrderedCollection()
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	nil
		methodAdditions: 	an OrderedCollection()


[] in MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		loader: 	a MCVersion(Handles-JB.1)
		ea: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


OrderedCollection>>do:
	Receiver: an OrderedCollection(a MCVersion(Handles-JB.1))
	Arguments and temporary variables: 
		aBlock: 	[:ea | ea canOptimizeLoading
		ifTrue: [ea patch applyTo: loader]
		ifF...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a MCVersion(Handles-JB.1) nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'Handles-JB.1'
		loader: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader class>>loadVersion:
	Receiver: MCVersionLoader
	Arguments and temporary variables: 
		aVersion: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependency:->(MCVersionLoader>>#addDependenc...etc...
		format: 	132
		instanceVariables: 	#('versions')
		organization: 	('*gofer-core-accessing' goferHasVersions goferVersions)
('*metac...etc...
		subclasses: 	nil
		name: 	#MCVersionLoader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Loading'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersion>>load
	Receiver: a MCVersion(Handles-JB.1)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		info: 	a MCVersionInfo(Handles-JB.1)
		snapshot: 	a MCSnapshot
		dependencies: 	#()


MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
	Receiver: MCMczReader
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		directory: 	UnixFileDirectory on '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle...etc...
		version: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	MCVersionReader
		methodDict: 	a MethodDictionary(#associate:->(MCMczReader>>#associate: "a Compil...etc...
		format: 	146
		instanceVariables: 	#('zip' 'infoCache')
		organization: 	('as yet unclassified' associate: extractDefinitionsFrom: extract...etc...
		subclasses: 	{MCMcdReader}
		name: 	#MCMczReader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Storing'
		traitComposition: 	nil
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	MCMczReader
		label: 	'load version'
		selector: 	#loadVersionStream:fromDirectory:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'load a package version'
		argumentGetter: 	[:fileList | {fileList readOnlyStream. fileList directory}]
		buttonLabel: 	'load'


[] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		stream: 	SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handl...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[1500@103 dropFilesEvent nil]
		numArgs: 	1
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(745799680) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCPackageLoader>>updatePackage:withSnapshot:
[] in MCVersionLoader>>loadWithNameLike:
OrderedCollection>>do:
MCVersionLoader>>loadWithNameLike:
MCVersionLoader>>load
MCVersionLoader class>>loadVersion:
MCVersion>>load
MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
SimpleServiceEntry>>performServiceFor:
[] in ExternalDropHandler class>>lookupServiceBasedHandler:
ExternalDropHandler>>handle:in:dropEvent:
[] in PasteUpMorph>>dropFiles:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 November 2010 5:25:35 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	5
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>nextPut:
	Receiver: a WriteStream '     '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	5
		readLimit: 	5
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream '     '
		t5: 	22798869
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'Handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(Handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(Handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'Handles'


MCPackageLoader>>updatePackage:withSnapshot:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		aPackage: 	a MCPackage(Handles)
		aSnapshot: 	a MCSnapshot
		patch: 	nil
		packageSnap: 	nil
	Receiver's instance variables: 
		requirements: 	nil
		unloadableDefinitions: 	nil
		obsoletions: 	a Dictionary()
		additions: 	an OrderedCollection()
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	nil
		methodAdditions: 	an OrderedCollection()


[] in MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		loader: 	a MCVersion(Handles-JB.1)
		ea: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


OrderedCollection>>do:
	Receiver: an OrderedCollection(a MCVersion(Handles-JB.1))
	Arguments and temporary variables: 
		aBlock: 	[:ea | ea canOptimizeLoading
		ifTrue: [ea patch applyTo: loader]
		ifF...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a MCVersion(Handles-JB.1) nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'Handles-JB.1'
		loader: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-JB.1))


MCVersionLoader class>>loadVersion:
	Receiver: MCVersionLoader
	Arguments and temporary variables: 
		aVersion: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependency:->(MCVersionLoader>>#addDependenc...etc...
		format: 	132
		instanceVariables: 	#('versions')
		organization: 	('*gofer-core-accessing' goferHasVersions goferVersions)
('*metac...etc...
		subclasses: 	nil
		name: 	#MCVersionLoader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Loading'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersion>>load
	Receiver: a MCVersion(Handles-JB.1)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		info: 	a MCVersionInfo(Handles-JB.1)
		snapshot: 	a MCSnapshot
		dependencies: 	#()


MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
	Receiver: MCMczReader
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		directory: 	UnixFileDirectory on '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle...etc...
		version: 	a MCVersion(Handles-JB.1)
	Receiver's instance variables: 
		superclass: 	MCVersionReader
		methodDict: 	a MethodDictionary(#associate:->(MCMczReader>>#associate: "a Compil...etc...
		format: 	146
		instanceVariables: 	#('zip' 'infoCache')
		organization: 	('as yet unclassified' associate: extractDefinitionsFrom: extract...etc...
		subclasses: 	{MCMcdReader}
		name: 	#MCMczReader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Storing'
		traitComposition: 	nil
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	MCMczReader
		label: 	'load version'
		selector: 	#loadVersionStream:fromDirectory:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'load a package version'
		argumentGetter: 	[:fileList | {fileList readOnlyStream. fileList directory}]
		buttonLabel: 	'load'


[] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle/Ha...etc...
		stream: 	SimpleServiceEntry: (MCMczReader --- loadVersionStream:fromDirectory:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handl...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[1500@103 dropFilesEvent nil]
		numArgs: 	1
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2219@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(745799680) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCPackageLoader>>updatePackage:withSnapshot:
[] in MCVersionLoader>>loadWithNameLike:
OrderedCollection>>do:
MCVersionLoader>>loadWithNameLike:
MCVersionLoader>>load
MCVersionLoader class>>loadVersion:
MCVersion>>load
MCMczReader class(MCVersionReader class)>>loadVersionStream:fromDirectory:
SimpleServiceEntry>>performServiceFor:
[] in ExternalDropHandler class>>lookupServiceBasedHandler:
ExternalDropHandler>>handle:in:dropEvent:
[] in PasteUpMorph>>dropFiles:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:21:27 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")
	Arguments and temporary variables: 
		preamble: 	nil
		stamp: 	nil
		tokens: 	nil
		tokenCount: 	nil
		file: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Ha...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(411041792)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		nameString: 	'handles-JB.1'
		messageString: 	'empty log message'
		info: 	a MCVersionInfo(handles-JB.1)
		deps: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		pair: 	#('handles-JB.1' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package-cache)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(485228544)
		m: 	[605@356 mouseUp 32771 nil]
	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	5
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		evt: 	[605@356 mouseUp 32771 nil]
		all: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(...etc...
	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		evt: 	[605@356 mouseUp 32771 nil]
	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		anEvent: 	[605@356 mouseUp 32771 nil]
	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:22:11 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream ' '
		t5: 	22798873
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.2'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.2)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.2' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package-cache)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1071@436 mouseUp 8606 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1071@436 mouseUp 8606 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1071@436 mouseUp 8606 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1071@436 mouseUp 8606 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:22:13 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	2
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>nextPut:
	Receiver: a WriteStream '  '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	2
		readLimit: 	2
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream '  '
		t5: 	22798872
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.2'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.2)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.2' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package-cache)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1071@436 mouseUp 8606 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1071@436 mouseUp 8606 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1071@436 mouseUp 8606 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1071@436 mouseUp 8606 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


MouseButtonEvent>>sentTo:
	Receiver: [1071@436 mouseUp 8606 nil]
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
	Receiver's instance variables: 
		timeStamp: 	8606
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1071@436
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:22:14 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	3
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>nextPut:
	Receiver: a WriteStream '   '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	3
		readLimit: 	3
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream '   '
		t5: 	22798871
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.2'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.2)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.2' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package-cache)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1071@436 mouseUp 8606 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1071@436 mouseUp 8606 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1071@436 mouseUp 8606 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1071@436 mouseUp 8606 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


MouseButtonEvent>>sentTo:
	Receiver: [1071@436 mouseUp 8606 nil]
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
	Receiver's instance variables: 
		timeStamp: 	8606
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1071@436
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:22:26 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22798873
		t3: 	a WriteStream ' '
		t5: 	22798873
		t4: 	nil
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

CompiledMethod>>timeStamp
	Receiver: (Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(Handle>>#removeSelfWrapping "a CompiledMethod(11534336)")

MethodReference>>timeStamp
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference Handle >> #removeSelfWrapping
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference Handle >> #removeSelfWrapping
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#Handle
		classIsMeta: 	false
		methodSymbol: 	#removeSelfWrapping
		stringVersion: 	'Handle removeSelfWrapping'
		category: 	#option
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference Handle >> #removeSelfWrapping
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.3'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.3)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	3
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.3' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	3
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1073@432 mouseUp 26736 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1073@432 mouseUp 26736 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1073@432 mouseUp 26736 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1073@432 mouseUp 26736 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:23:43 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (ClassHandleTest>>#testCompileAll "a CompiledMethod(812646400)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	20565243
		t3: 	a WriteStream ' '
		t5: 	20565243
		t4: 	nil
	Receiver's instance variables: 
(ClassHandleTest>>#testCompileAll "a CompiledMethod(812646400)")

CompiledMethod>>timeStamp
	Receiver: (ClassHandleTest>>#testCompileAll "a CompiledMethod(812646400)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(ClassHandleTest>>#testCompileAll "a CompiledMethod(812646400)")

MethodReference>>timeStamp
	Receiver: a MethodReference ClassHandleTest >> #testCompileAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#ClassHandleTest
		classIsMeta: 	false
		methodSymbol: 	#testCompileAll
		stringVersion: 	'ClassHandleTest testCompileAll'
		category: 	#'testing - compiling'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference ClassHandleTest >> #testCompileAll
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference ClassHandleTest >> #testCompileAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#ClassHandleTest
		classIsMeta: 	false
		methodSymbol: 	#testCompileAll
		stringVersion: 	'ClassHandleTest testCompileAll'
		category: 	#'testing - compiling'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference ClassHandleTest >> #testCompileAll
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.4'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.4)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	4
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.4' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	4
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1053@437 mouseUp 104207 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1053@437 mouseUp 104207 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1053@437 mouseUp 104207 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1053@437 mouseUp 104207 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:24:21 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (RewriteMethodWithPropagationHandle>>#propagate:through: "a CompiledMethod(185860096)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	14246564
		t3: 	a WriteStream ' '
		t5: 	14246564
		t4: 	nil
	Receiver's instance variables: 
(RewriteMethodWithPropagationHandle>>#propagate:through: "a CompiledMethod(185860096)")

CompiledMethod>>timeStamp
	Receiver: (RewriteMethodWithPropagationHandle>>#propagate:through: "a CompiledMethod(185860096)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(RewriteMethodWithPropagationHandle>>#propagate:through: "a CompiledMethod(185860096)")

MethodReference>>timeStamp
	Receiver: a MethodReference RewriteMethodWithPropagationHandle >> #propagate:through:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#RewriteMethodWithPropagationHandle
		classIsMeta: 	false
		methodSymbol: 	#propagate:through:
		stringVersion: 	'RewriteMethodWithPropagationHandle propagate:through:'
		category: 	#Private
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference RewriteMethodWithPropagationHandle >> #propagate:through:...etc...
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary((A>>#change "...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference RewriteMethodWithPropagationHandle >> #propagate:through:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#RewriteMethodWithPropagationHandle
		classIsMeta: 	false
		methodSymbol: 	#propagate:through:
		stringVersion: 	'RewriteMethodWithPropagationHandle propagate:through:'
		category: 	#Private
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference RewriteMethodWithPropagationHandle >> #propagate:through:...etc...
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.5'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.5)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	5
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.5' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	5
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1073@429 mouseUp 142670 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1073@429 mouseUp 142670 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1073@429 mouseUp 142670 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1073@429 mouseUp 142670 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:25:17 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (MetaHandle>>#isMeta "a CompiledMethod(687865856)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22843792
		t3: 	a WriteStream ' '
		t5: 	22843792
		t4: 	nil
	Receiver's instance variables: 
(MetaHandle>>#isMeta "a CompiledMethod(687865856)")

CompiledMethod>>timeStamp
	Receiver: (MetaHandle>>#isMeta "a CompiledMethod(687865856)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(MetaHandle>>#isMeta "a CompiledMethod(687865856)")

MethodReference>>timeStamp
	Receiver: a MethodReference MetaHandle >> #isMeta
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaHandle
		classIsMeta: 	false
		methodSymbol: 	#isMeta
		stringVersion: 	'MetaHandle isMeta'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference MetaHandle >> #isMeta
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 104) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference MetaHandle >> #isMeta
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#MetaHandle
		classIsMeta: 	false
		methodSymbol: 	#isMeta
		stringVersion: 	'MetaHandle isMeta'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference MetaHandle >> #isMeta
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.6'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.6)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	6
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.6' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	6
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1075@441 mouseUp 198928 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1075@441 mouseUp 198928 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1075@441 mouseUp 198928 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1075@441 mouseUp 198928 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:25:43 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (CapabilityHandle>>#copy:withCapabilities: "a CompiledMethod(446431232)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22797475
		t3: 	a WriteStream ' '
		t5: 	22797475
		t4: 	nil
	Receiver's instance variables: 
(CapabilityHandle>>#copy:withCapabilities: "a CompiledMethod(446431232)")

CompiledMethod>>timeStamp
	Receiver: (CapabilityHandle>>#copy:withCapabilities: "a CompiledMethod(446431232)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(CapabilityHandle>>#copy:withCapabilities: "a CompiledMethod(446431232)")

MethodReference>>timeStamp
	Receiver: a MethodReference CapabilityHandle >> #copy:withCapabilities:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#CapabilityHandle
		classIsMeta: 	false
		methodSymbol: 	#copy:withCapabilities:
		stringVersion: 	'CapabilityHandle copy:withCapabilities:'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference CapabilityHandle >> #copy:withCapabilities:
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 107) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference CapabilityHandle >> #copy:withCapabilities:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#CapabilityHandle
		classIsMeta: 	false
		methodSymbol: 	#copy:withCapabilities:
		stringVersion: 	'CapabilityHandle copy:withCapabilities:'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference CapabilityHandle >> #copy:withCapabilities:
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.7'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.7)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	7
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.7' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	7
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1076@437 mouseUp 224449 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1076@437 mouseUp 224449 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1076@437 mouseUp 224449 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1076@437 mouseUp 224449 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:26:18 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (RewriteMethodHandle>>#rewrite:withRule: "a CompiledMethod(889454592)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	14000083
		t3: 	a WriteStream ' '
		t5: 	14000083
		t4: 	nil
	Receiver's instance variables: 
(RewriteMethodHandle>>#rewrite:withRule: "a CompiledMethod(889454592)")

CompiledMethod>>timeStamp
	Receiver: (RewriteMethodHandle>>#rewrite:withRule: "a CompiledMethod(889454592)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(RewriteMethodHandle>>#rewrite:withRule: "a CompiledMethod(889454592)")

MethodReference>>timeStamp
	Receiver: a MethodReference RewriteMethodHandle >> #rewrite:withRule:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#RewriteMethodHandle
		classIsMeta: 	false
		methodSymbol: 	#rewrite:withRule:
		stringVersion: 	'RewriteMethodHandle rewrite:withRule:'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference RewriteMethodHandle >> #rewrite:withRule:
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 109) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference RewriteMethodHandle >> #rewrite:withRule:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#RewriteMethodHandle
		classIsMeta: 	false
		methodSymbol: 	#rewrite:withRule:
		stringVersion: 	'RewriteMethodHandle rewrite:withRule:'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference RewriteMethodHandle >> #rewrite:withRule:
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.8'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.8)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	8
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.8' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	8
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1075@432 mouseUp 258958 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1075@432 mouseUp 258958 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1075@432 mouseUp 258958 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1075@432 mouseUp 258958 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:27:16 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (HandleCapabilitiesTest>>#testCapabilitiesStoreAndReturnSelf "a CompiledMethod(895483904)"...etc...
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22817926
		t3: 	a WriteStream ' '
		t5: 	22817926
		t4: 	nil
	Receiver's instance variables: 
(HandleCapabilitiesTest>>#testCapabilitiesStoreAndReturnSelf "a CompiledMethod(895483904)"...etc...

CompiledMethod>>timeStamp
	Receiver: (HandleCapabilitiesTest>>#testCapabilitiesStoreAndReturnSelf "a CompiledMethod(895483904)"...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(HandleCapabilitiesTest>>#testCapabilitiesStoreAndReturnSelf "a CompiledMethod(895483904)"...etc...

MethodReference>>timeStamp
	Receiver: a MethodReference HandleCapabilitiesTest >> #testCapabilitiesStoreAndReturnSelf
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#HandleCapabilitiesTest
		classIsMeta: 	false
		methodSymbol: 	#testCapabilitiesStoreAndReturnSelf
		stringVersion: 	'HandleCapabilitiesTest testCapabilitiesStoreAndReturnSelf'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference HandleCapabilitiesTest >> #testCapabilitiesStoreAndReturn...etc...
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 113) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference HandleCapabilitiesTest >> #testCapabilitiesStoreAndReturnSelf
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#HandleCapabilitiesTest
		classIsMeta: 	false
		methodSymbol: 	#testCapabilitiesStoreAndReturnSelf
		stringVersion: 	'HandleCapabilitiesTest testCapabilitiesStoreAndReturnSelf'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference HandleCapabilitiesTest >> #testCapabilitiesStoreAndReturn...etc...
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.9'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.9)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	9
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.9' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	9
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1062@435 mouseUp 317700 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1062@435 mouseUp 317700 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1062@435 mouseUp 317700 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1062@435 mouseUp 317700 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:28:17 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (CapabilityTestClass>>#takeCareAboutSelf "a CompiledMethod(193724416)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22813350
		t3: 	a WriteStream ' '
		t5: 	22813350
		t4: 	nil
	Receiver's instance variables: 
(CapabilityTestClass>>#takeCareAboutSelf "a CompiledMethod(193724416)")

CompiledMethod>>timeStamp
	Receiver: (CapabilityTestClass>>#takeCareAboutSelf "a CompiledMethod(193724416)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(CapabilityTestClass>>#takeCareAboutSelf "a CompiledMethod(193724416)")

MethodReference>>timeStamp
	Receiver: a MethodReference CapabilityTestClass >> #takeCareAboutSelf
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#CapabilityTestClass
		classIsMeta: 	false
		methodSymbol: 	#takeCareAboutSelf
		stringVersion: 	'CapabilityTestClass takeCareAboutSelf'
		category: 	#public
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference CapabilityTestClass >> #takeCareAboutSelf
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 136) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference CapabilityTestClass >> #takeCareAboutSelf
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#CapabilityTestClass
		classIsMeta: 	false
		methodSymbol: 	#takeCareAboutSelf
		stringVersion: 	'CapabilityTestClass takeCareAboutSelf'
		category: 	#public
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference CapabilityTestClass >> #takeCareAboutSelf
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.10'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.10)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	10
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.10' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	10
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1059@433 mouseUp 374864 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1059@433 mouseUp 374864 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1059@433 mouseUp 374864 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1059@433 mouseUp 374864 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
2 December 2010 2:29:30 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

UndefinedObject(Object)>>halt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

[] in [] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each2: 	(A>>#var1 "a CompiledMethod(60030976)")
	Receiver's instance variables: 
nil

MethodDictionary>>valuesDo:
	Receiver: a MethodDictionary(#change->(A>>#change "a CompiledMethod(305135616)") #initialize->(A>>#i...etc...
	Arguments and temporary variables: 
		t1: 	[:each2 | self halt]
		t2: 	(A>>#var1 "a CompiledMethod(60030976)")
		t3: 	1
		t3LimiT: 	32
	Receiver's instance variables: 
		tally: 	11
		array: 	#((A>>#var1 "a CompiledMethod(60030976)") (A>>#self "a CompiledMethod(79...etc...


MethodDictionary>>do:
	Receiver: a MethodDictionary(#change->(A>>#change "a CompiledMethod(305135616)") #initialize->(A>>#i...etc...
	Arguments and temporary variables: 
		t1: 	[:each2 | self halt]
	Receiver's instance variables: 
		tally: 	11
		array: 	#((A>>#var1 "a CompiledMethod(60030976)") (A>>#self "a CompiledMethod(79...etc...


[] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each: 	A
	Receiver's instance variables: 
nil

OrderedCollection>>do:
	Receiver: an OrderedCollection(A AA AbstractMirrorHandle B CapabilityHandle CapabilityTestClass Clas...etc...
	Arguments and temporary variables: 
		t1: 	[:each | each methodDict
		do: [:each2 | self halt]]
		t2: 	1
	Receiver's instance variables: 
		array: 	{A. AA. AbstractMirrorHandle. B. CapabilityHandle. CapabilityTestClass. ...etc...
		firstIndex: 	1
		lastIndex: 	40


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '((PackageInfo named: ''Handles'') classes) do:[:eac...etc...
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 99 and character Character cr and rectan...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(81 to: 80)
		pivotBlock: 	a CharacterBlock with index 99 and character Character cr and recta...etc...
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 453551)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 453551)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 453551)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


[] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 453551)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: DEVToolSet
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#DEVToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ImageForDevelopers
		traitComposition: 	{}
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet NewInspectorToolSet DEV...etc...
		default: 	DEVToolSet


TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 453551)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a PluggableShoutMorph(193724416)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 453551)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 453551)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		t1: 	a TextMorphForShout(1038352384)
	Receiver's instance variables: 
		timeStamp: 	453035
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-193@ -49
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForShout(Morph)>>handleEvent:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 453551)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


TextMorphForShout(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 453551)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a TextMorphForShout(1038352384)
		t5: 	#(nil)
	Receiver's instance variables: 
		bounds: 	650@91 corner: 666@107
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	650@91 corner: 666@107
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591659008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[651@91 650@91 mouseMove 452324 nil]
		targetOffset: 	202@34
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 452324 650 91 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(681574400) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(681574400) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	650@91 corner: 666@107
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	650@91 corner: 666@107
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591659008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[651@91 650@91 mouseMove 452324 nil]
		targetOffset: 	202@34
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 452324 650 91 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	650@91 corner: 666@107
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	650@91 corner: 666@107
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591659008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[651@91 650@91 mouseMove 452324 nil]
		targetOffset: 	202@34
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 452324 650 91 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	650@91 corner: 666@107
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	650@91 corner: 666@107
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591659008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[651@91 650@91 mouseMove 452324 nil]
		targetOffset: 	202@34
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 452324 650 91 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>halt
[] in [] in UndefinedObject>>DoIt
MethodDictionary>>valuesDo:
MethodDictionary>>do:
[] in UndefinedObject>>DoIt
OrderedCollection>>do:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: subscript is out of bounds: 6
2 December 2010 2:30:21 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

Array(Object)>>error:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	'subscript is out of bounds: 6'
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>at:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
		t3: 	true
		t4: 	nil
		t5: 	1
		t6: 	6
		t7: 	#'as yet unclassified'
		t8: 	nil
		t8LimiT: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
		t3: 	true
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
		t3: 	true
		t4: 	nil
		t5: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


ClassOrganizer(Categorizer)>>classify:under:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	#toto1
		t3: 	#'as yet unclassified'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	(B>>#toto1 "a CompiledMethod(705953792)")
		t3: 	#'as yet unclassified'
		t4: 	nil
		t5: 	(B>>#toto1 "a CompiledMethod(392691712)")
		t6: 	nil
		t7: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	#'as yet unclassified'
		t3: 	'JB 12/2/2010 14:30'
		t4: 	nil
		t5: 	true
		t6: 	a CompiledMethodWithNode
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	#'as yet unclassified'
		t3: 	'JB 12/2/2010 14:30'
		t4: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	#'as yet unclassified'
		t3: 	nil
		t4: 	'JB 12/2/2010 14:30'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(Behavior)>>compile:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in [] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each: 	(B>>#toto1 "a CompiledMethod(392691712)")
		each2: 	B
	Receiver's instance variables: 
nil

MethodDictionary>>valuesDo:
	Receiver: a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a CompiledMethod(97517568)") #ini...etc...
	Arguments and temporary variables: 
		t1: 	[:each2 | each compile: each2 getSource]
		t2: 	(B>>#toto1 "a CompiledMethod(392691712)")
		t3: 	2
		t3LimiT: 	32
	Receiver's instance variables: 
		tally: 	8
		array: 	#(nil (B>>#toto1 "a CompiledMethod(705953792)") nil nil nil nil nil (B>>...etc...


MethodDictionary>>do:
	Receiver: a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a CompiledMethod(97517568)") #ini...etc...
	Arguments and temporary variables: 
		t1: 	[:each2 | each compile: each2 getSource]
	Receiver's instance variables: 
		tally: 	8
		array: 	#(nil (B>>#toto1 "a CompiledMethod(705953792)") nil nil nil nil nil (B>>...etc...


[] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each: 	B
	Receiver's instance variables: 
nil

OrderedCollection>>do:
	Receiver: an OrderedCollection(A AA AbstractMirrorHandle B CapabilityHandle CapabilityTestClass Clas...etc...
	Arguments and temporary variables: 
		t1: 	[:each | each methodDict
		do: [:each2 | each compile: each2 getSource]]
		t2: 	4
	Receiver's instance variables: 
		array: 	{A. AA. AbstractMirrorHandle. B. CapabilityHandle. CapabilityTestClass. ...etc...
		firstIndex: 	1
		lastIndex: 	40


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '((PackageInfo named: ''Handles'') classes) do:[:eac...etc...
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 121 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 504253)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
[] in ClassOrganizer>>classify:under:suppressIfDefault:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
ClassOrganizer>>classify:under:suppressIfDefault:
ClassOrganizer(Categorizer)>>classify:under:
[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
B class(ClassDescription)>>compile:classified:withStamp:notifying:
B class(ClassDescription)>>compile:classified:notifying:
B class(ClassDescription)>>compile:notifying:
B class(Behavior)>>compile:
[] in [] in UndefinedObject>>DoIt
MethodDictionary>>valuesDo:
MethodDictionary>>do:
[] in UndefinedObject>>DoIt
OrderedCollection>>do:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: subscript is out of bounds: 6
2 December 2010 2:30:35 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

Array(Object)>>error:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	'subscript is out of bounds: 6'
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>at:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
		t3: 	true
		t4: 	nil
		t5: 	1
		t6: 	6
		t7: 	#'as yet unclassified'
		t8: 	nil
		t8LimiT: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
		t3: 	true
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
		t3: 	true
		t4: 	nil
		t5: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


ClassOrganizer(Categorizer)>>classify:under:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	#toto1
		t3: 	#'as yet unclassified'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	(B>>#toto1 "a CompiledMethod(1052508160)")
		t3: 	#'as yet unclassified'
		t4: 	nil
		t5: 	(B>>#toto1 "a CompiledMethod(705953792)")
		t6: 	nil
		t7: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	#'as yet unclassified'
		t3: 	'JB 12/2/2010 14:30'
		t4: 	nil
		t5: 	true
		t6: 	a CompiledMethodWithNode
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	#'as yet unclassified'
		t3: 	'JB 12/2/2010 14:30'
		t4: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	#'as yet unclassified'
		t3: 	nil
		t4: 	'JB 12/2/2010 14:30'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(Behavior)>>compile:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	a Text for 'toto1
	^ ''test''  '
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in [] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each: 	(B>>#toto1 "a CompiledMethod(705953792)")
		each2: 	B
	Receiver's instance variables: 
nil

MethodDictionary>>valuesDo:
	Receiver: a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a CompiledMethod(97517568)") #ini...etc...
	Arguments and temporary variables: 
		t1: 	[:each2 | each compile: each2 getSource]
		t2: 	(B>>#toto1 "a CompiledMethod(705953792)")
		t3: 	2
		t3LimiT: 	32
	Receiver's instance variables: 
		tally: 	8
		array: 	#(nil (B>>#toto1 "a CompiledMethod(1052508160)") nil nil nil nil nil (B>...etc...


MethodDictionary>>do:
	Receiver: a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a CompiledMethod(97517568)") #ini...etc...
	Arguments and temporary variables: 
		t1: 	[:each2 | each compile: each2 getSource]
	Receiver's instance variables: 
		tally: 	8
		array: 	#(nil (B>>#toto1 "a CompiledMethod(1052508160)") nil nil nil nil nil (B>...etc...


[] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each: 	B
	Receiver's instance variables: 
nil

OrderedCollection>>do:
	Receiver: an OrderedCollection(A AA AbstractMirrorHandle B CapabilityHandle CapabilityTestClass Clas...etc...
	Arguments and temporary variables: 
		t1: 	[:each | each methodDict
		do: [:each2 | each compile: each2 getSource]]
		t2: 	4
	Receiver's instance variables: 
		array: 	{A. AA. AbstractMirrorHandle. B. CapabilityHandle. CapabilityTestClass. ...etc...
		firstIndex: 	1
		lastIndex: 	40


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '((PackageInfo named: ''Handles'') classes) do:[:eac...etc...
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>doIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in TextMorphForShoutEditor(ParagraphEditor)>>doIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>doIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-d>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	100
		t5: 	$d
		t6: 	$d
		t7: 	#doIt:
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-d>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-d>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		stopBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 cor...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(115 to: 114)
		pivotBlock: 	a CharacterBlock with index 121 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 518832)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
[] in ClassOrganizer>>classify:under:suppressIfDefault:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
ClassOrganizer>>classify:under:suppressIfDefault:
ClassOrganizer(Categorizer)>>classify:under:
[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
B class(ClassDescription)>>compile:classified:withStamp:notifying:
B class(ClassDescription)>>compile:classified:notifying:
B class(ClassDescription)>>compile:notifying:
B class(Behavior)>>compile:
[] in [] in UndefinedObject>>DoIt
MethodDictionary>>valuesDo:
MethodDictionary>>do:
[] in UndefinedObject>>DoIt
OrderedCollection>>do:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>doIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>doIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>doIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:32:38 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (PropagationTestClass class>>#sendToInstanceVar "a CompiledMethod(339476480)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	14245857
		t3: 	a WriteStream ' '
		t5: 	14245857
		t4: 	nil
	Receiver's instance variables: 
(PropagationTestClass class>>#sendToInstanceVar "a CompiledMethod(339476480)")

CompiledMethod>>timeStamp
	Receiver: (PropagationTestClass class>>#sendToInstanceVar "a CompiledMethod(339476480)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(PropagationTestClass class>>#sendToInstanceVar "a CompiledMethod(339476480)")

MethodReference>>timeStamp
	Receiver: a MethodReference PropagationTestClass class >> #sendToInstanceVar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#PropagationTestClass
		classIsMeta: 	true
		methodSymbol: 	#sendToInstanceVar
		stringVersion: 	'PropagationTestClass class sendToInstanceVar'
		category: 	#'Expected result'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference PropagationTestClass class >> #sendToInstanceVar
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 164) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference PropagationTestClass class >> #sendToInstanceVar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#PropagationTestClass
		classIsMeta: 	true
		methodSymbol: 	#sendToInstanceVar
		stringVersion: 	'PropagationTestClass class sendToInstanceVar'
		category: 	#'Expected result'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference PropagationTestClass class >> #sendToInstanceVar
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.11'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.11)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	11
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.11' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	11
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1055@440 mouseUp 638675 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1055@440 mouseUp 638675 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1055@440 mouseUp 638675 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1055@440 mouseUp 638675 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 2:33:01 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (TranscriptWatcher class>>#detectRule "a CompiledMethod(18350080)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	22866731
		t3: 	a WriteStream ' '
		t5: 	22866731
		t4: 	nil
	Receiver's instance variables: 
(TranscriptWatcher class>>#detectRule "a CompiledMethod(18350080)")

CompiledMethod>>timeStamp
	Receiver: (TranscriptWatcher class>>#detectRule "a CompiledMethod(18350080)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(TranscriptWatcher class>>#detectRule "a CompiledMethod(18350080)")

MethodReference>>timeStamp
	Receiver: a MethodReference TranscriptWatcher class >> #detectRule
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#TranscriptWatcher
		classIsMeta: 	true
		methodSymbol: 	#detectRule
		stringVersion: 	'TranscriptWatcher class detectRule'
		category: 	#'as yet unclassified'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference TranscriptWatcher class >> #detectRule
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary(size 165) )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference TranscriptWatcher class >> #detectRule
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#TranscriptWatcher
		classIsMeta: 	true
		methodSymbol: 	#detectRule
		stringVersion: 	'TranscriptWatcher class detectRule'
		category: 	#'as yet unclassified'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference TranscriptWatcher class >> #detectRule
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SmalltalkImage >> #recreateSpecialObjectsArrayForHandle a Metho...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.12'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.12)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	12
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.12' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	12
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[1075@432 mouseUp 661777 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1075@432 mouseUp 661777 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1075@432 mouseUp 661777 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[1075@432 mouseUp 661777 nil]
	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:38:19 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

UTF8TextConverter(TextConverter)>>saveStateOf:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>skipSeparatorsAndPeekNext
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>parseLangTagFor:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	''
		t2: 	''
		t3: 	nil
		t4: 	nil
		t5: 	697938
	Receiver's instance variables: 



MultiByteFileStream>>nextChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(nil MultiByteFileStream: '/Users/arnaudj/Desktop...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(698088)
		t6: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t7: 	nil
		t8: 	nil
		t9: 	''
		t10: 	nil
		t11: 	nil
		t12: 	nil
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(nil MultiByteFileStream: '/Users/arnaudj/Desktop...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(698088)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 314...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 314...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 314...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.13'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.13)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	13
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.13' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	13
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
UTF8TextConverter(TextConverter)>>saveStateOf:
MultiByteFileStream>>skipSeparatorsAndPeekNext
MultiByteFileStream(PositionableStream)>>parseLangTagFor:
MultiByteFileStream>>nextChunk
[] in PackageInfo>>changeRecordForOverriddenMethod:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:45:36 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString class(String class)>>new:
	Receiver: ByteString
	Arguments and temporary variables: 
		t1: 	1000
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->(ByteString>>#asByteArray "a Compi...etc...
		format: 	23554
		instanceVariables: 	nil
		organization: 	('accessing' at: at:put: byteAt: byteAt:put: byteSize indexOfAnyO...etc...
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


String class>>new:
	Receiver: String
	Arguments and temporary variables: 
		t1: 	1000
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 259)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics' displayAt: displayOn: displayOn:at: displayOn:at:tex...etc...
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	nil
		localSelectors: 	nil


String class(SequenceableCollection class)>>new:streamContents:
	Receiver: String
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 259)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics' displayAt: displayOn: displayOn:at: displayOn:at:tex...etc...
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	nil
		localSelectors: 	nil


MultiByteFileStream>>nextChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(nil MultiByteFileStream: '/Users/arnaudj/Desktop...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(698088)
		t6: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t7: 	nil
		t8: 	nil
		t9: 	''
		t10: 	nil
		t11: 	nil
		t12: 	nil
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(nil MultiByteFileStream: '/Users/arnaudj/Desktop...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(698088)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 315...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 315...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 315...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.1'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.1)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	14
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.1' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	14
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/test)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/tes...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1040@420 corner: 1089@446
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1040@420 corner: 1089@446
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString class(String class)>>new:
String class>>new:
String class(SequenceableCollection class)>>new:streamContents:
MultiByteFileStream>>nextChunk
[] in PackageInfo>>changeRecordForOverriddenMethod:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:45:37 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

[] in MorphExtension>>valueOfProperty:
	Receiver: a MorphExtension (180092928) [balloonText]  [other:  (lastState -> false)]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		locked: 	false
		visible: 	true
		sticky: 	false
		balloonText: 	'show full
stack'
		balloonTextSelector: 	nil
		externalName: 	nil
		isPartsDonor: 	false
		actorState: 	nil
		player: 	nil
		eventHandler: 	nil
		otherProperties: 	a SmallIdentityDictionary(#lastState->false)
		fillStyle: 	a CompositeFillStyle
		layoutPolicy: 	a TableLayout
		layoutFrame: 	nil
		layoutProperties: 	a TableLayoutProperties
		borderStyle: 	(SimpleBorder width: 0 color: Color transparent)
		cornerStyle: 	#rounded
		actionMap: 	nil
		clipSubmorphs: 	nil


[] in MorphExtension>>valueOfProperty:ifAbsent:
	Receiver: a MorphExtension (180092928) [balloonText]  [other:  (lastState -> false)]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		locked: 	false
		visible: 	true
		sticky: 	false
		balloonText: 	'show full
stack'
		balloonTextSelector: 	nil
		externalName: 	nil
		isPartsDonor: 	false
		actorState: 	nil
		player: 	nil
		eventHandler: 	nil
		otherProperties: 	a SmallIdentityDictionary(#lastState->false)
		fillStyle: 	a CompositeFillStyle
		layoutPolicy: 	a TableLayout
		layoutFrame: 	nil
		layoutProperties: 	a TableLayoutProperties
		borderStyle: 	(SimpleBorder width: 0 color: Color transparent)
		cornerStyle: 	#rounded
		actionMap: 	nil
		clipSubmorphs: 	nil


SmallIdentityDictionary(SmallDictionary)>>at:ifAbsent:
	Receiver: a SmallIdentityDictionary(#lastState->false)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		keys: 	#(#lastState nil)
		values: 	#(false nil)
		size: 	1


MorphExtension>>valueOfProperty:ifAbsent:
	Receiver: a MorphExtension (180092928) [balloonText]  [other:  (lastState -> false)]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		locked: 	false
		visible: 	true
		sticky: 	false
		balloonText: 	'show full
stack'
		balloonTextSelector: 	nil
		externalName: 	nil
		isPartsDonor: 	false
		actorState: 	nil
		player: 	nil
		eventHandler: 	nil
		otherProperties: 	a SmallIdentityDictionary(#lastState->false)
		fillStyle: 	a CompositeFillStyle
		layoutPolicy: 	a TableLayout
		layoutFrame: 	nil
		layoutProperties: 	a TableLayoutProperties
		borderStyle: 	(SimpleBorder width: 0 color: Color transparent)
		cornerStyle: 	#rounded
		actionMap: 	nil
		clipSubmorphs: 	nil


MorphExtension>>valueOfProperty:
	Receiver: a MorphExtension (180092928) [balloonText]  [other:  (lastState -> false)]
	Arguments and temporary variables: 
		t1: 	#myDependents
	Receiver's instance variables: 
		locked: 	false
		visible: 	true
		sticky: 	false
		balloonText: 	'show full
stack'
		balloonTextSelector: 	nil
		externalName: 	nil
		isPartsDonor: 	false
		actorState: 	nil
		player: 	nil
		eventHandler: 	nil
		otherProperties: 	a SmallIdentityDictionary(#lastState->false)
		fillStyle: 	a CompositeFillStyle
		layoutPolicy: 	a TableLayout
		layoutFrame: 	nil
		layoutProperties: 	a TableLayoutProperties
		borderStyle: 	(SimpleBorder width: 0 color: Color transparent)
		cornerStyle: 	#rounded
		actionMap: 	nil
		clipSubmorphs: 	nil


PluggableButtonMorph(Morph)>>valueOfProperty:
	Receiver: a PluggableButtonMorph(234881024)
	Arguments and temporary variables: 
		t1: 	#myDependents
	Receiver's instance variables: 
		bounds: 	1846@899 corner: 1929@924
		owner: 	a PanelMorph(733216768)
		submorphs: 	an Array(an AlignmentMorph(340262912))
		fullBounds: 	1846@899 corner: 1929@924
		color: 	Color transparent
		extension: 	a MorphExtension (180092928) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Full Stack'
		getStateSelector: 	nil
		actionSelector: 	#fullStack
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true


PluggableButtonMorph(Morph)>>myDependents
	Receiver: a PluggableButtonMorph(234881024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1846@899 corner: 1929@924
		owner: 	a PanelMorph(733216768)
		submorphs: 	an Array(an AlignmentMorph(340262912))
		fullBounds: 	1846@899 corner: 1929@924
		color: 	Color transparent
		extension: 	a MorphExtension (180092928) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Full Stack'
		getStateSelector: 	nil
		actionSelector: 	#fullStack
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true


PluggableButtonMorph(Object)>>dependents
	Receiver: a PluggableButtonMorph(234881024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1846@899 corner: 1929@924
		owner: 	a PanelMorph(733216768)
		submorphs: 	an Array(an AlignmentMorph(340262912))
		fullBounds: 	1846@899 corner: 1929@924
		color: 	Color transparent
		extension: 	a MorphExtension (180092928) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Full Stack'
		getStateSelector: 	nil
		actionSelector: 	#fullStack
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true


PluggableButtonMorph(Object)>>canDiscardEdits
	Receiver: a PluggableButtonMorph(234881024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1846@899 corner: 1929@924
		owner: 	a PanelMorph(733216768)
		submorphs: 	an Array(an AlignmentMorph(340262912))
		fullBounds: 	1846@899 corner: 1929@924
		color: 	Color transparent
		extension: 	a MorphExtension (180092928) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Full Stack'
		getStateSelector: 	nil
		actionSelector: 	#fullStack
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true


[] in Debugger(Object)>>canDiscardEdits
	Receiver: a Debugger
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorph(234881024)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(84...etc...
		contents: 	a Text for 'new: t1 
	self == String
		ifTrue: [^ ByteString new: t1]...etc...
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in ByteString class(String class)>>new:
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(ByteString class(String class)>>new: String ...etc...
		contextStackTop: 	ByteString class(String class)>>new:
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('ByteString class(String class)>>new:' '...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	true
		labelString: 	nil
		message: 	nil


[] in DependentsArray(Collection)>>do:without:
	Receiver: a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(845676544) a PluggableBut...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(845676544) a PluggableBut...etc...

DependentsArray>>do:
	Receiver: a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(845676544) a PluggableBut...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(845676544) a PluggableBut...etc...

DependentsArray(Collection)>>do:without:
	Receiver: a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(845676544) a PluggableBut...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(845676544) a PluggableBut...etc...

Debugger(Object)>>canDiscardEdits
	Receiver: a Debugger
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(84...etc...
		contents: 	a Text for 'new: t1 
	self == String
		ifTrue: [^ ByteString new: t1]...etc...
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in ByteString class(String class)>>new:
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(ByteString class(String class)>>new: String ...etc...
		contextStackTop: 	ByteString class(String class)>>new:
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('ByteString class(String class)>>new:' '...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	true
		labelString: 	nil
		message: 	nil


Debugger(Model)>>canDiscardEdits
	Receiver: a Debugger
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(84...etc...
		contents: 	a Text for 'new: t1 
	self == String
		ifTrue: [^ ByteString new: t1]...etc...
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in ByteString class(String class)>>new:
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(ByteString class(String class)>>new: String ...etc...
		contextStackTop: 	ByteString class(String class)>>new:
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('ByteString class(String class)>>new:' '...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	true
		labelString: 	nil
		message: 	nil


Debugger(Object)>>updateListsAndCodeIn:
	Receiver: a Debugger
	Arguments and temporary variables: 
		t1: 	a SystemWindow(656670720)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(84...etc...
		contents: 	a Text for 'new: t1 
	self == String
		ifTrue: [^ ByteString new: t1]...etc...
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in ByteString class(String class)>>new:
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(ByteString class(String class)>>new: String ...etc...
		contextStackTop: 	ByteString class(String class)>>new:
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('ByteString class(String class)>>new:' '...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	true
		labelString: 	nil
		message: 	nil


Debugger(CodeHolder)>>updateListsAndCodeIn:
	Receiver: a Debugger
	Arguments and temporary variables: 
		t1: 	a SystemWindow(656670720)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(84...etc...
		contents: 	a Text for 'new: t1 
	self == String
		ifTrue: [^ ByteString new: t1]...etc...
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in ByteString class(String class)>>new:
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(ByteString class(String class)>>new: String ...etc...
		contextStackTop: 	ByteString class(String class)>>new:
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('ByteString class(String class)>>new:' '...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	true
		labelString: 	nil
		message: 	nil


Debugger(CodeHolder)>>stepIn:
	Receiver: a Debugger
	Arguments and temporary variables: 
		t1: 	a SystemWindow(656670720)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(84...etc...
		contents: 	a Text for 'new: t1 
	self == String
		ifTrue: [^ ByteString new: t1]...etc...
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in ByteString class(String class)>>new:
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(ByteString class(String class)>>new: String ...etc...
		contextStackTop: 	ByteString class(String class)>>new:
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('ByteString class(String class)>>new:' '...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	true
		labelString: 	nil
		message: 	nil


Debugger(Object)>>stepAt:in:
	Receiver: a Debugger
	Arguments and temporary variables: 
		t1: 	1419693
		t2: 	a SystemWindow(656670720)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656670720) a PluggableListMorph(84...etc...
		contents: 	a Text for 'new: t1 
	self == String
		ifTrue: [^ ByteString new: t1]...etc...
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in ByteString class(String class)>>new:
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(ByteString class(String class)>>new: String ...etc...
		contextStackTop: 	ByteString class(String class)>>new:
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('ByteString class(String class)>>new:' '...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	true
		labelString: 	nil
		message: 	nil


SystemWindow>>stepAt:
	Receiver: a SystemWindow(656670720)
	Arguments and temporary variables: 
		t1: 	1419693
	Receiver's instance variables: 
		bounds: 	1503@698 corner: 2103@1398
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(82575360) a WindowEdgeGripMorph(61315...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.833 g: 0.833 b: 0.833)
		extension: 	a MorphExtension (967049216) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(278134784) a RectangleMorph(690487296))
		label: 	a LabelMorph(543162368)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(429654016)
		collapseBox: 	a MultistateButtonMorph(615514112)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(795869184) a PluggableListMorph(11796...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	1503@698 corner: 2103@1398
		isCollapsed: 	false
		menuBox: 	an IconicButton(255066112)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(129499136)
		expandBox: 	a MultistateButtonMorph(594542592)
		embeddable: 	nil
		announcer: 	nil


StepMessage(MorphicAlarm)>>value:
	Receiver: StepMessage(#stepAt: -> a SystemWindow(656670720))(a SystemWindow(656670720) #stepAt: 1419...etc...
	Arguments and temporary variables: 
		t1: 	1419693
		t2: 	0
	Receiver's instance variables: 
		receiver: 	a SystemWindow(656670720)
		selector: 	#stepAt:
		arguments: 	nil
		scheduledTime: 	1419457
		numArgs: 	1
		stepTime: 	nil


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		t1: 	a PasteUpMorph(425197568) [world]
		t2: 	1419693
		t3: 	a SystemWindow(656670720)
		t4: 	nil
		t5: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(254279680))(a SystemWin...etc...
		lastStepTime: 	1419911
		lastStepMessage: 	nil
		lastCycleTime: 	1419930
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1419911
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(254279680))(a SystemWin...etc...
		lastStepTime: 	1419911
		lastStepMessage: 	nil
		lastCycleTime: 	1419930
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1419911
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>runStepMethods
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(254279680) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		t1: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(254279680))(a SystemWin...etc...
		lastStepTime: 	1419911
		lastStepMessage: 	nil
		lastCycleTime: 	1419930
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1419911
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		t1: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(254279680))(a SystemWin...etc...
		lastStepTime: 	1419911
		lastStepMessage: 	nil
		lastCycleTime: 	1419930
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1419911
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(254279680) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(6236405...etc...
		format: 	168
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'previous...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
[] in MorphExtension>>valueOfProperty:
[] in MorphExtension>>valueOfProperty:ifAbsent:
SmallIdentityDictionary(SmallDictionary)>>at:ifAbsent:
MorphExtension>>valueOfProperty:ifAbsent:
MorphExtension>>valueOfProperty:
PluggableButtonMorph(Morph)>>valueOfProperty:
PluggableButtonMorph(Morph)>>myDependents
PluggableButtonMorph(Object)>>dependents
PluggableButtonMorph(Object)>>canDiscardEdits
[] in Debugger(Object)>>canDiscardEdits
[] in DependentsArray(Collection)>>do:without:
DependentsArray>>do:
DependentsArray(Collection)>>do:without:
Debugger(Object)>>canDiscardEdits
Debugger(Model)>>canDiscardEdits
Debugger(Object)>>updateListsAndCodeIn:
Debugger(CodeHolder)>>updateListsAndCodeIn:
Debugger(CodeHolder)>>stepIn:
Debugger(Object)>>stepAt:in:
SystemWindow>>stepAt:
StepMessage(MorphicAlarm)>>value:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
PasteUpMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:48:19 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

MultiByteFileStream(StandardFileStream)>>position:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	22514088
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>parseLangTagFor:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	''
		t2: 	''
		t3: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t4: 	nil
		t5: 	22514088
	Receiver's instance variables: 



MultiByteFileStream>>nextChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
		t6: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t7: 	22514238
		t8: 	2
		t9: 	''
		t10: 	'JB 12/2/2010 14:31'
		t11: 	'as yet unclassified'
		t12: 	#(#PrimitivesScope #methodsFor: 'as yet unclassified' #stamp: 'JB 12/2/201...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 314...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	22
		indexLimiT: 	589
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 314...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 314...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	1
		indexLimiT: 	5
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		nameString: 	'handles-JB.1'
		messageString: 	'empty log message'
		info: 	a MCVersionInfo(handles-JB.1)
		deps: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	13
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		pair: 	#('handles-JB.1' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	13
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Handle)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/Han...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1793@296 corner: 1842@322
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1793@296 corner: 1842@322
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1793@296 corner: 1842@322
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1793@296 corner: 1842@322
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(485228544)
		m: 	[1814@309 mouseUp 65991 nil]
	Receiver's instance variables: 
		bounds: 	1793@296 corner: 1842@322
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1793@296 corner: 1842@322
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
MultiByteFileStream(StandardFileStream)>>position:
MultiByteFileStream(PositionableStream)>>parseLangTagFor:
MultiByteFileStream>>nextChunk
[] in PackageInfo>>changeRecordForOverriddenMethod:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:51:15 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Point>>+
	Receiver: 215@5
	Arguments and temporary variables: 
		arg: 	245@27
	Receiver's instance variables: 
		x: 	215
		y: 	5


Rectangle>>center
	Receiver: 215@5 corner: 245@27
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	215@5
		corner: 	245@27


Rectangle>>topCenter
	Receiver: 215@5 corner: 245@27
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	215@5
		corner: 	245@27


[] in RowLayout>>layout:in:
	Receiver: a RowLayout
	Arguments and temporary variables: 
		t3: 	a Morph(972554240)
		t4: 	2@2
		t5: 	a TableLayoutProperties
		t6: 	28
		t7: 	28
		t8: 	22
		t10: 	0
		t12: 	154@5 corner: 452@27
		t13: 	#(1 215 30)
		t14: 	#topCenter
		t15: 	#rigid
		t16: 	215@5 corner: 245@5
		t17: 	215@5 corner: 245@27
		t18: 	215@5 corner: 245@5
		t19: 	230@5
	Receiver's instance variables: 
		cachedMinExtent: 	242@19
		cachedMinExtents: 	{(4@0). (19@19). (19@19). (19@19). (2@2). (111@19). (2@2). (3...etc...


Array(SequenceableCollection)>>with:do:
	Receiver: an Array(a Morph(242745344) a MultistateButtonMorph(522977280) a MultistateButtonMorph(103...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a Morph(242745344) a MultistateButtonMorph(522977280) a MultistateButtonMorph(103...etc...

RowLayout>>layout:in:
	Receiver: a RowLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		cachedMinExtent: 	242@19
		cachedMinExtents: 	{(4@0). (19@19). (19@19). (19@19). (2@2). (111@19). (2@2). (3...etc...


AlignmentMorph(Morph)>>doLayoutIn:
	Receiver: an AlignmentMorph(59244544)
	Arguments and temporary variables: 
		layoutBounds: 	154@5 corner: 452@27
		layout: 	a RowLayout
		box: 	nil
		priorBounds: 	154@1 corner: 452@28
	Receiver's instance variables: 
		bounds: 	154@1 corner: 452@28
		owner: 	a SystemWindow(607387648)
		submorphs: 	an Array(a Morph(242745344) a MultistateButtonMorph(522977280) a Mul...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.742 g: 0.74 b: 0.74)
		extension: 	a MorphExtension (1003487232)
		borderWidth: 	0
		borderColor: 	Color black


[] in AlignmentMorph(Morph)>>fullBounds
	Receiver: an AlignmentMorph(59244544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	154@1 corner: 452@28
		owner: 	a SystemWindow(607387648)
		submorphs: 	an Array(a Morph(242745344) a MultistateButtonMorph(522977280) a Mul...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.742 g: 0.74 b: 0.74)
		extension: 	a MorphExtension (1003487232)
		borderWidth: 	0
		borderColor: 	Color black


BlockClosure>>on:do:
	Receiver: [self doLayoutIn: self layoutBounds]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
fullBounds := bounds.
	ex pass]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	AlignmentMorph(Morph)>>fullBounds
		startpc: 	44
		numArgs: 	0


AlignmentMorph(Morph)>>fullBounds
	Receiver: an AlignmentMorph(59244544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	154@1 corner: 452@28
		owner: 	a SystemWindow(607387648)
		submorphs: 	an Array(a Morph(242745344) a MultistateButtonMorph(522977280) a Mul...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.742 g: 0.74 b: 0.74)
		extension: 	a MorphExtension (1003487232)
		borderWidth: 	0
		borderColor: 	Color black


AlignmentMorph(Morph)>>layoutProportionallyIn:
	Receiver: an AlignmentMorph(59244544)
	Arguments and temporary variables: 
		newBounds: 	154@28 corner: 752@699
		box: 	nil
		frame: 	a LayoutFrame
	Receiver's instance variables: 
		bounds: 	154@1 corner: 452@28
		owner: 	a SystemWindow(607387648)
		submorphs: 	an Array(a Morph(242745344) a MultistateButtonMorph(522977280) a Mul...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.742 g: 0.74 b: 0.74)
		extension: 	a MorphExtension (1003487232)
		borderWidth: 	0
		borderColor: 	Color black


[] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		newBounds: 	an AlignmentMorph(59244544)
		m: 	154@28 corner: 752@699
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a WindowEdgeGripMorph(764674048) a WindowEdgeGripMorph(454819840) a WindowEdgeGri...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | m layoutProportionallyIn: newBounds]
		index: 	9
		indexLimiT: 	15
	Receiver's instance variables: 
an Array(a WindowEdgeGripMorph(764674048) a WindowEdgeGripMorph(454819840) a WindowEdgeGri...etc...

SystemWindow(Morph)>>submorphsDo:
	Receiver: a SystemWindow(607387648)
	Arguments and temporary variables: 
		aBlock: 	[:m | m layoutProportionallyIn: newBounds]
	Receiver's instance variables: 
		bounds: 	153@0 corner: 753@700
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(764674048) a WindowEdgeGripMorph(4548...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (246677504) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(379846656) a RectangleMorph(771227648))
		label: 	a LabelMorph(565182464)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(522977280)
		collapseBox: 	a MultistateButtonMorph(1039925248)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(378273792) a PluggableListMorph(36569...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	153@0 corner: 753@700
		isCollapsed: 	false
		menuBox: 	an IconicButton(725876736)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(59244544)
		expandBox: 	a MultistateButtonMorph(800849920)
		embeddable: 	nil
		announcer: 	nil


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a SystemWindow(607387648)
		newBounds: 	154@28 corner: 752@699
	Receiver's instance variables: 
a ProportionalLayout

SystemWindow(Morph)>>doLayoutIn:
	Receiver: a SystemWindow(607387648)
	Arguments and temporary variables: 
		layoutBounds: 	154@28 corner: 752@699
		layout: 	a ProportionalLayout
		box: 	nil
		priorBounds: 	153@0 corner: 754@701
	Receiver's instance variables: 
		bounds: 	153@0 corner: 753@700
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(764674048) a WindowEdgeGripMorph(4548...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (246677504) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(379846656) a RectangleMorph(771227648))
		label: 	a LabelMorph(565182464)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(522977280)
		collapseBox: 	a MultistateButtonMorph(1039925248)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(378273792) a PluggableListMorph(36569...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	153@0 corner: 753@700
		isCollapsed: 	false
		menuBox: 	an IconicButton(725876736)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(59244544)
		expandBox: 	a MultistateButtonMorph(800849920)
		embeddable: 	nil
		announcer: 	nil


[] in SystemWindow(Morph)>>fullBounds
	Receiver: a SystemWindow(607387648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	153@0 corner: 753@700
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(764674048) a WindowEdgeGripMorph(4548...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (246677504) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(379846656) a RectangleMorph(771227648))
		label: 	a LabelMorph(565182464)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(522977280)
		collapseBox: 	a MultistateButtonMorph(1039925248)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(378273792) a PluggableListMorph(36569...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	153@0 corner: 753@700
		isCollapsed: 	false
		menuBox: 	an IconicButton(725876736)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(59244544)
		expandBox: 	a MultistateButtonMorph(800849920)
		embeddable: 	nil
		announcer: 	nil


BlockClosure>>on:do:
	Receiver: [self doLayoutIn: self layoutBounds]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
fullBounds := bounds.
	ex pass]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SystemWindow(Morph)>>fullBounds
		startpc: 	44
		numArgs: 	0


SystemWindow(Morph)>>fullBounds
	Receiver: a SystemWindow(607387648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	153@0 corner: 753@700
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(764674048) a WindowEdgeGripMorph(4548...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (246677504) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(379846656) a RectangleMorph(771227648))
		label: 	a LabelMorph(565182464)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(522977280)
		collapseBox: 	a MultistateButtonMorph(1039925248)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(378273792) a PluggableListMorph(36569...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	153@0 corner: 753@700
		isCollapsed: 	false
		menuBox: 	an IconicButton(725876736)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(59244544)
		expandBox: 	a MultistateButtonMorph(800849920)
		embeddable: 	nil
		announcer: 	nil


PasteUpMorph(Morph)>>privateInvalidateMorph:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aMorph: 	a SystemWindow(607387648)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>privateAddMorph:atIndex:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aMorph: 	a SystemWindow(607387648)
		index: 	3
		oldIndex: 	nil
		myWorld: 	a PasteUpMorph(425197568) [world]
		itsWorld: 	nil
		oldOwner: 	nil
		i: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>addMorph:inFrontOf:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		newMorph: 	a SystemWindow(607387648)
		aMorph: 	a PluggableStandardWindow(186646528)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[] in PasteUpMorph(Morph)>>addMorphInFrontOfLayer:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		t1: 	a PluggableStandardWindow(186646528)
		t2: 	a SystemWindow(607387648)
		t3: 	100
		t4: 	100
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a PluggableStandardWindow(186646...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a PluggableStandardWindow(186646...etc...

PasteUpMorph(Morph)>>addMorphInFrontOfLayer:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		t1: 	a SystemWindow(607387648)
		t2: 	100
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph>>addMorphFront:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aMorph: 	a SystemWindow(607387648)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>addMorph:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aMorph: 	a SystemWindow(607387648)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemWindow>>openAsIsIn:
	Receiver: a SystemWindow(607387648)
	Arguments and temporary variables: 
		t1: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	153@0 corner: 753@700
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(764674048) a WindowEdgeGripMorph(4548...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (246677504) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(379846656) a RectangleMorph(771227648))
		label: 	a LabelMorph(565182464)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(522977280)
		collapseBox: 	a MultistateButtonMorph(1039925248)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(378273792) a PluggableListMorph(36569...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	153@0 corner: 753@700
		isCollapsed: 	false
		menuBox: 	an IconicButton(725876736)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(59244544)
		expandBox: 	a MultistateButtonMorph(800849920)
		embeddable: 	nil
		announcer: 	nil


SystemWindow>>openInWorld:
	Receiver: a SystemWindow(607387648)
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	153@0 corner: 753@700
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(764674048) a WindowEdgeGripMorph(4548...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (246677504) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(379846656) a RectangleMorph(771227648))
		label: 	a LabelMorph(565182464)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(522977280)
		collapseBox: 	a MultistateButtonMorph(1039925248)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(378273792) a PluggableListMorph(36569...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	153@0 corner: 753@700
		isCollapsed: 	false
		menuBox: 	an IconicButton(725876736)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(59244544)
		expandBox: 	a MultistateButtonMorph(800849920)
		embeddable: 	nil
		announcer: 	nil


SystemWindow(Morph)>>openInWorld
	Receiver: a SystemWindow(607387648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	153@0 corner: 753@700
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(764674048) a WindowEdgeGripMorph(4548...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.667 g: 0.667 b: 0.667)
		extension: 	a MorphExtension (246677504) [other:  (roundedCorners -> #(1 4)) (ha...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		labelString: 	'User Interrupt'
		stripes: 	an Array(a RectangleMorph(379846656) a RectangleMorph(771227648))
		label: 	a LabelMorph(565182464)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(522977280)
		collapseBox: 	a MultistateButtonMorph(1039925248)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableTextMorph(378273792) a PluggableListMorph(36569...etc...
		paneRects: 	nil
		collapsedFrame: 	nil
		fullFrame: 	153@0 corner: 753@700
		isCollapsed: 	false
		menuBox: 	an IconicButton(725876736)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(59244544)
		expandBox: 	a MultistateButtonMorph(800849920)
		embeddable: 	nil
		announcer: 	nil


Debugger>>openFullMorphicLabel:
	Receiver: a Debugger
	Arguments and temporary variables: 
		aLabelString: 	'User Interrupt'
		window: 	a SystemWindow(607387648)
		aListMorph: 	a PluggableListMorph(618397696)
		oldContextStackIndex: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(607387648) a PluggableListMorph(61...etc...
		contents: 	nil
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in MultiByteFileStream>>skipSeparators
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(MultiByteFileStream>>skipSeparators MultiByt...etc...
		contextStackTop: 	MultiByteFileStream>>skipSeparators
		contextStackIndex: 	0
		contextStackList: 	an OrderedCollection('MultiByteFileStream>>skipSeparators' 'M...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	false
		labelString: 	nil
		message: 	nil


Debugger>>openFullNoSuspendLabel:
	Receiver: a Debugger
	Arguments and temporary variables: 
		aString: 	'User Interrupt'
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(607387648) a PluggableListMorph(61...etc...
		contents: 	nil
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in MultiByteFileStream>>skipSeparators
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(MultiByteFileStream>>skipSeparators MultiByt...etc...
		contextStackTop: 	MultiByteFileStream>>skipSeparators
		contextStackIndex: 	0
		contextStackList: 	an OrderedCollection('MultiByteFileStream>>skipSeparators' 'M...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		debuggerMap: 	nil
		savedCursor: 	nil
		isolationHead: 	nil
		failedProject: 	nil
		errorWasInUIProcess: 	false
		labelString: 	nil
		message: 	nil


[] in [] in Debugger class>>openOn:context:label:contents:fullView:
	Receiver: Debugger
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	CodeHolder
		methodDict: 	a MethodDictionary(#addOptionalButtonsTo:at:plus:->(Debugger>>#addO...etc...
		format: 	174
		instanceVariables: 	#('interruptedProcess' 'interruptedController' 'contextStack...etc...
		organization: 	('*Polymorph-Widgets-override' addOptionalButtonsTo:at:plus: buil...etc...
		subclasses: 	nil
		name: 	#Debugger
		classPool: 	a Dictionary(#ContextStackKeystrokes->a Dictionary($T->#stepIntoBloc...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Debugger'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in Debugger class>>openOn:context:label:contents:fullView:
		startpc: 	134
		numArgs: 	0


[] in Debugger class>>openOn:context:label:contents:fullView:
	Receiver: Debugger
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	CodeHolder
		methodDict: 	a MethodDictionary(#addOptionalButtonsTo:at:plus:->(Debugger>>#addO...etc...
		format: 	174
		instanceVariables: 	#('interruptedProcess' 'interruptedController' 'contextStack...etc...
		organization: 	('*Polymorph-Widgets-override' addOptionalButtonsTo:at:plus: buil...etc...
		subclasses: 	nil
		name: 	#Debugger
		classPool: 	a Dictionary(#ContextStackKeystrokes->a Dictionary($T->#stepIntoBloc...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Debugger'
		traitComposition: 	{}
		localSelectors: 	nil


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(607387648))(a SystemWin...etc...
		lastStepTime: 	281734
		lastStepMessage: 	nil
		lastCycleTime: 	281933
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	281734
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>runStepMethods
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(994574336) a TaskbarMorph(811335680) a SystemWi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(607387648))(a SystemWin...etc...
		lastStepTime: 	281734
		lastStepMessage: 	nil
		lastCycleTime: 	281933
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	281734
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(607387648))(a SystemWin...etc...
		lastStepTime: 	281734
		lastStepMessage: 	nil
		lastCycleTime: 	281933
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	281734
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Point>>+
Rectangle>>center
Rectangle>>topCenter
[] in RowLayout>>layout:in:
Array(SequenceableCollection)>>with:do:
RowLayout>>layout:in:
AlignmentMorph(Morph)>>doLayoutIn:
[] in AlignmentMorph(Morph)>>fullBounds
BlockClosure>>on:do:
AlignmentMorph(Morph)>>fullBounds
AlignmentMorph(Morph)>>layoutProportionallyIn:
[] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
SystemWindow(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
SystemWindow(Morph)>>doLayoutIn:
[] in SystemWindow(Morph)>>fullBounds
BlockClosure>>on:do:
SystemWindow(Morph)>>fullBounds
PasteUpMorph(Morph)>>privateInvalidateMorph:
PasteUpMorph(Morph)>>privateAddMorph:atIndex:
PasteUpMorph(Morph)>>addMorph:inFrontOf:
[] in PasteUpMorph(Morph)>>addMorphInFrontOfLayer:
Array(SequenceableCollection)>>do:
PasteUpMorph(Morph)>>addMorphInFrontOfLayer:
PasteUpMorph>>addMorphFront:
PasteUpMorph(Morph)>>addMorph:
SystemWindow>>openAsIsIn:
SystemWindow>>openInWorld:
SystemWindow(Morph)>>openInWorld
Debugger>>openFullMorphicLabel:
Debugger>>openFullNoSuspendLabel:
[] in [] in Debugger class>>openOn:context:label:contents:fullView:
BlockClosure>>on:do:
[] in Debugger class>>openOn:context:label:contents:fullView:
WorldState>>runStepMethodsIn:
PasteUpMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:52:15 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

MultiByteFileStream(ReadWriteStream)>>=
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		other: 	$]
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>parseLangTagFor:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	''
		t2: 	''
		t3: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t4: 	nil
		t5: 	22514088
	Receiver's instance variables: 



MultiByteFileStream>>nextChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
		t6: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t7: 	22514238
		t8: 	2
		t9: 	''
		t10: 	'JB 12/2/2010 14:31'
		t11: 	'as yet unclassified'
		t12: 	#(#PrimitivesScope #methodsFor: 'as yet unclassified' #stamp: 'JB 12/2/201...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 316...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	22
		indexLimiT: 	589
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 316...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 316...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	1
		indexLimiT: 	5
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		nameString: 	'handles-JB.2'
		messageString: 	'empty log message'
		info: 	a MCVersionInfo(handles-JB.2)
		deps: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	2
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		pair: 	#('handles-JB.2' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	2
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/test)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/tes...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1793@296 corner: 1842@322
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1793@296 corner: 1842@322
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1793@296 corner: 1842@322
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1793@296 corner: 1842@322
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorphPlus(485228544)
		m: 	[1817@309 mouseUp 306415 nil]
	Receiver's instance variables: 
		bounds: 	1793@296 corner: 1842@322
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1793@296 corner: 1842@322
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
MultiByteFileStream(ReadWriteStream)>>=
MultiByteFileStream(PositionableStream)>>parseLangTagFor:
MultiByteFileStream>>nextChunk
[] in PackageInfo>>changeRecordForOverriddenMethod:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:56:06 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(SequenceableCollection)>>copyFrom:to:
	Receiver: 'JB 12/2/2010 14:31'' prior: 73073721!
primMIDIOpenPort: t1 readSemaIndex: t2 interfaceClo...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	0
		newSize: 	nil
	Receiver's instance variables: 
'JB 12/2/2010 14:31'' prior: 73073721!
primMIDIOpenPort: t1 readSemaIndex: t2 interfaceClo...etc...

MultiByteFileStream>>basicChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>nextChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
		t6: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t7: 	22514238
		t8: 	2
		t9: 	''
		t10: 	'JB 12/2/2010 14:31'
		t11: 	'as yet unclassified'
		t12: 	#(#PrimitivesScope #methodsFor: 'as yet unclassified' #stamp: 'JB 12/2/201...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 317...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	22
		indexLimiT: 	589
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 317...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 317...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	1
		indexLimiT: 	5
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCPackageLoader>>updatePackage:withSnapshot:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		aPackage: 	a MCPackage(handles)
		aSnapshot: 	a MCSnapshot
		patch: 	nil
		packageSnap: 	nil
	Receiver's instance variables: 
		requirements: 	nil
		unloadableDefinitions: 	nil
		obsoletions: 	a Dictionary()
		additions: 	an OrderedCollection()
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	nil
		methodAdditions: 	an OrderedCollection()


MCPackageLoader>>unloadPackage:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		aPackage: 	a MCPackage(handles)
	Receiver's instance variables: 
		requirements: 	nil
		unloadableDefinitions: 	nil
		obsoletions: 	a Dictionary()
		additions: 	an OrderedCollection()
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	nil
		methodAdditions: 	an OrderedCollection()


MCPackageLoader class>>unloadPackage:
	Receiver: MCPackageLoader
	Arguments and temporary variables: 
		aPackage: 	a MCPackage(handles)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDefinition:->(MCPackageLoader>>#addDefinitio...etc...
		format: 	146
		instanceVariables: 	#('requirements' 'unloadableDefinitions' 'obsoletions' 'addi...etc...
		organization: 	('patch ops' addDefinition: modifyDefinition:to: removeDefinition...etc...
		subclasses: 	{MCMultiPackageLoader}
		name: 	#MCPackageLoader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Loading'
		traitComposition: 	nil
		localSelectors: 	nil


MCWorkingCopy>>unload
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	2
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>unloadPackage
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/tes...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


MCWorkingCopyBrowser(MCTool)>>perform:orSendTo:
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		selector: 	#unloadPackage
		otherTarget: 	a PluggableTreeMorph(970719232)
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/tes...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2



--- The full stack ---
ByteString(SequenceableCollection)>>copyFrom:to:
MultiByteFileStream>>basicChunk
MultiByteFileStream>>nextChunk
[] in PackageInfo>>changeRecordForOverriddenMethod:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCPackageLoader>>updatePackage:withSnapshot:
MCPackageLoader>>unloadPackage:
MCPackageLoader class>>unloadPackage:
MCWorkingCopy>>unload
MCWorkingCopyBrowser>>unloadPackage
MCWorkingCopyBrowser(MCTool)>>perform:orSendTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:58:17 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteString(String)>>indexOf:startingAt:
	Receiver: 'JB 12/2/2010 14:31'' prior: 73073721!
primMIDIOpenPort: t1 readSemaIndex: t2 interfaceClo...etc...
	Arguments and temporary variables: 
		aCharacter: 	$!
		start: 	1
	Receiver's instance variables: 
'JB 12/2/2010 14:31'' prior: 73073721!
primMIDIOpenPort: t1 readSemaIndex: t2 interfaceClo...etc...

MultiByteFileStream>>basicChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>nextChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
		t6: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t7: 	22514238
		t8: 	2
		t9: 	''
		t10: 	'JB 12/2/2010 14:31'
		t11: 	'as yet unclassified'
		t12: 	#(#PrimitivesScope #methodsFor: 'as yet unclassified' #stamp: 'JB 12/2/201...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 317...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	22
		indexLimiT: 	589
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 317...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 317...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	1
		indexLimiT: 	5
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>changesRelativeToRepository:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		aRepository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/te...etc...
		ancestorVersion: 	nil
		ancestorSnapshot: 	a MCSnapshot
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	2
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


[] in MCWorkingCopyBrowser>>viewChanges
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/tes...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0



--- The full stack ---
ByteString(String)>>indexOf:startingAt:
MultiByteFileStream>>basicChunk
MultiByteFileStream>>nextChunk
[] in PackageInfo>>changeRecordForOverriddenMethod:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCWorkingCopy>>changesRelativeToRepository:
[] in MCWorkingCopyBrowser>>viewChanges
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
MCWorkingCopyBrowser>>viewChanges
MCWorkingCopyBrowser(MCTool)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:58:18 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

[] in Delay>>wait
	Receiver: a Delay(20 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	20
		resumptionTime: 	704803
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


BlockClosure>>ifCurtailed:
	Receiver: [delaySemaphore wait]
	Arguments and temporary variables: 
		t6: 	[self unschedule]
		t7: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	36
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(20 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	20
		resumptionTime: 	704803
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


WorldState>>interCyclePause:
	Receiver: a WorldState
	Arguments and temporary variables: 
		t1: 	20
		t2: 	704783
		t3: 	20
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(424148992))(a SystemWin...etc...
		lastStepTime: 	704783
		lastStepMessage: 	nil
		lastCycleTime: 	704803
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	704783
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(424148992))(a SystemWin...etc...
		lastStepTime: 	704783
		lastStepMessage: 	nil
		lastCycleTime: 	704803
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	704783
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(759169024) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(6236405...etc...
		format: 	168
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'previous...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
[] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
WorldState>>interCyclePause:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 2:58:47 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UTF8TextConverter(TextConverter)>>saveStateOf:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-I...etc...
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>skipSeparatorsAndPeekNext
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>parseLangTagFor:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	''
		t2: 	''
		t3: 	nil
		t4: 	nil
		t5: 	22514088
	Receiver's instance variables: 



MultiByteFileStream>>nextChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
		t6: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t7: 	22514238
		t8: 	2
		t9: 	''
		t10: 	'JB 12/2/2010 14:31'
		t11: 	'as yet unclassified'
		t12: 	#(#PrimitivesScope #methodsFor: 'as yet unclassified' #stamp: 'JB 12/2/201...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 317...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	22
		indexLimiT: 	589
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 317...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 317...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	1
		indexLimiT: 	5
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>changesRelativeToRepository:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		aRepository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/te...etc...
		ancestorVersion: 	nil
		ancestorSnapshot: 	a MCSnapshot
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	2
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


[] in MCWorkingCopyBrowser>>viewChanges
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/tes...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>


--- The full stack ---
UTF8TextConverter(TextConverter)>>saveStateOf:
MultiByteFileStream>>skipSeparatorsAndPeekNext
MultiByteFileStream(PositionableStream)>>parseLangTagFor:
MultiByteFileStream>>nextChunk
[] in PackageInfo>>changeRecordForOverriddenMethod:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCWorkingCopy>>changesRelativeToRepository:
[] in MCWorkingCopyBrowser>>viewChanges
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
MCWorkingCopyBrowser>>viewChanges
MCWorkingCopyBrowser(MCTool)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 3:01:05 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	nil
		t6: 	nil
		t7: 	nil
		t8: 	nil
		t9: 	nil
		t10: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>skipSeparators
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	22514088
		t2: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>nextChunk
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image.TEST.2.changes'...etc...
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
	Receiver's instance variables: 



[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
		t6: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t7: 	22514238
		t8: 	2
		t9: 	''
		t10: 	'JB 12/2/2010 14:31'
		t11: 	'as yet unclassified'
		t12: 	#(#PrimitivesScope #methodsFor: 'as yet unclassified' #stamp: 'JB 12/2/201...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		t2: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT...etc...
		t3: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		t4: 	#(22514238)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 319...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	22
		indexLimiT: 	589
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 319...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 319...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	1
		indexLimiT: 	5
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		t1: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		nameString: 	'handles-JB.1'
		messageString: 	'empty log message'
		info: 	a MCVersionInfo(handles-JB.1)
		deps: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		pair: 	#('handles-JB.1' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/s)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCDirectoryRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/s)
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1793@296 corner: 1842@322
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1793@296 corner: 1842@322
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1793@296 corner: 1842@322
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	1793@296 corner: 1842@322
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>skipSeparators
MultiByteFileStream>>nextChunk
[] in PackageInfo>>changeRecordForOverriddenMethod:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
2 December 2010 3:01:30 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

MultiByteFileStream(Object)>>error:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 
		t1: 	'primClose: failed'
	Receiver's instance variables: 



MultiByteFileStream(Object)>>primitiveFailed:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 
		selector: 	#primClose:
	Receiver's instance variables: 



MultiByteFileStream(Object)>>primitiveFailed
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream(StandardFileStream)>>primClose:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 
		t1: 	#[73 58 77 244 144 105 120 160 0 0 0 0 108 187 247 0 0 0 0 0 0 0 0 0]
	Receiver's instance variables: 



MultiByteFileStream(StandardFileStream)>>close
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



[] in [] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		x: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/Pha...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


ExpandedSourceFileArray(SequenceableCollection)>>do:
	Receiver: an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/D...etc...
	Arguments and temporary variables: 
		t1: 	[:x | x notNil
		ifTrue: [x close]]
		t2: 	1
		t2LimiT: 	2
	Receiver's instance variables: 
		files: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/D...etc...


[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		sourceFilesCopy: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaud...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MethodContext(ContextPart)>>resume:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		value: 	Project
		ctxt: 	BlockClosure>>ensure:
		unwindBlock: 	[sourceFilesCopy
		do: [:x | x notNil
				ifTrue: [x close]]]
	Receiver's instance variables: 
		sender: 	nil
		pc: 	nil
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: [| file prevPos prevFileIndex chunk stamp methodCategory tokens |
method fileIndex == 0
		...etc...
	Arguments and temporary variables: 
		aBlock: 	[sourceFilesCopy
		do: [:x | x notNil
				ifTrue: [x close]]]
		complete: 	true
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aMethodReference: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		sourceFilesCopy: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaud...etc...
		method: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		position: 	#(22514238)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aMethodReference: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		ea: 	[:each | stream nextPut: each]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aClass: 	#recordInvalidRect:
		aBlock: 	DamageRecorder
		sel: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
		t1: 	[:sel | aBlock
		value: (self referenceForMethod: sel ofClass: aClass)]
		t2: 	1
		t2LimiT: 	1
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aString: 	#'*Polymorph-Widgets-override'
		aClass: 	DamageRecorder
		aBlock: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aClass: 	#'*Polymorph-Widgets-override'
		aBlock: 	DamageRecorder
		cat: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	#'*Polymorph-Widgets-override'
		cat: 	[:cat | self
		methodsInCategory: cat
		ofClass: aClass
		do: aBlock]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
		t1: 	[:cat | (self isOverrideCategory: cat)
		ifTrue: [aBlock value: cat]]
		t2: 	1
		t2LimiT: 	4
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aClass: 	DamageRecorder
		aBlock: 	[:cat | self
		methodsInCategory: cat
		ofClass: aClass
		do: aBlock]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aClass: 	DamageRecorder
		aBlock: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	DamageRecorder
		class: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		t1: 	DamageRecorder
		t2: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 213...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 213...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		t1: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 213...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		t1: 	Object
		t2: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		t1: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		t1: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	[:each | stream nextPut: each]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		stream: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	100
		blockWithArg: 	[:stream | self
		overriddenMethodsDo: [:each | stream nextPut: e...etc...
		stream: 	a WriteStream #()
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		blockWithArg: 	[:stream | self
		overriddenMethodsDo: [:each | stream nextPut: e...etc...
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		packageInfo: 	a PackageInfo(handles)
		definitions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' ...etc...
		categories: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Ap...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.1'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.1)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()



--- The full stack ---
MultiByteFileStream(Object)>>error:
MultiByteFileStream(Object)>>primitiveFailed:
MultiByteFileStream(Object)>>primitiveFailed
MultiByteFileStream(StandardFileStream)>>primClose:
MultiByteFileStream(StandardFileStream)>>close
[] in [] in PackageInfo>>changeRecordForOverriddenMethod:
ExpandedSourceFileArray(SequenceableCollection)>>do:
[] in PackageInfo>>changeRecordForOverriddenMethod:
MethodContext(ContextPart)>>resume:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 3:02:43 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(709099520)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(709099520)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(709099520)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(709099520)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.1'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.1)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.1' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package-cache)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(Handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(485228544)
		t3: 	[587@350 mouseUp 20089 nil]
	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(217579520) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[587@350 mouseUp 20089 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(787218432) a PluggableButtonMorphPlus(2...etc...
	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[587@350 mouseUp 20089 nil]
	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(485228544)
	Arguments and temporary variables: 
		t1: 	[587@350 mouseUp 20089 nil]
	Receiver's instance variables: 
		bounds: 	570@341 corner: 619@367
		owner: 	a PluggableThemedPanelMorph(87031808)
		submorphs: 	an Array(an AlignmentMorph(195035136))
		fullBounds: 	570@341 corner: 619@367
		color: 	Color transparent
		extension: 	a MorphExtension (471597056) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: subscript is out of bounds: 6
2 December 2010 3:06:23 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

Array(Object)>>error:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	'subscript is out of bounds: 6'
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

Array(Object)>>at:
	Receiver: #(#initialize #isA #isB #test2 #testReturn)
	Arguments and temporary variables: 
		t1: 	6
	Receiver's instance variables: 
#(#initialize #isA #isB #test2 #testReturn)

ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
		t3: 	true
		t4: 	nil
		t5: 	1
		t6: 	6
		t7: 	#'as yet unclassified'
		t8: 	nil
		t8LimiT: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
		t3: 	true
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


ClassOrganizer>>classify:under:suppressIfDefault:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
		t3: 	true
		t4: 	nil
		t5: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


ClassOrganizer(Categorizer)>>classify:under:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	#'as yet unclassified'
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified' #accessing)
		categoryStops: 	#(38 38)
		elementArray: 	#(#initialize #isA #isB #test2 #testReturn)
		subject: 	B
		classComment: 	nil
		commentStamp: 	nil


[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	#toto1
		t3: 	#'as yet unclassified'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	SystemChangeNotifier>>doSilently:
		startpc: 	26
		numArgs: 	0


SystemChangeNotifier>>doSilently:
	Receiver: a SystemChangeNotifier
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		eventSource: 	a SystemEventManager
		silenceLevel: 	2


B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	#toto1
		t2: 	(B>>#toto1 "a CompiledMethod(853540864)")
		t3: 	#'as yet unclassified'
		t4: 	nil
		t5: 	(B>>#toto1 "a CompiledMethod(22282240)")
		t6: 	nil
		t7: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	'toto1
	^ ''test'''
		t2: 	#'as yet unclassified'
		t3: 	'JB 12/2/2010 15:06'
		t4: 	nil
		t5: 	true
		t6: 	a CompiledMethodWithNode
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	'toto1
	^ ''test'''
		t2: 	#'as yet unclassified'
		t3: 	'JB 12/2/2010 15:06'
		t4: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:classified:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	'toto1
	^ ''test'''
		t2: 	#'as yet unclassified'
		t3: 	nil
		t4: 	'JB 12/2/2010 15:06'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(ClassDescription)>>compile:notifying:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	'toto1
	^ ''test'''
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

B class(Behavior)>>compile:
	Receiver: B
	Arguments and temporary variables: 
		t1: 	'toto1
	^ ''test'''
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a Compiled...etc...
		format: 	132
		instanceVariables: 	#('var2')
		organization: 	<<error during printing>>

[] in [] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each: 	(B>>#toto1 "a CompiledMethod(22282240)")
		each2: 	B
	Receiver's instance variables: 
nil

MethodDictionary>>valuesDo:
	Receiver: a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a CompiledMethod(967311360)") #in...etc...
	Arguments and temporary variables: 
		t1: 	[:each2 | each compile: each2 getSource]
		t2: 	(B>>#toto1 "a CompiledMethod(22282240)")
		t3: 	2
		t3LimiT: 	32
	Receiver's instance variables: 
		tally: 	8
		array: 	#(nil (B>>#toto1 "a CompiledMethod(853540864)") nil nil nil nil nil (B>>...etc...


MethodDictionary>>do:
	Receiver: a MethodDictionary(#activeTestWrap->(B>>#activeTestWrap "a CompiledMethod(967311360)") #in...etc...
	Arguments and temporary variables: 
		t1: 	[:each2 | each compile: each2 getSource]
	Receiver's instance variables: 
		tally: 	8
		array: 	#(nil (B>>#toto1 "a CompiledMethod(853540864)") nil nil nil nil nil (B>>...etc...


[] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each: 	B
	Receiver's instance variables: 
nil

OrderedCollection>>do:
	Receiver: an OrderedCollection(A AA AbstractMirrorHandle B CapabilityHandle CapabilityTestClass Clas...etc...
	Arguments and temporary variables: 
		t1: 	[:each | 
each methodDict
		do: [:each2 | each compile: each2 getSource].
	...etc...
		t2: 	4
	Receiver's instance variables: 
		array: 	{A. AA. AbstractMirrorHandle. B. CapabilityHandle. CapabilityTestClass. ...etc...
		firstIndex: 	1
		lastIndex: 	40


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '((PackageInfo named: ''Handles'') classes) do:[:eac...etc...
		requestor: 	a TextMorphForShoutEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		t1: 	[keystroke '<Cmd-p>']
		t2: 	a WriteStream ''
		t3: 	true
		t4: 	112
		t5: 	$p
		t6: 	$p
		t7: 	#printIt:
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
	Receiver: a TextMorphForShoutEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		model: 	a SHWorkspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 1 and character $( and rectangle 0@0 co...etc...
		stopBlock: 	a CharacterBlock with index 200 and character Character cr and recta...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextColor code: Color black)
		initialText: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each |...etc...
		selectionShowing: 	false
		otherInterval: 	(1 to: 0)
		lastParentLocation: 	nil
		morph: 	a TextMorphForShout(1038352384)
		oldInterval: 	(181 to: 180)
		pivotBlock: 	a CharacterBlock with index 196 and character Character cr and rect...etc...
		inBackTo: 	nil


[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
	Receiver: a TextMorphForShout(1038352384)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@130
		owner: 	a TransformMorph(892076032)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@130
		color: 	Color black
		extension: 	a MorphExtension (425721856) [other:  (blinkStart -> 241330)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((PackageInfo named: ''Handles'') classes) do:[:each | each m...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphForShoutEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableShoutMorph(193724416)
		acceptOnCR: 	false



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
ClassOrganizer(Categorizer)>>classify:under:suppressIfDefault:
[] in ClassOrganizer>>classify:under:suppressIfDefault:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
ClassOrganizer>>classify:under:suppressIfDefault:
ClassOrganizer(Categorizer)>>classify:under:
[] in B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
[] in SystemChangeNotifier>>doSilently:
BlockClosure>>ensure:
SystemChangeNotifier>>doSilently:
B class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:notifying:
B class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
B class(ClassDescription)>>compile:classified:withStamp:notifying:
B class(ClassDescription)>>compile:classified:notifying:
B class(ClassDescription)>>compile:notifying:
B class(Behavior)>>compile:
[] in [] in UndefinedObject>>DoIt
MethodDictionary>>valuesDo:
MethodDictionary>>do:
[] in UndefinedObject>>DoIt
OrderedCollection>>do:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphForShoutEditor(ParagraphEditor)>>evaluateSelection
TextMorphForShoutEditor(ParagraphEditor)>>printIt
[] in TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphForShoutEditor(ParagraphEditor)>>printIt:
TextMorphForShoutEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(TextMorphEditor)>>dispatchOnKeyEvent:with:
TextMorphForShoutEditor(ParagraphEditor)>>keystroke:
TextMorphForShoutEditor(TextMorphEditor)>>keystroke:
[] in [] in TextMorphForShout(TextMorph)>>keyStroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForShout(TextMorph)>>handleInteraction:
TextMorphForShout(TextMorphForEditView)>>handleInteraction:
[] in TextMorphForShout(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
DEVToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForShout(TextMorph)>>keyStroke:
TextMorphForShout(TextMorphForEditView)>>keyStroke:
TextMorphForShout(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForShout(Morph)>>handleEvent:
TextMorphForShout(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
2 December 2010 3:08:07 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

ByteString(Object)>>error:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	'Improper store into indexable object'
	Receiver's instance variables: 
'                    '

ByteString(Object)>>errorImproperStore
	Receiver: '                    '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'                    '

ByteString>>at:put:
	Receiver: '                    '
	Arguments and temporary variables: 
		t1: 	1
		t2: 	nil
	Receiver's instance variables: 
'                    '

WriteStream>>pastEndPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


WriteStream>>nextPut:
	Receiver: a WriteStream ' '
	Arguments and temporary variables: 
		t1: 	nil
	Receiver's instance variables: 
		collection: 	'                    '
		position: 	1
		readLimit: 	1
		writeLimit: 	20


CompiledMethod>>getPreambleFrom:at:
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(967835648)")
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
		t2: 	13503734
		t3: 	a WriteStream ' '
		t5: 	13503734
		t4: 	nil
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(967835648)")

CompiledMethod>>timeStamp
	Receiver: (SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(967835648)")
	Arguments and temporary variables: 
		t1: 	nil
		t2: 	nil
		t3: 	nil
		t4: 	nil
		t5: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Hand...etc...
	Receiver's instance variables: 
(SystemDictionary>>#recreateSpecialObjectsArray "a CompiledMethod(967835648)")

MethodReference>>timeStamp
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


MCMethodDefinition class>>forMethodReference:
	Receiver: MCMethodDefinition
	Arguments and temporary variables: 
		t1: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t2: 	nil
	Receiver's instance variables: 
		superclass: 	MCDefinition
		methodDict: 	a MethodDictionary(#=->(MCMethodDefinition>>#= "a CompiledMethod(92...etc...
		format: 	142
		instanceVariables: 	#('classIsMeta' 'source' 'category' 'selector' 'className' '...etc...
		organization: 	('accessing' actualClass category classIsMeta className fullTimeS...etc...
		subclasses: 	nil
		name: 	#MCMethodDefinition
		classPool: 	a Dictionary(#Definitions->a WeakIdentityKeyDictionary() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Modeling'
		traitComposition: 	nil
		localSelectors: 	nil


MethodReference>>asMethodDefinition
	Receiver: a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		classSymbol: 	#SystemDictionary
		classIsMeta: 	false
		methodSymbol: 	#recreateSpecialObjectsArray
		stringVersion: 	'SystemDictionary recreateSpecialObjectsArray'
		category: 	#'*Handles'
		package: 	nil


[] in MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t2: 	a MethodReference SystemDictionary >> #recreateSpecialObjectsArray
		t4: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
	Receiver's instance variables: 
		name: 	'handles'


[] in [] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

[] in [] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[] in ProgressInitiationException>>defaultMorphicAction
		startpc: 	83
		numArgs: 	0


[] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		t1: 	ProgressInitiationException: 
		t2: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	<<error during printing>>

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	<<error during printing>>

ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('as yet unclassified' defaultAction defaultMorphicAction display...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
''

Array(Collection)>>do:displayingProgress:every:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

Array(Collection)>>do:displayingProgress:
	Receiver: an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a MethodReference SystemDictionary >> #recreateSpecialObjectsArray a MethodRefere...etc...

MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		t1: 	a PackageInfo(handles)
		t2: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' #'Handles...etc...
		t3: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Applicatio...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	'handles-JB.2'
		t2: 	'empty log message'
		t3: 	a MCVersionInfo(handles-JB.2)
		t4: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	2
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopy>>newVersion
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		t1: 	#('handles-JB.2' 'empty log message')
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	2
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()


MCWorkingCopyBrowser>>saveVersion
	Receiver: a MCWorkingCopyBrowser
	Arguments and temporary variables: 
		t1: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package-cache)
		t2: 	nil
	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		workingCopy: 	a MCWorkingCopy(handles)
		workingCopyWrapper: 	a MCDependentsWrapper
		repository: 	a MCCacheRepository(/Users/arnaudj/Desktop/GIT/Handle/Image/package...etc...
		defaults: 	a Dictionary(a MCWorkingCopy(handles)->a MCCacheRepository(/Users/arn...etc...
		order: 	2


PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
	Receiver: a PluggableButtonMorphPlus(226492416)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1783@170 corner: 1832@196
		owner: 	a PluggableThemedPanelMorph(220463104)
		submorphs: 	an Array(an AlignmentMorph(44302336))
		fullBounds: 	1783@170 corner: 1832@196
		color: 	Color transparent
		extension: 	a MorphExtension (720371712) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>performAction
	Receiver: a PluggableButtonMorphPlus(226492416)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	1783@170 corner: 1832@196
		owner: 	a PluggableThemedPanelMorph(220463104)
		submorphs: 	an Array(an AlignmentMorph(44302336))
		fullBounds: 	1783@170 corner: 1832@196
		color: 	Color transparent
		extension: 	a MorphExtension (720371712) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(226492416)
	Arguments and temporary variables: 
		t1: 	a PluggableButtonMorphPlus(226492416)
		t3: 	[1812@188 mouseUp 343972 nil]
	Receiver's instance variables: 
		bounds: 	1783@170 corner: 1832@196
		owner: 	a PluggableThemedPanelMorph(220463104)
		submorphs: 	an Array(an AlignmentMorph(44302336))
		fullBounds: 	1783@170 corner: 1832@196
		color: 	Color transparent
		extension: 	a MorphExtension (720371712) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorphPlus(594542592) a PluggableButtonMorphPlus(843055104) a Plu...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorphPlus(594542592) a PluggableButtonMorphPlus(843055104) a Plu...etc...

PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(226492416)
	Arguments and temporary variables: 
		t1: 	[1812@188 mouseUp 343972 nil]
		t2: 	an Array(a PluggableButtonMorphPlus(594542592) a PluggableButtonMorphPlus(8...etc...
	Receiver's instance variables: 
		bounds: 	1783@170 corner: 1832@196
		owner: 	a PluggableThemedPanelMorph(220463104)
		submorphs: 	an Array(an AlignmentMorph(44302336))
		fullBounds: 	1783@170 corner: 1832@196
		color: 	Color transparent
		extension: 	a MorphExtension (720371712) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus>>mouseUp:
	Receiver: a PluggableButtonMorphPlus(226492416)
	Arguments and temporary variables: 
		t1: 	[1812@188 mouseUp 343972 nil]
	Receiver's instance variables: 
		bounds: 	1783@170 corner: 1832@196
		owner: 	a PluggableThemedPanelMorph(220463104)
		submorphs: 	an Array(an AlignmentMorph(44302336))
		fullBounds: 	1783@170 corner: 1832@196
		color: 	Color transparent
		extension: 	a MorphExtension (720371712) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave


PluggableButtonMorphPlus(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorphPlus(226492416)
	Arguments and temporary variables: 
		t1: 	[1812@188 mouseUp 343972 nil]
	Receiver's instance variables: 
		bounds: 	1783@170 corner: 1832@196
		owner: 	a PluggableThemedPanelMorph(220463104)
		submorphs: 	an Array(an AlignmentMorph(44302336))
		fullBounds: 	1783@170 corner: 1832@196
		color: 	Color transparent
		extension: 	a MorphExtension (720371712) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a MCWorkingCopyBrowser
		label: 	'Save'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#saveVersion
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	Color white
		onColor: 	Color veryLightGray
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		action: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#canSave



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorImproperStore
ByteString>>at:put:
WriteStream>>pastEndPut:
WriteStream>>nextPut:
CompiledMethod>>getPreambleFrom:at:
CompiledMethod>>timeStamp
MethodReference>>timeStamp
MCMethodDefinition class>>forMethodReference:
MethodReference>>asMethodDefinition
[] in MCPackage>>snapshot
[] in [] in Array(Collection)>>do:displayingProgress:every:
Array(SequenceableCollection)>>do:
[] in Array(Collection)>>do:displayingProgress:every:
[] in [] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
Array(Collection)>>do:displayingProgress:every:
Array(Collection)>>do:displayingProgress:
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: RemoteString past end of file
2 December 2010 3:09:59 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

RemoteString(Object)>>error:
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	'RemoteString past end of file'
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


[] in RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RemoteString>>text
		startpc: 	72
		numArgs: 	0


RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
		t2: 	false
		t3: 	0
		t4: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
		t2: 	0
		t3: 	false
		t4: 	AbstractMirrorHandle
		t5: 	'AbstractMirrorHandle commentStamp: ''<historical>'' prior: 0'
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
		t2: 	false
		t3: 	0
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
		t2: 	false
		t3: 	0
		t4: 	false
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


[] in SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('AST-Core-Matching' RBBlockReplaceRule RBParseTreeRewriter RBParseTreeRule RBParseTreeSea...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'AST-Core-Matching' #'AST-Core-Nodes' #'AST-Core-Parser' #'AS...etc...
		categoryStops: 	#(8 24 28 34 47 49 53 64 73 74 76 79 80 81 93 100 101 102 106 11...etc...
		elementArray: 	#(#RBBlockReplaceRule #RBParseTreeRewriter #RBParseTreeRule #RBPa...etc...


Array(SequenceableCollection)>>do:
	Receiver: {AbstractMirrorHandle. PrimitivesScope}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{AbstractMirrorHandle. PrimitivesScope}

SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('AST-Core-Matching' RBBlockReplaceRule RBParseTreeRewriter RBParseTreeRule RBParseTreeSea...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'AST-Core-Matching' #'AST-Core-Nodes' #'AST-Core-Parser' #'AS...etc...
		categoryStops: 	#(8 24 28 34 47 49 53 64 73 74 76 79 80 81 93 100 101 102 106 11...etc...
		elementArray: 	#(#RBBlockReplaceRule #RBParseTreeRewriter #RBParseTreeRule #RBPa...etc...


SystemOrganizer>>fileOutCategory:
	Receiver: ('AST-Core-Matching' RBBlockReplaceRule RBParseTreeRewriter RBParseTreeRule RBParseTreeSea...etc...
	Arguments and temporary variables: 
		t1: 	#'Handles-ApplicationMirrorAPI'
		t2: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
	Receiver's instance variables: 
		categoryArray: 	#(#'AST-Core-Matching' #'AST-Core-Nodes' #'AST-Core-Parser' #'AS...etc...
		categoryStops: 	#(8 24 28 34 47 49 53 64 73 74 76 79 80 81 93 100 101 102 106 11...etc...
		elementArray: 	#(#RBBlockReplaceRule #RBParseTreeRewriter #RBParseTreeRule #RBPa...etc...


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<Handles-ApplicationMirrorAPI>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#'Handles-ApplicationMirrorAPI'


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<Handles-ApplicationMirrorAPI>
		requestor: 	an OBColumn(Handles-ApplicationMirrorAPI)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		t1: 	#execute
		t2: 	an OBPluggableListMorph(85983232)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<Handles-ApplicationMirrorAPI>
		requestor: 	an OBColumn(Handles-ApplicationMirrorAPI)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(349175808)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t3: 	2
	Receiver's instance variables: 
		bounds: 	80@1037 corner: 268@1051
		owner: 	a MenuMorph(752353280)
		submorphs: 	#()
		fullBounds: 	80@1037 corner: 268@1051
		color: 	Color black
		extension: 	a MorphExtension (29622272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(85983232))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(349175808)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t2: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	80@1037 corner: 268@1051
		owner: 	a MenuMorph(752353280)
		submorphs: 	#()
		fullBounds: 	80@1037 corner: 268@1051
		color: 	Color black
		extension: 	a MorphExtension (29622272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(85983232))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(349175808)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
	Receiver's instance variables: 
		bounds: 	80@1037 corner: 268@1051
		owner: 	a MenuMorph(752353280)
		submorphs: 	#()
		fullBounds: 	80@1037 corner: 268@1051
		color: 	Color black
		extension: 	a MorphExtension (29622272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(85983232))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(349175808)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
	Receiver's instance variables: 
		bounds: 	80@1037 corner: 268@1051
		owner: 	a MenuMorph(752353280)
		submorphs: 	#()
		fullBounds: 	80@1037 corner: 268@1051
		color: 	Color black
		extension: 	a MorphExtension (29622272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(85983232))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [110@1039 mouseUp 457273 nil]
	Arguments and temporary variables: 
		t1: 	a ToggleMenuItemMorph(349175808)'file out (o)'
	Receiver's instance variables: 
		timeStamp: 	457273
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	110@1039
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(349175808)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
	Receiver's instance variables: 
		bounds: 	80@1037 corner: 268@1051
		owner: 	a MenuMorph(752353280)
		submorphs: 	#()
		fullBounds: 	80@1037 corner: 268@1051
		color: 	Color black
		extension: 	a MorphExtension (29622272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(85983232))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t2: 	a ToggleMenuItemMorph(349175808)'file out (o)'
		t3: 	nil
		t4: 	1
		t5: 	nil
		t6: 	#()
		t7: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t2: 	a ToggleMenuItemMorph(349175808)'file out (o)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(349175808)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	80@1037 corner: 268@1051
		owner: 	a MenuMorph(752353280)
		submorphs: 	#()
		fullBounds: 	80@1037 corner: 268@1051
		color: 	Color black
		extension: 	a MorphExtension (29622272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(85983232))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t2: 	a MenuMorph(752353280)
		t3: 	[110@1039 mouseUp 457273 nil]
		t4: 	7
		t5: 	a ToggleMenuItemMorph(349175808)'file out (o)'
		t6: 	an Array(a ToggleMenuItemMorph(908853248)'add category...' a ToggleMenuItem...etc...
		t7: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t2: 	a MenuMorph(752353280)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(752353280)
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	76@959 corner: 272@1155
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(908853248)'add category...' a ToggleM...etc...
		fullBounds: 	76@959 corner: 273@1156
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (478937088) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(Handles-ApplicationMirrorAPI)
		selectedItem: 	a ToggleMenuItemMorph(349175808)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(752353280)
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
	Receiver's instance variables: 
		bounds: 	76@959 corner: 272@1155
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(908853248)'add category...' a ToggleM...etc...
		fullBounds: 	76@959 corner: 273@1156
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (478937088) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(Handles-ApplicationMirrorAPI)
		selectedItem: 	a ToggleMenuItemMorph(349175808)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(752353280)
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
	Receiver's instance variables: 
		bounds: 	76@959 corner: 272@1155
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(908853248)'add category...' a ToggleM...etc...
		fullBounds: 	76@959 corner: 273@1156
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (478937088) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(Handles-ApplicationMirrorAPI)
		selectedItem: 	a ToggleMenuItemMorph(349175808)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t2: 	a MenuMorph(752353280)
		t5: 	#(nil)
	Receiver's instance variables: 
		bounds: 	110@1039 corner: 126@1055
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	110@1039 corner: 126@1055
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(473694208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[110@1039 mouseUp 457273 nil]
		targetOffset: 	30@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 457273 110 1039 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(186384384) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(186384384) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	110@1039 corner: 126@1055
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	110@1039 corner: 126@1055
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(473694208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[110@1039 mouseUp 457273 nil]
		targetOffset: 	30@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 457273 110 1039 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	110@1039 corner: 126@1055
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	110@1039 corner: 126@1055
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(473694208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[110@1039 mouseUp 457273 nil]
		targetOffset: 	30@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 457273 110 1039 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
	Receiver's instance variables: 
		bounds: 	110@1039 corner: 126@1055
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	110@1039 corner: 126@1055
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(473694208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[110@1039 mouseUp 457273 nil]
		targetOffset: 	30@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 457273 110 1039 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[110@1039 mouseUp 457273 nil]
		t2: 	[110@1039 mouseUp 457273 nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	110@1039 corner: 126@1055
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	110@1039 corner: 126@1055
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(473694208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[110@1039 mouseUp 457273 nil]
		targetOffset: 	30@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 457273 110 1039 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil



--- The full stack ---
RemoteString(Object)>>error:
[] in RemoteString>>text
BlockClosure>>ensure:
RemoteString>>text
ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
[] in SystemOrganizer>>fileOutCategory:on:initializing:
Array(SequenceableCollection)>>do:
SystemOrganizer>>fileOutCategory:on:initializing:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
2 December 2010 3:10:27 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

[] in Delay>>wait
	Receiver: a Delay(19 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	19
		resumptionTime: 	485596
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


BlockClosure>>ifCurtailed:
	Receiver: [delaySemaphore wait]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	36
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(19 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	19
		resumptionTime: 	485596
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


WorldState>>interCyclePause:
	Receiver: a WorldState
	Arguments and temporary variables: 
		t1: 	20
		t2: 	485577
		t3: 	19
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(55574528))(a SystemWind...etc...
		lastStepTime: 	485577
		lastStepMessage: 	nil
		lastCycleTime: 	485604
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	485577
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		t1: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(55574528))(a SystemWind...etc...
		lastStepTime: 	485577
		lastStepMessage: 	nil
		lastCycleTime: 	485604
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	485577
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemProgressMorph(186384384) ...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(6236405...etc...
		format: 	168
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'previous...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
[] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
WorldState>>interCyclePause:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
2 December 2010 3:22:35 pm

VM: Mac OS - intel - 1065 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

MultiByteFileStream(Object)>>error:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 
		aString: 	'primClose: failed'
	Receiver's instance variables: 



MultiByteFileStream(Object)>>primitiveFailed:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 
		selector: 	#primClose:
	Receiver's instance variables: 



MultiByteFileStream(Object)>>primitiveFailed
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream(StandardFileStream)>>primClose:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 
		id: 	#[73 58 77 244 144 105 120 160 0 0 0 0 108 187 247 0 0 0 0 0 0 0 0 0]
	Receiver's instance variables: 



MultiByteFileStream(StandardFileStream)>>close
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/PharoV10.sources'...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



[] in [] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		x: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/Deployment/Pha...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


ExpandedSourceFileArray(SequenceableCollection)>>do:
	Receiver: an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/D...etc...
	Arguments and temporary variables: 
		aBlock: 	[:x | x notNil
		ifTrue: [x close]]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
		files: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/build/D...etc...


[] in PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		sourceFilesCopy: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaud...etc...
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MethodContext(ContextPart)>>resume:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		value: 	Project
		ctxt: 	BlockClosure>>ensure:
		unwindBlock: 	[sourceFilesCopy
		do: [:x | x notNil
				ifTrue: [x close]]]
	Receiver's instance variables: 
		sender: 	nil
		pc: 	nil
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(885784576)")
		closureOrNil: 	nil
		receiver: 	[chain := thisContext sender cut: ctxt.
	ctxt jump]


BlockClosure>>ensure:
	Receiver: [| file prevPos prevFileIndex chunk stamp methodCategory tokens |
method fileIndex == 0
		...etc...
	Arguments and temporary variables: 
		aBlock: 	[sourceFilesCopy
		do: [:x | x notNil
				ifTrue: [x close]]]
		complete: 	true
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PackageInfo>>changeRecordForOverriddenMethod:
		startpc: 	254
		numArgs: 	0


PackageInfo>>changeRecordForOverriddenMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aMethodReference: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		sourceFilesCopy: 	an ExpandedSourceFileArray(MultiByteFileStream: '/Users/arnaud...etc...
		method: 	(DamageRecorder>>#recordInvalidRect: "a CompiledMethod(821559296)")
		position: 	#(22514238)
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>isOverrideOfYourMethod:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aMethodReference: 	a MethodReference DamageRecorder >> #recordInvalidRect:
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	a MethodReference DamageRecorder >> #recordInvalidRect:
		ea: 	[:each | stream nextPut: each]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aClass: 	#recordInvalidRect:
		aBlock: 	DamageRecorder
		sel: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#recordInvalidRect:)
	Arguments and temporary variables: 
		aBlock: 	[:sel | aBlock
		value: (self referenceForMethod: sel ofClass: aClass)]...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
#(#recordInvalidRect:)

PackageInfo>>methodsInCategory:ofClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aString: 	#'*Polymorph-Widgets-override'
		aClass: 	DamageRecorder
		aBlock: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aClass: 	#'*Polymorph-Widgets-override'
		aBlock: 	DamageRecorder
		cat: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	#'*Polymorph-Widgets-override'
		cat: 	[:cat | self
		methodsInCategory: cat
		ofClass: aClass
		do: aBlock]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array(SequenceableCollection)>>do:
	Receiver: #(#'*Polymorph-Widgets-override' #initialization #recording #testing)
	Arguments and temporary variables: 
		aBlock: 	[:cat | (self isOverrideCategory: cat)
		ifTrue: [aBlock value: cat]]
		index: 	1
		indexLimiT: 	4
	Receiver's instance variables: 
#(#'*Polymorph-Widgets-override' #initialization #recording #testing)

PackageInfo>>overrideCategoriesForClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aClass: 	DamageRecorder
		aBlock: 	[:cat | self
		methodsInCategory: cat
		ofClass: aClass
		do: aBlock]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsInClass:do:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aClass: 	DamageRecorder
		aBlock: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	DamageRecorder
		class: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		aBlock: 	DamageRecorder
		cl: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 213...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	22
		indexLimiT: 	589
	Receiver's instance variables: 
an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ConnectionQueue Passwor...etc...

Object class(Class)>>subclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 213...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Behavior)>>allSubclassesDo:
	Receiver: Object
	Arguments and temporary variables: 
		aBlock: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 362)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' niActions niChildrenBlockForFixedFields niChildr...etc...
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 213...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[] in ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	Object
		cl: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
		index: 	1
		indexLimiT: 	5
	Receiver's instance variables: 
{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. ObjectTracer}

ProtoObject class(Class)>>subclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	[:cl | 
aBlock value: cl.
	cl allSubclassesDo: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>allSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(Behavior)>>withAllSubclassesDo:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		aBlock: 	[:class | self overriddenMethodsInClass: class do: aBlock]
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(343...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*NewInspector' asNINode chasePointers classStylePrintString niA...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. Object...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>allOverriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	[:ea | (self isOverrideOfYourMethod: ea)
		ifTrue: [aBlock value: ea]]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


PackageInfo>>overriddenMethodsDo:
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		aBlock: 	[:each | stream nextPut: each]
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


[] in PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 
		stream: 	a WriteStream #()
	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	100
		blockWithArg: 	[:stream | self
		overriddenMethodsDo: [:each | stream nextPut: e...etc...
		stream: 	a WriteStream #()
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		blockWithArg: 	[:stream | self
		overriddenMethodsDo: [:each | stream nextPut: e...etc...
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#asArray->(Array>>#asArray "a CompiledMethod(411...etc...
		format: 	6402
		instanceVariables: 	nil
		organization: 	('*system-settings-browser' settingStoreOn:)
('accessing' atWrap:...etc...
		subclasses: 	{WeakArray. ActionSequence. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Collections-Arrayed'
		traitComposition: 	nil
		localSelectors: 	nil


PackageInfo>>overriddenMethods
	Receiver: a PackageInfo(handles)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	'handles'
		methodCategoryPrefix: 	'*handles'


MCPackage>>snapshot
	Receiver: a MCPackage(handles)
	Arguments and temporary variables: 
		packageInfo: 	a PackageInfo(handles)
		definitions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'Handles-Core' ...etc...
		categories: 	#(#'Handles-Core' #'Handles-Test' #'Handles-ClassTest' #'Handles-Ap...etc...
	Receiver's instance variables: 
		name: 	'handles'


MCWorkingCopy>>newVersionWithName:message:
	Receiver: a MCWorkingCopy(handles)
	Arguments and temporary variables: 
		nameString: 	'handles-JB.1'
		messageString: 	'empty log message'
		info: 	a MCVersionInfo(handles-JB.1)
		deps: 	an OrderedCollection()
	Receiver's instance variables: 
		package: 	a MCPackage(handles)
		modified: 	false
		versionInfo: 	nil
		ancestry: 	a MCWorkingAncestry
		counter: 	1
		repositoryGroup: 	a MCRepositoryGroup
		requiredPackages: 	an OrderedCollection()



--- The full stack ---
MultiByteFileStream(Object)>>error:
MultiByteFileStream(Object)>>primitiveFailed:
MultiByteFileStream(Object)>>primitiveFailed
MultiByteFileStream(StandardFileStream)>>primClose:
MultiByteFileStream(StandardFileStream)>>close
[] in [] in PackageInfo>>changeRecordForOverriddenMethod:
ExpandedSourceFileArray(SequenceableCollection)>>do:
[] in PackageInfo>>changeRecordForOverriddenMethod:
MethodContext(ContextPart)>>resume:
BlockClosure>>ensure:
PackageInfo>>changeRecordForOverriddenMethod:
PackageInfo>>isOverrideOfYourMethod:
[] in PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>methodsInCategory:ofClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>methodsInCategory:ofClass:do:
[] in PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>overrideCategoriesForClass:do:
Array(SequenceableCollection)>>do:
PackageInfo>>overrideCategoriesForClass:do:
PackageInfo>>overriddenMethodsInClass:do:
[] in PackageInfo>>allOverriddenMethodsDo:
[] in Object class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
Object class(Class)>>subclassesDo:
Object class(Behavior)>>allSubclassesDo:
[] in ProtoObject class(Behavior)>>allSubclassesDo:
Array(SequenceableCollection)>>do:
ProtoObject class(Class)>>subclassesDo:
ProtoObject class(Behavior)>>allSubclassesDo:
ProtoObject class(Behavior)>>withAllSubclassesDo:
PackageInfo>>allOverriddenMethodsDo:
PackageInfo>>overriddenMethodsDo:
[] in PackageInfo>>overriddenMethods
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
PackageInfo>>overriddenMethods
MCPackage>>snapshot
MCWorkingCopy>>newVersionWithName:message:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MCWorkingCopy>>newVersion
MCWorkingCopyBrowser>>saveVersion
PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction
PluggableButtonMorphPlus>>performAction
[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:
PluggableButtonMorphPlus>>mouseUp:
PluggableButtonMorphPlus(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorphPlus(Morph)>>handleEvent:
PluggableButtonMorphPlus(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: RemoteString past end of file
2 December 2010 3:27:17 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

RemoteString(Object)>>error:
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	'RemoteString past end of file'
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


[] in RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RemoteString>>text
		startpc: 	72
		numArgs: 	0


RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
		t4: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	0
		t3: 	false
		t4: 	AbstractMirrorHandle
		t5: 	'AbstractMirrorHandle commentStamp: ''<historical>'' prior: 0'
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
		t4: 	true
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOut
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


OBMetaclassNode(OBClassNode)>>fileOut
	Receiver: OBMetaclassNode<AbstractMirrorHandle class>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Metaclass
#allCategory->AllMethodCategory
#categories->MethodCategory...etc...
		theClass: 	AbstractMirrorHandle class


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMetaclassNode<AbstractMirrorHandle class>
		requestor: 	an OBColumn(AbstractMirrorHandle)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		t1: 	#execute
		t2: 	an OBPluggableListMorph(544997376)
	Receiver's instance variables: 
		target: 	OBMetaclassNode<AbstractMirrorHandle class>
		requestor: 	an OBColumn(AbstractMirrorHandle)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(544997376)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t3: 	2
	Receiver's instance variables: 
		bounds: 	1681@704 corner: 1876@718
		owner: 	a MenuMorph(838860800)
		submorphs: 	#()
		fullBounds: 	1681@704 corner: 1876@718
		color: 	Color black
		extension: 	a MorphExtension (1044381696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(544997376)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	1681@704 corner: 1876@718
		owner: 	a MenuMorph(838860800)
		submorphs: 	#()
		fullBounds: 	1681@704 corner: 1876@718
		color: 	Color black
		extension: 	a MorphExtension (1044381696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(544997376)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
	Receiver's instance variables: 
		bounds: 	1681@704 corner: 1876@718
		owner: 	a MenuMorph(838860800)
		submorphs: 	#()
		fullBounds: 	1681@704 corner: 1876@718
		color: 	Color black
		extension: 	a MorphExtension (1044381696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(544997376)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
	Receiver's instance variables: 
		bounds: 	1681@704 corner: 1876@718
		owner: 	a MenuMorph(838860800)
		submorphs: 	#()
		fullBounds: 	1681@704 corner: 1876@718
		color: 	Color black
		extension: 	a MorphExtension (1044381696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [1720@714 mouseUp 14229 nil]
	Arguments and temporary variables: 
		t1: 	a ToggleMenuItemMorph(544997376)'file out (o)'
	Receiver's instance variables: 
		timeStamp: 	14229
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1720@714
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(544997376)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
	Receiver's instance variables: 
		bounds: 	1681@704 corner: 1876@718
		owner: 	a MenuMorph(838860800)
		submorphs: 	#()
		fullBounds: 	1681@704 corner: 1876@718
		color: 	Color black
		extension: 	a MorphExtension (1044381696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	a ToggleMenuItemMorph(544997376)'file out (o)'
		t3: 	nil
		t4: 	1
		t5: 	nil
		t6: 	#()
		t7: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	a ToggleMenuItemMorph(544997376)'file out (o)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(544997376)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1681@704 corner: 1876@718
		owner: 	a MenuMorph(838860800)
		submorphs: 	#()
		fullBounds: 	1681@704 corner: 1876@718
		color: 	Color black
		extension: 	a MorphExtension (1044381696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	a MenuMorph(838860800)
		t3: 	[1720@714 mouseUp 14229 nil]
		t4: 	1
		t5: 	a ToggleMenuItemMorph(544997376)'file out (o)'
		t6: 	an Array(a ToggleMenuItemMorph(544997376)'file out (o)' a ToggleMenuItemMor...etc...
		t7: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	a MenuMorph(838860800)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(838860800)
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1677@700 corner: 1880@960
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(544997376)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1677@700 corner: 1881@961
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (924057600) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(AbstractMirrorHandle)
		selectedItem: 	a ToggleMenuItemMorph(544997376)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(838860800)
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
	Receiver's instance variables: 
		bounds: 	1677@700 corner: 1880@960
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(544997376)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1677@700 corner: 1881@961
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (924057600) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(AbstractMirrorHandle)
		selectedItem: 	a ToggleMenuItemMorph(544997376)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(838860800)
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
	Receiver's instance variables: 
		bounds: 	1677@700 corner: 1880@960
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(544997376)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1677@700 corner: 1881@961
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (924057600) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(AbstractMirrorHandle)
		selectedItem: 	a ToggleMenuItemMorph(544997376)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	a MenuMorph(838860800)
		t5: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1720@714 corner: 1736@730
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1720@714 corner: 1736@730
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(708837376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1720@714 mouseUp 14229 nil]
		targetOffset: 	39@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14229 1720 714 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(78381056) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(78381056) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1720@714 corner: 1736@730
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1720@714 corner: 1736@730
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(708837376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1720@714 mouseUp 14229 nil]
		targetOffset: 	39@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14229 1720 714 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1720@714 corner: 1736@730
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1720@714 corner: 1736@730
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(708837376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1720@714 mouseUp 14229 nil]
		targetOffset: 	39@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14229 1720 714 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
	Receiver's instance variables: 
		bounds: 	1720@714 corner: 1736@730
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1720@714 corner: 1736@730
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(708837376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1720@714 mouseUp 14229 nil]
		targetOffset: 	39@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14229 1720 714 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	[1720@714 mouseUp 14229 nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	1720@714 corner: 1736@730
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1720@714 corner: 1736@730
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(708837376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1720@714 mouseUp 14229 nil]
		targetOffset: 	39@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14229 1720 714 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1720@714 mouseUp 14229 nil]
		t2: 	#(1 14229 1720 714 0 0 0 1)
		t3: 	1
		t4: 	false
	Receiver's instance variables: 
		bounds: 	1720@714 corner: 1736@730
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1720@714 corner: 1736@730
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(708837376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1720@714 mouseUp 14229 nil]
		targetOffset: 	39@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14229 1720 714 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		t2: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(78381056))(a PreDebug...etc...
		lastStepTime: 	14220
		lastStepMessage: 	nil
		lastCycleTime: 	14260
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	14220
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
RemoteString(Object)>>error:
[] in RemoteString>>text
BlockClosure>>ensure:
RemoteString>>text
ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:
AbstractMirrorHandle class(Class)>>fileOut
OBMetaclassNode(OBClassNode)>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: RemoteString past end of file
2 December 2010 3:27:41 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

RemoteString(Object)>>error:
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	'RemoteString past end of file'
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


[] in RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RemoteString>>text
		startpc: 	72
		numArgs: 	0


RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
		t4: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	0
		t3: 	false
		t4: 	AbstractMirrorHandle
		t5: 	'AbstractMirrorHandle commentStamp: ''<historical>'' prior: 0'
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
		t4: 	true
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOut
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


OBClassNode>>fileOut
	Receiver: OBClassNode<AbstractMirrorHandle>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	AbstractMirrorHandle


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<AbstractMirrorHandle>
		requestor: 	an OBColumn(AbstractMirrorHandle)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		t1: 	#execute
		t2: 	an OBPluggableListMorph(544997376)
	Receiver's instance variables: 
		target: 	OBClassNode<AbstractMirrorHandle>
		requestor: 	an OBColumn(AbstractMirrorHandle)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(58195968)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t3: 	2
	Receiver's instance variables: 
		bounds: 	1697@706 corner: 1892@720
		owner: 	a MenuMorph(107216896)
		submorphs: 	#()
		fullBounds: 	1697@706 corner: 1892@720
		color: 	Color black
		extension: 	a MorphExtension (919339008)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(58195968)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	1697@706 corner: 1892@720
		owner: 	a MenuMorph(107216896)
		submorphs: 	#()
		fullBounds: 	1697@706 corner: 1892@720
		color: 	Color black
		extension: 	a MorphExtension (919339008)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(58195968)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
	Receiver's instance variables: 
		bounds: 	1697@706 corner: 1892@720
		owner: 	a MenuMorph(107216896)
		submorphs: 	#()
		fullBounds: 	1697@706 corner: 1892@720
		color: 	Color black
		extension: 	a MorphExtension (919339008)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(58195968)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
	Receiver's instance variables: 
		bounds: 	1697@706 corner: 1892@720
		owner: 	a MenuMorph(107216896)
		submorphs: 	#()
		fullBounds: 	1697@706 corner: 1892@720
		color: 	Color black
		extension: 	a MorphExtension (919339008)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [1725@716 mouseUp 37716 nil]
	Arguments and temporary variables: 
		t1: 	a ToggleMenuItemMorph(58195968)'file out (o)'
	Receiver's instance variables: 
		timeStamp: 	37716
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1725@716
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(58195968)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
	Receiver's instance variables: 
		bounds: 	1697@706 corner: 1892@720
		owner: 	a MenuMorph(107216896)
		submorphs: 	#()
		fullBounds: 	1697@706 corner: 1892@720
		color: 	Color black
		extension: 	a MorphExtension (919339008)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	a ToggleMenuItemMorph(58195968)'file out (o)'
		t3: 	nil
		t4: 	1
		t5: 	nil
		t6: 	#()
		t7: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	a ToggleMenuItemMorph(58195968)'file out (o)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(58195968)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1697@706 corner: 1892@720
		owner: 	a MenuMorph(107216896)
		submorphs: 	#()
		fullBounds: 	1697@706 corner: 1892@720
		color: 	Color black
		extension: 	a MorphExtension (919339008)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	a MenuMorph(107216896)
		t3: 	[1725@716 mouseUp 37716 nil]
		t4: 	1
		t5: 	a ToggleMenuItemMorph(58195968)'file out (o)'
		t6: 	an Array(a ToggleMenuItemMorph(58195968)'file out (o)' a ToggleMenuItemMorp...etc...
		t7: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	a MenuMorph(107216896)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(107216896)
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1693@702 corner: 1896@962
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(58195968)'file out (o)' a ToggleMenuI...etc...
		fullBounds: 	1693@702 corner: 1897@963
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (585629696) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(AbstractMirrorHandle)
		selectedItem: 	a ToggleMenuItemMorph(58195968)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(107216896)
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
	Receiver's instance variables: 
		bounds: 	1693@702 corner: 1896@962
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(58195968)'file out (o)' a ToggleMenuI...etc...
		fullBounds: 	1693@702 corner: 1897@963
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (585629696) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(AbstractMirrorHandle)
		selectedItem: 	a ToggleMenuItemMorph(58195968)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(107216896)
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
	Receiver's instance variables: 
		bounds: 	1693@702 corner: 1896@962
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(58195968)'file out (o)' a ToggleMenuI...etc...
		fullBounds: 	1693@702 corner: 1897@963
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (585629696) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(AbstractMirrorHandle)
		selectedItem: 	a ToggleMenuItemMorph(58195968)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	a MenuMorph(107216896)
		t5: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1725@716 corner: 1741@732
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1725@716 corner: 1741@732
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(779878400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1725@716 mouseUp 37716 nil]
		targetOffset: 	28@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 37716 1725 716 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(769916928) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(769916928) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1725@716 corner: 1741@732
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1725@716 corner: 1741@732
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(779878400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1725@716 mouseUp 37716 nil]
		targetOffset: 	28@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 37716 1725 716 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1725@716 corner: 1741@732
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1725@716 corner: 1741@732
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(779878400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1725@716 mouseUp 37716 nil]
		targetOffset: 	28@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 37716 1725 716 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
	Receiver's instance variables: 
		bounds: 	1725@716 corner: 1741@732
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1725@716 corner: 1741@732
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(779878400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1725@716 mouseUp 37716 nil]
		targetOffset: 	28@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 37716 1725 716 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	[1725@716 mouseUp 37716 nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	1725@716 corner: 1741@732
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1725@716 corner: 1741@732
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(779878400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1725@716 mouseUp 37716 nil]
		targetOffset: 	28@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 37716 1725 716 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1725@716 mouseUp 37716 nil]
		t2: 	#(1 37716 1725 716 0 0 0 1)
		t3: 	1
		t4: 	false
	Receiver's instance variables: 
		bounds: 	1725@716 corner: 1741@732
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1725@716 corner: 1741@732
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(779878400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1725@716 mouseUp 37716 nil]
		targetOffset: 	28@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 37716 1725 716 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		t2: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(769916928))(a PreDebu...etc...
		lastStepTime: 	37696
		lastStepMessage: 	nil
		lastCycleTime: 	37737
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	37696
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
RemoteString(Object)>>error:
[] in RemoteString>>text
BlockClosure>>ensure:
RemoteString>>text
ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:
AbstractMirrorHandle class(Class)>>fileOut
OBClassNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: RemoteString past end of file
2 December 2010 3:28:05 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

RemoteString(Object)>>error:
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	'RemoteString past end of file'
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


[] in RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RemoteString>>text
		startpc: 	72
		numArgs: 	0


RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
		t4: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	0
		t3: 	false
		t4: 	AbstractMirrorHandle
		t5: 	'AbstractMirrorHandle commentStamp: ''<historical>'' prior: 0'
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
		t4: 	true
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
		t2: 	false
		t3: 	0
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOut
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream '''From Pharo-1.1-11411 of 17 July 2010 [Latest update: #1141...etc...
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


OBMetaclassNode(OBClassNode)>>fileOut
	Receiver: OBMetaclassNode<AbstractMirrorHandle class>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Metaclass
#allCategory->AllMethodCategory
#categories->MethodCategory...etc...
		theClass: 	AbstractMirrorHandle class


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMetaclassNode<AbstractMirrorHandle class>
		requestor: 	an OBColumn(AbstractMirrorHandle)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		t1: 	#execute
		t2: 	an OBPluggableListMorph(544997376)
	Receiver's instance variables: 
		target: 	OBMetaclassNode<AbstractMirrorHandle class>
		requestor: 	an OBColumn(AbstractMirrorHandle)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(268697600)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t3: 	2
	Receiver's instance variables: 
		bounds: 	1298@682 corner: 1493@696
		owner: 	a MenuMorph(876085248)
		submorphs: 	#()
		fullBounds: 	1298@682 corner: 1493@696
		color: 	Color black
		extension: 	a MorphExtension (480772096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(268697600)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	1298@682 corner: 1493@696
		owner: 	a MenuMorph(876085248)
		submorphs: 	#()
		fullBounds: 	1298@682 corner: 1493@696
		color: 	Color black
		extension: 	a MorphExtension (480772096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(268697600)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
	Receiver's instance variables: 
		bounds: 	1298@682 corner: 1493@696
		owner: 	a MenuMorph(876085248)
		submorphs: 	#()
		fullBounds: 	1298@682 corner: 1493@696
		color: 	Color black
		extension: 	a MorphExtension (480772096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(268697600)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
	Receiver's instance variables: 
		bounds: 	1298@682 corner: 1493@696
		owner: 	a MenuMorph(876085248)
		submorphs: 	#()
		fullBounds: 	1298@682 corner: 1493@696
		color: 	Color black
		extension: 	a MorphExtension (480772096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [1338@688 mouseUp 62052 nil]
	Arguments and temporary variables: 
		t1: 	a ToggleMenuItemMorph(268697600)'file out (o)'
	Receiver's instance variables: 
		timeStamp: 	62052
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1338@688
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(268697600)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
	Receiver's instance variables: 
		bounds: 	1298@682 corner: 1493@696
		owner: 	a MenuMorph(876085248)
		submorphs: 	#()
		fullBounds: 	1298@682 corner: 1493@696
		color: 	Color black
		extension: 	a MorphExtension (480772096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	a ToggleMenuItemMorph(268697600)'file out (o)'
		t3: 	nil
		t4: 	1
		t5: 	nil
		t6: 	#()
		t7: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	a ToggleMenuItemMorph(268697600)'file out (o)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(268697600)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1298@682 corner: 1493@696
		owner: 	a MenuMorph(876085248)
		submorphs: 	#()
		fullBounds: 	1298@682 corner: 1493@696
		color: 	Color black
		extension: 	a MorphExtension (480772096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(544997376))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	a MenuMorph(876085248)
		t3: 	[1338@688 mouseUp 62052 nil]
		t4: 	1
		t5: 	a ToggleMenuItemMorph(268697600)'file out (o)'
		t6: 	an Array(a ToggleMenuItemMorph(268697600)'file out (o)' a ToggleMenuItemMor...etc...
		t7: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	a MenuMorph(876085248)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(876085248)
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1294@678 corner: 1497@953
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(268697600)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1294@678 corner: 1498@954
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (510394368) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(AbstractMirrorHandle)
		selectedItem: 	a ToggleMenuItemMorph(268697600)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(876085248)
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
	Receiver's instance variables: 
		bounds: 	1294@678 corner: 1497@953
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(268697600)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1294@678 corner: 1498@954
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (510394368) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(AbstractMirrorHandle)
		selectedItem: 	a ToggleMenuItemMorph(268697600)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(876085248)
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
	Receiver's instance variables: 
		bounds: 	1294@678 corner: 1497@953
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(268697600)'file out (o)' a ToggleMenu...etc...
		fullBounds: 	1294@678 corner: 1498@954
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (510394368) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(AbstractMirrorHandle)
		selectedItem: 	a ToggleMenuItemMorph(268697600)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	a MenuMorph(876085248)
		t5: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1338@688 corner: 1354@704
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1338@688 corner: 1354@704
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(490471424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1338@688 mouseUp 62052 nil]
		targetOffset: 	40@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 62052 1338 688 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(647495680) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(647495680) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1338@688 corner: 1354@704
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1338@688 corner: 1354@704
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(490471424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1338@688 mouseUp 62052 nil]
		targetOffset: 	40@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 62052 1338 688 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1338@688 corner: 1354@704
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1338@688 corner: 1354@704
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(490471424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1338@688 mouseUp 62052 nil]
		targetOffset: 	40@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 62052 1338 688 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
	Receiver's instance variables: 
		bounds: 	1338@688 corner: 1354@704
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1338@688 corner: 1354@704
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(490471424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1338@688 mouseUp 62052 nil]
		targetOffset: 	40@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 62052 1338 688 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	[1338@688 mouseUp 62052 nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	1338@688 corner: 1354@704
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1338@688 corner: 1354@704
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(490471424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1338@688 mouseUp 62052 nil]
		targetOffset: 	40@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 62052 1338 688 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1338@688 mouseUp 62052 nil]
		t2: 	#(1 62052 1338 688 0 0 0 1)
		t3: 	1
		t4: 	false
	Receiver's instance variables: 
		bounds: 	1338@688 corner: 1354@704
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1338@688 corner: 1354@704
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(490471424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1338@688 mouseUp 62052 nil]
		targetOffset: 	40@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 62052 1338 688 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		t2: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2216@1466
		canvas: 	a FormCanvas on: DisplayScreen(2216x1466x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(647495680))(a PreDebu...etc...
		lastStepTime: 	62046
		lastStepMessage: 	nil
		lastCycleTime: 	62086
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	62046
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
RemoteString(Object)>>error:
[] in RemoteString>>text
BlockClosure>>ensure:
RemoteString>>text
ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:
AbstractMirrorHandle class(Class)>>fileOut
OBMetaclassNode(OBClassNode)>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: RemoteString past end of file
2 December 2010 3:28:15 pm

VM: Mac OS - intel - 1065 - Squeak4.1 of 17 April 2010 [latest update: #9957] 21.0
Image: Pharo-1.1-11411 [Latest update: #11411]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Image
Trusted Dir /foobar/tooBar/forSqueak/bogus/
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak/

RemoteString(Object)>>error:
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	'RemoteString past end of file'
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


[] in RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	RemoteString>>text
		startpc: 	72
		numArgs: 	0


RemoteString>>text
	Receiver: a RemoteString
	Arguments and temporary variables: 
		t1: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Image/Handle-Image....etc...
	Receiver's instance variables: 
		sourceFileNumber: 	2
		filePositionHi: 	13866922


ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
		t2: 	false
		t3: 	0
		t4: 	nil
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
	Receiver: ('as yet unclassified')

	Arguments and temporary variables: 
		t1: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
		t2: 	0
		t3: 	false
		t4: 	AbstractMirrorHandle
		t5: 	'AbstractMirrorHandle commentStamp: ''<historical>'' prior: 0'
	Receiver's instance variables: 
		categoryArray: 	#(#'as yet unclassified')
		categoryStops: 	#(0)
		elementArray: 	#()
		subject: 	AbstractMirrorHandle
		classComment: 	a RemoteString
		commentStamp: 	'<historical>'


AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
		t2: 	false
		t3: 	0
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: AbstractMirrorHandle
	Arguments and temporary variables: 
		t1: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
		t2: 	false
		t3: 	0
		t4: 	false
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{MirrorHandleTest. PrimitivesScope}
		name: 	#AbstractMirrorHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-ApplicationMirrorAPI'
		traitComposition: 	nil
		localSelectors: 	nil


[] in SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('AST-Core-Matching' RBBlockReplaceRule RBParseTreeRewriter RBParseTreeRule RBParseTreeSea...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'AST-Core-Matching' #'AST-Core-Nodes' #'AST-Core-Parser' #'AS...etc...
		categoryStops: 	#(8 24 28 34 47 49 53 64 73 74 76 79 80 81 93 100 101 102 106 11...etc...
		elementArray: 	#(#RBBlockReplaceRule #RBParseTreeRewriter #RBParseTreeRule #RBPa...etc...


Array(SequenceableCollection)>>do:
	Receiver: {AbstractMirrorHandle. PrimitivesScope}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{AbstractMirrorHandle. PrimitivesScope}

SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('AST-Core-Matching' RBBlockReplaceRule RBParseTreeRewriter RBParseTreeRule RBParseTreeSea...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'AST-Core-Matching' #'AST-Core-Nodes' #'AST-Core-Parser' #'AS...etc...
		categoryStops: 	#(8 24 28 34 47 49 53 64 73 74 76 79 80 81 93 100 101 102 106 11...etc...
		elementArray: 	#(#RBBlockReplaceRule #RBParseTreeRewriter #RBParseTreeRule #RBPa...etc...


SystemOrganizer>>fileOutCategory:
	Receiver: ('AST-Core-Matching' RBBlockReplaceRule RBParseTreeRewriter RBParseTreeRule RBParseTreeSea...etc...
	Arguments and temporary variables: 
		t1: 	#'Handles-ApplicationMirrorAPI'
		t2: 	a WriteStream 'Handle subclass: #AbstractMirrorHandle
	instanceVariableName...etc...
	Receiver's instance variables: 
		categoryArray: 	#(#'AST-Core-Matching' #'AST-Core-Nodes' #'AST-Core-Parser' #'AS...etc...
		categoryStops: 	#(8 24 28 34 47 49 53 64 73 74 76 79 80 81 93 100 101 102 106 11...etc...
		elementArray: 	#(#RBBlockReplaceRule #RBParseTreeRewriter #RBParseTreeRule #RBPa...etc...


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<Handles-ApplicationMirrorAPI>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#'Handles-ApplicationMirrorAPI'


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<Handles-ApplicationMirrorAPI>
		requestor: 	an OBColumn(Handles-ApplicationMirrorAPI)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		t1: 	#execute
		t2: 	an OBPluggableListMorph(902299648)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<Handles-ApplicationMirrorAPI>
		requestor: 	an OBColumn(Handles-ApplicationMirrorAPI)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(338952192)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t3: 	2
	Receiver's instance variables: 
		bounds: 	1077@839 corner: 1272@853
		owner: 	a MenuMorph(246677504)
		submorphs: 	#()
		fullBounds: 	1077@839 corner: 1272@853
		color: 	Color black
		extension: 	a MorphExtension (1041760256)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(902299648))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(338952192)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t2: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	1077@839 corner: 1272@853
		owner: 	a MenuMorph(246677504)
		submorphs: 	#()
		fullBounds: 	1077@839 corner: 1272@853
		color: 	Color black
		extension: 	a MorphExtension (1041760256)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(902299648))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(338952192)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
	Receiver's instance variables: 
		bounds: 	1077@839 corner: 1272@853
		owner: 	a MenuMorph(246677504)
		submorphs: 	#()
		fullBounds: 	1077@839 corner: 1272@853
		color: 	Color black
		extension: 	a MorphExtension (1041760256)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(902299648))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(338952192)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
	Receiver's instance variables: 
		bounds: 	1077@839 corner: 1272@853
		owner: 	a MenuMorph(246677504)
		submorphs: 	#()
		fullBounds: 	1077@839 corner: 1272@853
		color: 	Color black
		extension: 	a MorphExtension (1041760256)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(902299648))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [1093@842 mouseUp 71780 nil]
	Arguments and temporary variables: 
		t1: 	a ToggleMenuItemMorph(338952192)'file out (o)'
	Receiver's instance variables: 
		timeStamp: 	71780
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1093@842
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(338952192)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
	Receiver's instance variables: 
		bounds: 	1077@839 corner: 1272@853
		owner: 	a MenuMorph(246677504)
		submorphs: 	#()
		fullBounds: 	1077@839 corner: 1272@853
		color: 	Color black
		extension: 	a MorphExtension (1041760256)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(902299648))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t2: 	a ToggleMenuItemMorph(338952192)'file out (o)'
		t3: 	nil
		t4: 	1
		t5: 	nil
		t6: 	#()
		t7: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t2: 	a ToggleMenuItemMorph(338952192)'file out (o)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(338952192)'file out (o)'
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1077@839 corner: 1272@853
		owner: 	a MenuMorph(246677504)
		submorphs: 	#()
		fullBounds: 	1077@839 corner: 1272@853
		color: 	Color black
		extension: 	a MorphExtension (1041760256)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'file out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(902299648))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t2: 	a MenuMorph(246677504)
		t3: 	[1093@842 mouseUp 71780 nil]
		t4: 	7
		t5: 	a ToggleMenuItemMorph(338952192)'file out (o)'
		t6: 	an Array(a ToggleMenuItemMorph(781451264)'add category...' a ToggleMenuItem...etc...
		t7: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t2: 	a MenuMorph(246677504)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(246677504)
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1073@761 corner: 1276@1002
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(781451264)'add category...' a ToggleM...etc...
		fullBounds: 	1073@761 corner: 1277@1003
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (502792192) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(Handles-ApplicationMirrorAPI)
		selectedItem: 	a ToggleMenuItemMorph(338952192)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(246677504)
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
	Receiver's instance variables: 
		bounds: 	1073@761 corner: 1276@1002
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(781451264)'add category...' a ToggleM...etc...
		fullBounds: 	1073@761 corner: 1277@1003
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (502792192) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(Handles-ApplicationMirrorAPI)
		selectedItem: 	a ToggleMenuItemMorph(338952192)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(246677504)
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
	Receiver's instance variables: 
		bounds: 	1073@761 corner: 1276@1002
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(781451264)'add category...' a ToggleM...etc...
		fullBounds: 	1073@761 corner: 1277@1003
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (502792192) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(Handles-ApplicationMirrorAPI)
		selectedItem: 	a ToggleMenuItemMorph(338952192)'file out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t2: 	a MenuMorph(246677504)
		t5: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1093@842 corner: 1109@858
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1093@842 corner: 1109@858
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(94633984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1093@842 mouseUp 71780 nil]
		targetOffset: 	16@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 71780 1093 842 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(764936192) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2216@1466
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(764936192) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	an AlphaImageMorph(686292992)
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1093@842 corner: 1109@858
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1093@842 corner: 1109@858
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(94633984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1093@842 mouseUp 71780 nil]
		targetOffset: 	16@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 71780 1093 842 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	1093@842 corner: 1109@858
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1093@842 corner: 1109@858
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(94633984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1093@842 mouseUp 71780 nil]
		targetOffset: 	16@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 71780 1093 842 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
	Receiver's instance variables: 
		bounds: 	1093@842 corner: 1109@858
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1093@842 corner: 1109@858
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(94633984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1093@842 mouseUp 71780 nil]
		targetOffset: 	16@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 71780 1093 842 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		t1: 	[1093@842 mouseUp 71780 nil]
		t2: 	[1093@842 mouseUp 71780 nil]
		t3: 	nil
	Receiver's instance variables: 
		bounds: 	1093@842 corner: 1109@858
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1093@842 corner: 1109@858
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(94633984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1093@842 mouseUp 71780 nil]
		targetOffset: 	16@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 71780 1093 842 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil



--- The full stack ---
RemoteString(Object)>>error:
[] in RemoteString>>text
BlockClosure>>ensure:
RemoteString>>text
ClassOrganizer(BasicClassOrganizer)>>fileOutCommentOn:moveSource:toFile:
ClassOrganizer(BasicClassOrganizer)>>putCommentOnFile:numbered:moveSource:forClass:
AbstractMirrorHandle class(ClassDescription)>>fileOutOn:moveSource:toFile:
AbstractMirrorHandle class(Class)>>fileOutOn:moveSource:toFile:initializing:
[] in SystemOrganizer>>fileOutCategory:on:initializing:
Array(SequenceableCollection)>>do:
SystemOrganizer>>fileOutCategory:on:initializing:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------


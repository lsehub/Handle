THERE_BE_DRAGONS_HERE
User Interrupt
31 March 2011 4:38:26 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/ChangeVM
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

WeakArray class>>finalizationProcess
	Receiver: WeakArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Array
		methodDict: 	a MethodDictionary()
		format: 	514
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#WeakArray
		classPool: 	a Dictionary(#FinalizationDependents->a WeakArray(nil a WeakRegistry...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Weak'
		traitComposition: 	{}
		localSelectors: 	nil


[self finalizationProcess] in WeakArray class>>restartFinalizationProcess
	Receiver: WeakArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Array
		methodDict: 	a MethodDictionary()
		format: 	514
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#WeakArray
		classPool: 	a Dictionary(#FinalizationDependents->a WeakArray(nil a WeakRegistry...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Weak'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [self finalizationProcess]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WeakArray class>>restartFinalizationProcess
		startpc: 	111
		numArgs: 	0



--- The full stack ---
WeakArray class>>finalizationProcess
[self finalizationProcess] in WeakArray class>>restartFinalizationProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Handle>>getInstanceVarPrim
31 March 2011 5:11:16 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Handle(Object)>>doesNotUnderstand: #getInstanceVarPrim
	Receiver: a Handle
	Arguments and temporary variables: 
		aMessage: 	getInstanceVarPrim
		exception: 	MessageNotUnderstood: Handle>>getInstanceVarPrim
		resumeValue: 	nil
	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	6


[hbm getInstanceVarPrim] in [1000000
		timesRepeat: [hbm getInstanceVarPrim]] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

SmallInteger(Integer)>>timesRepeat:
	Receiver: 1000000
	Arguments and temporary variables: 
		aBlock: 	[hbm getInstanceVarPrim]
		count: 	1
	Receiver's instance variables: 
1000000

[1000000
		timesRepeat: [hbm getInstanceVarPrim]] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[1000000
		timesRepeat: [hbm getInstanceVarPrim]]
		initialMilliseconds: 	11160
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->(Time>>#< "a CompiledMethod(693895168)") #=-...etc...
		format: 	134
		instanceVariables: 	#('seconds' 'nanos')
		organization: 	('ansi protocol' < = duration hash hour hour12 hour24 meridianAbb...etc...
		subclasses: 	nil
		name: 	#Time
		classPool: 	nil
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [1000000
		timesRepeat: [hbm getInstanceVarPrim]]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	37
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'bm := BenchmarkClass new. 
	[1000000 timesRepe...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ [1000000
		timesRepeat: [hbm getInstanceVarPrim]] timeToRun...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(794820608)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'bm := BenchmarkClass new. 
	[1000000 timesRepe...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>inspectIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>inspectIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
		asciiValue: 	105
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 11811) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getInst...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getI...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 11811) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getInst...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 11811) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getInst...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 11811) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getInst...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(510918656)
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(510918656)
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 11811) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getInst...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		view: 	a PluggableTextMorph(218103808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 11811) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getInst...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 11811) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getInst...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(510918656)
	Receiver's instance variables: 
		timeStamp: 	11156
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	353@34
		handler: 	nil
		wasHandled: 	true
		keyValue: 	105
		charCode: 	105
		scanCode: 	34


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 11811) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getInst...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 11811) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'bm := BenchmarkClass new. 
	[1000000 timesRepeat: [bm getInst...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		focusHolder: 	a TextMorphForEditView(510918656)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	418@279 corner: 434@295
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	418@279 corner: 434@295
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188481536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[418@279 418@279 mouseMove CMD 10756 nil]
		targetOffset: 	66@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10756 418 279 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@718
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(589299712) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@718
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(589299712) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		focusHolder: 	a TextMorphForEditView(510918656)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	418@279 corner: 434@295
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	418@279 corner: 434@295
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188481536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[418@279 418@279 mouseMove CMD 10756 nil]
		targetOffset: 	66@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10756 418 279 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		focusHolder: 	a TextMorphForEditView(510918656)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	418@279 corner: 434@295
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	418@279 corner: 434@295
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188481536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[418@279 418@279 mouseMove CMD 10756 nil]
		targetOffset: 	66@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10756 418 279 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	418@279 corner: 434@295
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	418@279 corner: 434@295
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188481536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[418@279 418@279 mouseMove CMD 10756 nil]
		targetOffset: 	66@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10756 418 279 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		evt: 	[keystroke '<Cmd-i>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	418@279 corner: 434@295
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	418@279 corner: 434@295
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188481536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[418@279 418@279 mouseMove CMD 10756 nil]
		targetOffset: 	66@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10756 418 279 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		evtBuf: 	#(2 11156 105 0 8 105 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	418@279 corner: 434@295
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	418@279 corner: 434@295
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(188481536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[418@279 418@279 mouseMove CMD 10756 nil]
		targetOffset: 	66@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10756 418 279 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@718
		canvas: 	a FormCanvas on: DisplayScreen(1264x718x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	11135
		lastStepMessage: 	nil
		lastCycleTime: 	11176
		alarms: 	a Heap()
		lastAlarmTime: 	11135
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
Handle(Object)>>doesNotUnderstand: #getInstanceVarPrim
[hbm getInstanceVarPrim] in [1000000
		timesRepeat: [hbm getInstanceVarPrim]] in UndefinedObject>>DoIt
SmallInteger(Integer)>>timesRepeat:
[1000000
		timesRepeat: [hbm getInstanceVarPrim]] in UndefinedObject>>DoIt
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>inspectIt
SmalltalkEditor>>inspectIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: activateHandle failed
31 March 2011 5:27:20 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

BenchHandle(Object)>>error:
	Receiver: a BenchHandle
	Arguments and temporary variables: 
		aString: 	'activateHandle failed'
	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle(Object)>>primitiveFailed:
	Receiver: a BenchHandle
	Arguments and temporary variables: 
		selector: 	#activateHandle
	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle(Object)>>primitiveFailed
	Receiver: a BenchHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle(Handle)>>activateHandle
	Receiver: a BenchHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle class(Handle class)>>for:to:
	Receiver: BenchHandle
	Arguments and temporary variables: 
		anObject: 	a BenchmarkClass
		aShadowClass: 	BenchmarkClass
		handle: 	a BenchHandle
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary(#initialize->(BenchHandle>>#initialize "a Compil...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified' initialize)

		subclasses: 	nil
		name: 	#BenchHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Benchmark'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '"Global OverHead"
(1 to: 100) collect: [:each ...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ hbm := BenchHandle for: bm to: BenchmarkClass
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(749993984)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '"Global OverHead"
(1 to: 100) collect: [:each ...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 394823) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 t...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 394823) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 394823) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 394823) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(510918656)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(510918656)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 394823) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(218103808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 394823) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 394823) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(510918656)
	Receiver's instance variables: 
		timeStamp: 	394220
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	316@141
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 394823) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 394823) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(510918656)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	381@386 corner: 397@402
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	381@386 corner: 397@402
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(739508224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[381@386 381@386 mouseMove CMD 393770 nil]
		targetOffset: 	313@147
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 393770 381 386 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@718
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(600047616) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@718
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(600047616) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(510918656)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	381@386 corner: 397@402
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	381@386 corner: 397@402
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(739508224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[381@386 381@386 mouseMove CMD 393770 nil]
		targetOffset: 	313@147
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 393770 381 386 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(510918656)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	381@386 corner: 397@402
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	381@386 corner: 397@402
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(739508224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[381@386 381@386 mouseMove CMD 393770 nil]
		targetOffset: 	313@147
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 393770 381 386 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	381@386 corner: 397@402
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	381@386 corner: 397@402
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(739508224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[381@386 381@386 mouseMove CMD 393770 nil]
		targetOffset: 	313@147
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 393770 381 386 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	381@386 corner: 397@402
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	381@386 corner: 397@402
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(739508224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[381@386 381@386 mouseMove CMD 393770 nil]
		targetOffset: 	313@147
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 393770 381 386 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 394220 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	381@386 corner: 397@402
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	381@386 corner: 397@402
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(739508224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[381@386 381@386 mouseMove CMD 393770 nil]
		targetOffset: 	313@147
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 393770 381 386 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@718
		canvas: 	a FormCanvas on: DisplayScreen(1264x718x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	394214
		lastStepMessage: 	nil
		lastCycleTime: 	394255
		alarms: 	a Heap()
		lastAlarmTime: 	394214
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@718
		canvas: 	a FormCanvas on: DisplayScreen(1264x718x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	394214
		lastStepMessage: 	nil
		lastCycleTime: 	394255
		alarms: 	a Heap()
		lastAlarmTime: 	394214
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
BenchHandle(Object)>>error:
BenchHandle(Object)>>primitiveFailed:
BenchHandle(Object)>>primitiveFailed
BenchHandle(Handle)>>activateHandle
BenchHandle class(Handle class)>>for:to:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: activateHandle failed
31 March 2011 5:27:37 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

BenchHandle(Object)>>error:
	Receiver: a BenchHandle
	Arguments and temporary variables: 
		aString: 	'activateHandle failed'
	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle(Object)>>primitiveFailed:
	Receiver: a BenchHandle
	Arguments and temporary variables: 
		selector: 	#activateHandle
	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle(Object)>>primitiveFailed
	Receiver: a BenchHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle(Handle)>>activateHandle
	Receiver: a BenchHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle class(Handle class)>>for:to:
	Receiver: BenchHandle
	Arguments and temporary variables: 
		anObject: 	a BenchmarkClass
		aShadowClass: 	BenchmarkClass
		handle: 	a BenchHandle
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary(#initialize->(BenchHandle>>#initialize "a Compil...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified' initialize)

		subclasses: 	nil
		name: 	#BenchHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Benchmark'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '"Global OverHead"
(1 to: 100) collect: [:each ...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ hbm := BenchHandle for: bm to: BenchmarkClass
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(519045120)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '"Global OverHead"
(1 to: 100) collect: [:each ...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 412003) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 t...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 412003) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 412003) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 412003) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(510918656)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(510918656)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 412003) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(218103808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 412003) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 412003) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(510918656)
	Receiver's instance variables: 
		timeStamp: 	411403
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	219@145
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 412003) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 412003) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(510918656)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	284@390 corner: 300@406
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	284@390 corner: 300@406
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(123207680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[284@390 284@390 mouseMove CMD 411018 nil]
		targetOffset: 	219@145
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 411018 284 390 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@718
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(702808064) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@718
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(702808064) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(510918656)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	284@390 corner: 300@406
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	284@390 corner: 300@406
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(123207680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[284@390 284@390 mouseMove CMD 411018 nil]
		targetOffset: 	219@145
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 411018 284 390 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(510918656)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	284@390 corner: 300@406
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	284@390 corner: 300@406
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(123207680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[284@390 284@390 mouseMove CMD 411018 nil]
		targetOffset: 	219@145
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 411018 284 390 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	284@390 corner: 300@406
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	284@390 corner: 300@406
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(123207680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[284@390 284@390 mouseMove CMD 411018 nil]
		targetOffset: 	219@145
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 411018 284 390 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	284@390 corner: 300@406
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	284@390 corner: 300@406
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(123207680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[284@390 284@390 mouseMove CMD 411018 nil]
		targetOffset: 	219@145
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 411018 284 390 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 411403 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	284@390 corner: 300@406
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	284@390 corner: 300@406
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(123207680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[284@390 284@390 mouseMove CMD 411018 nil]
		targetOffset: 	219@145
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 411018 284 390 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@718
		canvas: 	a FormCanvas on: DisplayScreen(1264x718x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	411396
		lastStepMessage: 	nil
		lastCycleTime: 	411437
		alarms: 	a Heap()
		lastAlarmTime: 	411396
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@718
		canvas: 	a FormCanvas on: DisplayScreen(1264x718x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	411396
		lastStepMessage: 	nil
		lastCycleTime: 	411437
		alarms: 	a Heap()
		lastAlarmTime: 	411396
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
BenchHandle(Object)>>error:
BenchHandle(Object)>>primitiveFailed:
BenchHandle(Object)>>primitiveFailed
BenchHandle(Handle)>>activateHandle
BenchHandle class(Handle class)>>for:to:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: activateHandle failed
31 March 2011 5:27:53 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

BenchHandle(Object)>>error:
	Receiver: a BenchHandle
	Arguments and temporary variables: 
		aString: 	'activateHandle failed'
	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle(Object)>>primitiveFailed:
	Receiver: a BenchHandle
	Arguments and temporary variables: 
		selector: 	#activateHandle
	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle(Object)>>primitiveFailed
	Receiver: a BenchHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle(Handle)>>activateHandle
	Receiver: a BenchHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a BenchmarkClass
		classLookup: 	BenchmarkClass
		state: 	an Array(an Object)
		configuration: 	14


BenchHandle class(Handle class)>>for:to:
	Receiver: BenchHandle
	Arguments and temporary variables: 
		anObject: 	a BenchmarkClass
		aShadowClass: 	BenchmarkClass
		handle: 	a BenchHandle
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary(#initialize->(BenchHandle>>#initialize "a Compil...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified' initialize)

		subclasses: 	nil
		name: 	#BenchHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Benchmark'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '"Global OverHead"
(1 to: 100) collect: [:each ...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ hbm := BenchHandle for: bm to: BenchmarkClass
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(847511552)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '"Global OverHead"
(1 to: 100) collect: [:each ...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510918656)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 428393) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 t...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 428393) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 428393) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 428393) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(510918656)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(510918656)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 428393) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(218103808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 428393) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 428393) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(510918656)
	Receiver's instance variables: 
		timeStamp: 	427800
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-13@149
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 428393) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(510918656)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 835@242
		owner: 	a TransformMorph(468975616)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 835@242
		color: 	Color black
		extension: 	a MorphExtension (751566848) [other:  (blinkStart -> 428393) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '"Global OverHead"
(1 to: 100) collect: [:each | [1000000 time...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(218103808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(510918656)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@394 corner: 68@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	52@394 corner: 68@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(610795520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[52@394 52@394 mouseMove CMD 427289 nil]
		targetOffset: 	366@152
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 427289 52 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@718
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(612630528) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@718
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(612630528) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(510918656)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@394 corner: 68@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	52@394 corner: 68@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(610795520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[52@394 52@394 mouseMove CMD 427289 nil]
		targetOffset: 	366@152
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 427289 52 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(510918656)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	52@394 corner: 68@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	52@394 corner: 68@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(610795520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[52@394 52@394 mouseMove CMD 427289 nil]
		targetOffset: 	366@152
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 427289 52 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	52@394 corner: 68@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	52@394 corner: 68@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(610795520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[52@394 52@394 mouseMove CMD 427289 nil]
		targetOffset: 	366@152
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 427289 52 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	52@394 corner: 68@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	52@394 corner: 68@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(610795520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[52@394 52@394 mouseMove CMD 427289 nil]
		targetOffset: 	366@152
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 427289 52 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 427800 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	52@394 corner: 68@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	52@394 corner: 68@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(610795520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[52@394 52@394 mouseMove CMD 427289 nil]
		targetOffset: 	366@152
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 427289 52 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@718
		canvas: 	a FormCanvas on: DisplayScreen(1264x718x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	427787
		lastStepMessage: 	nil
		lastCycleTime: 	427827
		alarms: 	a Heap()
		lastAlarmTime: 	427787
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@718
		canvas: 	a FormCanvas on: DisplayScreen(1264x718x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	427787
		lastStepMessage: 	nil
		lastCycleTime: 	427827
		alarms: 	a Heap()
		lastAlarmTime: 	427787
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
BenchHandle(Object)>>error:
BenchHandle(Object)>>primitiveFailed:
BenchHandle(Object)>>primitiveFailed
BenchHandle(Handle)>>activateHandle
BenchHandle class(Handle class)>>for:to:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TreeNode>>arg
1 April 2011 4:10:24 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode(Object)>>doesNotUnderstand: #arg
	Receiver: a TreeNode
	Arguments and temporary variables: 
		aMessage: 	arg
		exception: 	MessageNotUnderstood: TreeNode>>arg
		resumeValue: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new Binarytrees'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(235929600)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new Binarytrees'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 196419) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new Binarytrees'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 196419) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 196419) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 196419) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 196419) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 196419) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 196419) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	193479
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	120@539
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 196419) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 196419) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1057@563 corner: 1073@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1057@563 corner: 1073@579
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989855744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1057@563 mouseUp 195706 nil]
		targetOffset: 	103@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 195706 1057 563 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(701759488) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(701759488) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1057@563 corner: 1073@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1057@563 corner: 1073@579
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989855744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1057@563 mouseUp 195706 nil]
		targetOffset: 	103@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 195706 1057 563 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1057@563 corner: 1073@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1057@563 corner: 1073@579
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989855744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1057@563 mouseUp 195706 nil]
		targetOffset: 	103@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 195706 1057 563 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	1057@563 corner: 1073@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1057@563 corner: 1073@579
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989855744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1057@563 mouseUp 195706 nil]
		targetOffset: 	103@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 195706 1057 563 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1057@563 corner: 1073@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1057@563 corner: 1073@579
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989855744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1057@563 mouseUp 195706 nil]
		targetOffset: 	103@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 195706 1057 563 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 193479 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1057@563 corner: 1073@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1057@563 corner: 1073@579
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989855744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1057@563 mouseUp 195706 nil]
		targetOffset: 	103@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 195706 1057 563 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	195779
		lastStepMessage: 	nil
		lastCycleTime: 	195799
		alarms: 	a Heap()
		lastAlarmTime: 	195779
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	195779
		lastStepMessage: 	nil
		lastCycleTime: 	195799
		alarms: 	a Heap()
		lastAlarmTime: 	195779
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	195779
		lastStepMessage: 	nil
		lastCycleTime: 	195799
		alarms: 	a Heap()
		lastAlarmTime: 	195779
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	195779
		lastStepMessage: 	nil
		lastCycleTime: 	195799
		alarms: 	a Heap()
		lastAlarmTime: 	195779
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(701759488) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
TreeNode(Object)>>doesNotUnderstand: #arg
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TreeNode class>>bottomUpTree:depth:
1 April 2011 4:12:42 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode class(Object)>>doesNotUnderstand: #bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		aMessage: 	bottomUpTree: 0 depth: 13
		exception: 	MessageNotUnderstood: TreeNode class>>bottomUpTree:depth:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode>>binarytrees:to:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		n: 	12
		output: 	Transcript
		minDepth: 	4
		maxDepth: 	12
		stretchDepth: 	13
		check: 	nil
		longLivedTree: 	nil
		iterations: 	nil
		i: 	nil
		depth: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1051721728)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 334749) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new binarytrees'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 334749) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 334749) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 334749) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 334749) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 334749) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 334749) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	334160
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	595@257
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 334749) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 334749) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1651@355 corner: 1667@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1651@355 corner: 1667@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808189952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1651@355 1651@355 mouseMove CMD 333571 nil]
		targetOffset: 	634@256
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 333571 1651 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(648544256) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(648544256) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1651@355 corner: 1667@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1651@355 corner: 1667@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808189952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1651@355 1651@355 mouseMove CMD 333571 nil]
		targetOffset: 	634@256
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 333571 1651 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1651@355 corner: 1667@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1651@355 corner: 1667@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808189952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1651@355 1651@355 mouseMove CMD 333571 nil]
		targetOffset: 	634@256
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 333571 1651 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	1651@355 corner: 1667@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1651@355 corner: 1667@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808189952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1651@355 1651@355 mouseMove CMD 333571 nil]
		targetOffset: 	634@256
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 333571 1651 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1651@355 corner: 1667@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1651@355 corner: 1667@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808189952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1651@355 1651@355 mouseMove CMD 333571 nil]
		targetOffset: 	634@256
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 333571 1651 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 334160 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1651@355 corner: 1667@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1651@355 corner: 1667@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808189952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1651@355 1651@355 mouseMove CMD 333571 nil]
		targetOffset: 	634@256
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 333571 1651 355 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	334140
		lastStepMessage: 	nil
		lastCycleTime: 	334181
		alarms: 	a Heap()
		lastAlarmTime: 	334140
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	334140
		lastStepMessage: 	nil
		lastCycleTime: 	334181
		alarms: 	a Heap()
		lastAlarmTime: 	334140
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	334140
		lastStepMessage: 	nil
		lastCycleTime: 	334181
		alarms: 	a Heap()
		lastAlarmTime: 	334140
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	334140
		lastStepMessage: 	nil
		lastCycleTime: 	334181
		alarms: 	a Heap()
		lastAlarmTime: 	334140
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
TreeNode class(Object)>>doesNotUnderstand: #bottomUpTree:depth:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TreeNode class>>left:right:item:
1 April 2011 4:13:39 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode class(Object)>>doesNotUnderstand: #left:right:item:
	Receiver: TreeNode
	Arguments and temporary variables: 
		aMessage: 	left: nil right: nil item: -8191
		exception: 	MessageNotUnderstood: TreeNode class>>left:right:item:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-8191
		anInteger: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4095
		anInteger: 	1
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2047
		anInteger: 	2
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1023
		anInteger: 	3
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-511
		anInteger: 	4
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-255
		anInteger: 	5
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-127
		anInteger: 	6
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-63
		anInteger: 	7
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-31
		anInteger: 	8
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-15
		anInteger: 	9
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-7
		anInteger: 	10
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-3
		anInteger: 	11
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1
		anInteger: 	12
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	0
		anInteger: 	13
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode>>binarytrees:to:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		n: 	12
		output: 	Transcript
		minDepth: 	4
		maxDepth: 	12
		stretchDepth: 	13
		check: 	nil
		longLivedTree: 	nil
		iterations: 	nil
		i: 	nil
		depth: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(191627264)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 391838) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new binarytrees'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 391838) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 391838) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 391838) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 391838) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 391838) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 391838) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	391264
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	139@303
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 391838) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 391838) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false



--- The full stack ---
TreeNode class(Object)>>doesNotUnderstand: #left:right:item:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TreeNode class>>bottomUpTree:depth:
1 April 2011 4:13:56 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode class(Object)>>doesNotUnderstand: #bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		aMessage: 	bottomUpTree: 0 depth: 13
		exception: 	MessageNotUnderstood: TreeNode class>>bottomUpTree:depth:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: bottomUpTree:d...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode>>binarytrees:to:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		n: 	12
		output: 	Transcript
		minDepth: 	4
		maxDepth: 	12
		stretchDepth: 	13
		check: 	nil
		longLivedTree: 	nil
		iterations: 	nil
		i: 	nil
		depth: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(604504064)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 408484) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new binarytrees'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 408484) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 408484) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 408484) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 408484) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 408484) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 408484) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	407853
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	130@192
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 408484) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 408484) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1186@290 corner: 1202@306
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1186@290 corner: 1202@306
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(692322304)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1186@290 1186@290 mouseMove CMD 407222 nil]
		targetOffset: 	134@193
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 407222 1186 290 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(587464704) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(587464704) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1186@290 corner: 1202@306
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1186@290 corner: 1202@306
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(692322304)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1186@290 1186@290 mouseMove CMD 407222 nil]
		targetOffset: 	134@193
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 407222 1186 290 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1186@290 corner: 1202@306
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1186@290 corner: 1202@306
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(692322304)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1186@290 1186@290 mouseMove CMD 407222 nil]
		targetOffset: 	134@193
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 407222 1186 290 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	1186@290 corner: 1202@306
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1186@290 corner: 1202@306
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(692322304)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1186@290 1186@290 mouseMove CMD 407222 nil]
		targetOffset: 	134@193
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 407222 1186 290 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1186@290 corner: 1202@306
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1186@290 corner: 1202@306
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(692322304)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1186@290 1186@290 mouseMove CMD 407222 nil]
		targetOffset: 	134@193
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 407222 1186 290 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 407853 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1186@290 corner: 1202@306
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1186@290 corner: 1202@306
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(692322304)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1186@290 1186@290 mouseMove CMD 407222 nil]
		targetOffset: 	134@193
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 407222 1186 290 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1004273664))(an Ov...etc...
		lastStepTime: 	407842
		lastStepMessage: 	nil
		lastCycleTime: 	407918
		alarms: 	a Heap()
		lastAlarmTime: 	407842
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1004273664))(an Ov...etc...
		lastStepTime: 	407842
		lastStepMessage: 	nil
		lastCycleTime: 	407918
		alarms: 	a Heap()
		lastAlarmTime: 	407842
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1004273664))(an Ov...etc...
		lastStepTime: 	407842
		lastStepMessage: 	nil
		lastCycleTime: 	407918
		alarms: 	a Heap()
		lastAlarmTime: 	407842
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1004273664))(an Ov...etc...
		lastStepTime: 	407842
		lastStepMessage: 	nil
		lastCycleTime: 	407918
		alarms: 	a Heap()
		lastAlarmTime: 	407842
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
TreeNode class(Object)>>doesNotUnderstand: #bottomUpTree:depth:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Object>>new
1 April 2011 4:14:12 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode(Object)>>doesNotUnderstand: #new
	Receiver: a TreeNode
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: Object>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>left:right:item:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		leftChild: 	nil
		rightChild: 	nil
		anItem: 	-8191
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-8191
		anInteger: 	0
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-4095
		anInteger: 	1
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-2047
		anInteger: 	2
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-1023
		anInteger: 	3
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-511
		anInteger: 	4
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-255
		anInteger: 	5
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-127
		anInteger: 	6
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-63
		anInteger: 	7
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-31
		anInteger: 	8
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-15
		anInteger: 	9
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-7
		anInteger: 	10
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-3
		anInteger: 	11
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-1
		anInteger: 	12
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	0
		anInteger: 	13
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees:to:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		n: 	12
		output: 	Transcript
		minDepth: 	4
		maxDepth: 	12
		stretchDepth: 	13
		check: 	nil
		longLivedTree: 	nil
		iterations: 	nil
		i: 	nil
		depth: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(996147200)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 424037) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new binarytrees'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 424037) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 424037) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 424037) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 424037) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 424037) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 424037) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	423449
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	107@95
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 424037) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false



--- The full stack ---
TreeNode(Object)>>doesNotUnderstand: #new
TreeNode>>left:right:item:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Object>>new
1 April 2011 4:14:34 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode(Object)>>doesNotUnderstand: #new
	Receiver: a TreeNode
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: Object>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>left:right:item:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		leftChild: 	nil
		rightChild: 	nil
		anItem: 	-8191
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-8191
		anInteger: 	0
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-4095
		anInteger: 	1
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-2047
		anInteger: 	2
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-1023
		anInteger: 	3
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-511
		anInteger: 	4
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-255
		anInteger: 	5
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-127
		anInteger: 	6
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-63
		anInteger: 	7
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-31
		anInteger: 	8
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-15
		anInteger: 	9
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-7
		anInteger: 	10
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-3
		anInteger: 	11
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	-1
		anInteger: 	12
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>bottomUpTree:depth:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		anItem: 	0
		anInteger: 	13
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees:to:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		n: 	12
		output: 	Transcript
		minDepth: 	4
		maxDepth: 	12
		stretchDepth: 	13
		check: 	nil
		longLivedTree: 	nil
		iterations: 	nil
		i: 	nil
		depth: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(286261248)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 446102) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new binarytrees'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 446102) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 446102) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 446102) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 446102) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 446102) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 446102) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	445528
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	74@216
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 446102) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false



--- The full stack ---
TreeNode(Object)>>doesNotUnderstand: #new
TreeNode>>left:right:item:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>bottomUpTree:depth:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Object>>new
1 April 2011 4:14:40 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode(Object)>>doesNotUnderstand: #new
	Receiver: a TreeNode
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: Object>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>DoItIn:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		ThisContext: 	TreeNode>>left:right:item:
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'left: leftChild right: rightChild item: anItem...etc...
		aContext: 	TreeNode>>left:right:item:
		receiver: 	a TreeNode
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoItIn: ThisContext 
	^ super new
		method: 	(TreeNode>>#DoItIn: "a CompiledMethod(711983104)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'left: leftChild right: rightChild item: anItem...etc...
		requestor: 	a SmalltalkEditor
		class: 	TreeNode
		category: 	nil
		context: 	TreeNode>>left:right:item:
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	a TreeNode
		ctxt: 	TreeNode>>left:right:item:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(748421120)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	a TreeNode
		ctxt: 	TreeNode>>left:right:item:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(748421120)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(748421120)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(748421120)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(748421120)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(748421120)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(748421120)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(748421120)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(539492352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (624164864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(sup...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(829947904)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(748421120)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(539492352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (624164864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(sup...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(829947904)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(748421120)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(539492352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (624164864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(sup...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(829947904)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(748421120)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(539492352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (624164864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(sup...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(829947904)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(748421120)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(748421120)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(748421120)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(539492352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (624164864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(sup...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(829947904)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(748421120)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(829947904)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(539492352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (624164864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(sup...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(829947904)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(748421120)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(539492352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (624164864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(sup...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(829947904)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(748421120)
	Receiver's instance variables: 
		timeStamp: 	451494
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	22@28
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(748421120)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(539492352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (624164864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(sup...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(829947904)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(748421120)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 582@34
		owner: 	a TransformMorph(539492352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 582@34
		color: 	Color black
		extension: 	a MorphExtension (624164864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'left: leftChild right: rightChild item: anItem      
   ^(sup...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(829947904)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(748421120)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1098@345 corner: 1114@361
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1098@345 corner: 1114@361
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853540864)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1098@345 1098@345 mouseMove CMD 450986 nil]
		targetOffset: 	93@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 450986 1098 345 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1050148864) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1050148864) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(748421120)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1098@345 corner: 1114@361
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1098@345 corner: 1114@361
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853540864)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1098@345 1098@345 mouseMove CMD 450986 nil]
		targetOffset: 	93@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 450986 1098 345 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(748421120)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1098@345 corner: 1114@361
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1098@345 corner: 1114@361
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853540864)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1098@345 1098@345 mouseMove CMD 450986 nil]
		targetOffset: 	93@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 450986 1098 345 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	1098@345 corner: 1114@361
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1098@345 corner: 1114@361
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853540864)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1098@345 1098@345 mouseMove CMD 450986 nil]
		targetOffset: 	93@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 450986 1098 345 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1098@345 corner: 1114@361
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1098@345 corner: 1114@361
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853540864)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1098@345 1098@345 mouseMove CMD 450986 nil]
		targetOffset: 	93@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 450986 1098 345 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 451494 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1098@345 corner: 1114@361
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1098@345 corner: 1114@361
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853540864)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1098@345 1098@345 mouseMove CMD 450986 nil]
		targetOffset: 	93@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 450986 1098 345 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	451480
		lastStepMessage: 	nil
		lastCycleTime: 	451522
		alarms: 	a Heap()
		lastAlarmTime: 	451480
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	451480
		lastStepMessage: 	nil
		lastCycleTime: 	451522
		alarms: 	a Heap()
		lastAlarmTime: 	451480
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	451480
		lastStepMessage: 	nil
		lastCycleTime: 	451522
		alarms: 	a Heap()
		lastAlarmTime: 	451480
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	451480
		lastStepMessage: 	nil
		lastCycleTime: 	451522
		alarms: 	a Heap()
		lastAlarmTime: 	451480
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1050148864) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#changeSet->(Project>>#changeSet "a CompiledMeth...etc...
		format: 	144
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'displayD...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
TreeNode(Object)>>doesNotUnderstand: #new
TreeNode>>DoItIn:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TreeNode>>left:right:item:
1 April 2011 4:16:43 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode(Object)>>doesNotUnderstand: #left:right:item:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		aMessage: 	left: nil right: nil item: -8191
		exception: 	MessageNotUnderstood: TreeNode>>left:right:item:
		resumeValue: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode class>>left:right:item:
	Receiver: TreeNode
	Arguments and temporary variables: 
		leftChild: 	nil
		rightChild: 	nil
		anItem: 	-8191
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-8191
		anInteger: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4095
		anInteger: 	1
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2047
		anInteger: 	2
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1023
		anInteger: 	3
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-511
		anInteger: 	4
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-255
		anInteger: 	5
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-127
		anInteger: 	6
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-63
		anInteger: 	7
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-31
		anInteger: 	8
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-15
		anInteger: 	9
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-7
		anInteger: 	10
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-3
		anInteger: 	11
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1
		anInteger: 	12
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	0
		anInteger: 	13
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck)
('a...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode>>binarytrees:to:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		n: 	12
		output: 	Transcript
		minDepth: 	4
		maxDepth: 	12
		stretchDepth: 	13
		check: 	nil
		longLivedTree: 	nil
		iterations: 	nil
		i: 	nil
		depth: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(64749568)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new binarytrees'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 575023) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new binarytrees'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 575023) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 575023) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 575023) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 575023) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 575023) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 575023) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	574417
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	121@121
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 575023) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false



--- The full stack ---
TreeNode(Object)>>doesNotUnderstand: #left:right:item:
TreeNode class>>left:right:item:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TranscriptStream class>>nextPutAll:
1 April 2011 4:18:15 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TranscriptStream class(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: TranscriptStream
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'stretch tree of depth '
		exception: 	MessageNotUnderstood: TranscriptStream class>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	WriteStream
		methodDict: 	a MethodDictionary(#bs->(TranscriptStream>>#bs "a CompiledMethod(96...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('*Morphic' initialExtent open openAsMorph openAsMorphLabel: open...etc...
		subclasses: 	nil
		name: 	#TranscriptStream
		classPool: 	a Dictionary(#AccessSema->a Semaphore() )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Streams'
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode>>binarytrees:to:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		n: 	12
		output: 	TranscriptStream
		minDepth: 	4
		maxDepth: 	12
		stretchDepth: 	13
		check: 	-1
		longLivedTree: 	nil
		iterations: 	nil
		i: 	nil
		depth: 	nil
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new binarytrees '
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(303562752)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new binarytrees '
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 667696) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new binarytrees '
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 667696) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 667696) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 667696) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 667696) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 667696) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 667696) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	667101
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	175@219
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 667696) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 667696) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1231@317 corner: 1247@333
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1231@317 corner: 1247@333
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(764411904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1231@317 1231@317 mouseMove CMD 666647 nil]
		targetOffset: 	179@220
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 666647 1231 317 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(115343360) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(115343360) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1231@317 corner: 1247@333
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1231@317 corner: 1247@333
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(764411904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1231@317 1231@317 mouseMove CMD 666647 nil]
		targetOffset: 	179@220
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 666647 1231 317 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1231@317 corner: 1247@333
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1231@317 corner: 1247@333
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(764411904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1231@317 1231@317 mouseMove CMD 666647 nil]
		targetOffset: 	179@220
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 666647 1231 317 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	1231@317 corner: 1247@333
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1231@317 corner: 1247@333
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(764411904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1231@317 1231@317 mouseMove CMD 666647 nil]
		targetOffset: 	179@220
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 666647 1231 317 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1231@317 corner: 1247@333
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1231@317 corner: 1247@333
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(764411904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1231@317 1231@317 mouseMove CMD 666647 nil]
		targetOffset: 	179@220
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 666647 1231 317 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 667101 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1231@317 corner: 1247@333
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1231@317 corner: 1247@333
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(764411904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1231@317 1231@317 mouseMove CMD 666647 nil]
		targetOffset: 	179@220
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 666647 1231 317 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1004273664))(an Ov...etc...
		lastStepTime: 	667090
		lastStepMessage: 	nil
		lastCycleTime: 	667130
		alarms: 	a Heap()
		lastAlarmTime: 	667090
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1004273664))(an Ov...etc...
		lastStepTime: 	667090
		lastStepMessage: 	nil
		lastCycleTime: 	667130
		alarms: 	a Heap()
		lastAlarmTime: 	667090
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1004273664))(an Ov...etc...
		lastStepTime: 	667090
		lastStepMessage: 	nil
		lastCycleTime: 	667130
		alarms: 	a Heap()
		lastAlarmTime: 	667090
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1004273664))(an Ov...etc...
		lastStepTime: 	667090
		lastStepMessage: 	nil
		lastCycleTime: 	667130
		alarms: 	a Heap()
		lastAlarmTime: 	667090
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
TranscriptStream class(Object)>>doesNotUnderstand: #nextPutAll:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 April 2011 4:20:07 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode class(Behavior)>>new
	Receiver: TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>left:right:item:
	Receiver: TreeNode
	Arguments and temporary variables: 
		leftChild: 	nil
		rightChild: 	nil
		anItem: 	-2535301200456458802993403780259
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2535301200456458802993403780259
		anInteger: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1267650600228229401496701890129
		anInteger: 	1
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-633825300114114700748350945064
		anInteger: 	2
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-316912650057057350374175472532
		anInteger: 	3
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-158456325028528675187087736266
		anInteger: 	4
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-79228162514264337593543868133
		anInteger: 	5
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-39614081257132168796771934066
		anInteger: 	6
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-19807040628566084398385967033
		anInteger: 	7
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-9903520314283042199192983516
		anInteger: 	8
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4951760157141521099596491758
		anInteger: 	9
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2475880078570760549798245879
		anInteger: 	10
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1237940039285380274899122939
		anInteger: 	11
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-618970019642690137449561469
		anInteger: 	12
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-309485009821345068724780734
		anInteger: 	13
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-154742504910672534362390367
		anInteger: 	14
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-77371252455336267181195183
		anInteger: 	15
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-38685626227668133590597591
		anInteger: 	16
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-19342813113834066795298795
		anInteger: 	17
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-9671406556917033397649397
		anInteger: 	18
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4835703278458516698824698
		anInteger: 	19
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2417851639229258349412349
		anInteger: 	20
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1208925819614629174706174
		anInteger: 	21
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-604462909807314587353087
		anInteger: 	22
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-302231454903657293676543
		anInteger: 	23
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-151115727451828646838271
		anInteger: 	24
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-75557863725914323419135
		anInteger: 	25
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-37778931862957161709567
		anInteger: 	26
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-18889465931478580854783
		anInteger: 	27
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-9444732965739290427391
		anInteger: 	28
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4722366482869645213695
		anInteger: 	29
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2361183241434822606847
		anInteger: 	30
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1180591620717411303423
		anInteger: 	31
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-590295810358705651711
		anInteger: 	32
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-295147905179352825855
		anInteger: 	33
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-147573952589676412927
		anInteger: 	34
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-73786976294838206463
		anInteger: 	35
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-36893488147419103231
		anInteger: 	36
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil



--- The full stack ---
TreeNode class(Behavior)>>new
TreeNode class>>left:right:item:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 April 2011 4:20:45 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2535301200456458802993405950635
		anInteger: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1267650600228229401496702975317
		anInteger: 	1
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-633825300114114700748351487658
		anInteger: 	2
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-316912650057057350374175743829
		anInteger: 	3
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-158456325028528675187087871914
		anInteger: 	4
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-79228162514264337593543935957
		anInteger: 	5
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-39614081257132168796771967978
		anInteger: 	6
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-19807040628566084398385983989
		anInteger: 	7
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-9903520314283042199192991994
		anInteger: 	8
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4951760157141521099596495997
		anInteger: 	9
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2475880078570760549798247998
		anInteger: 	10
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1237940039285380274899123999
		anInteger: 	11
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-618970019642690137449561999
		anInteger: 	12
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-309485009821345068724780999
		anInteger: 	13
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-154742504910672534362390499
		anInteger: 	14
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-77371252455336267181195249
		anInteger: 	15
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-38685626227668133590597624
		anInteger: 	16
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-19342813113834066795298812
		anInteger: 	17
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-9671406556917033397649406
		anInteger: 	18
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4835703278458516698824703
		anInteger: 	19
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2417851639229258349412351
		anInteger: 	20
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1208925819614629174706175
		anInteger: 	21
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-604462909807314587353087
		anInteger: 	22
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-302231454903657293676543
		anInteger: 	23
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-151115727451828646838271
		anInteger: 	24
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-75557863725914323419135
		anInteger: 	25
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-37778931862957161709567
		anInteger: 	26
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-18889465931478580854783
		anInteger: 	27
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-9444732965739290427391
		anInteger: 	28
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4722366482869645213695
		anInteger: 	29
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2361183241434822606847
		anInteger: 	30
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1180591620717411303423
		anInteger: 	31
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-590295810358705651711
		anInteger: 	32
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-295147905179352825855
		anInteger: 	33
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-147573952589676412927
		anInteger: 	34
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-73786976294838206463
		anInteger: 	35
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-36893488147419103231
		anInteger: 	36
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-18446744073709551615
		anInteger: 	37
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-9223372036854775807
		anInteger: 	38
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil



--- The full stack ---
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>new
1 April 2011 4:22 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		stream: 	a WriteStream 'stretch tree of depth 13	 check: -1
8192	 trees of depth...etc...
		accessSemaphore: 	a Mutex


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new binarytrees.'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(498597888)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new binarytrees.'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 892743) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new binarytrees.'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 892743) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 892743) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 892743) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 892743) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 892743) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 892743) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	892140
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	215@18
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 892743) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 892743) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1271@116 corner: 1287@132
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1271@116 corner: 1287@132
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565968896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1271@116 1271@116 mouseMove CMD 891913 nil]
		targetOffset: 	219@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 891913 1271 116 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(168296448) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(168296448) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1271@116 corner: 1287@132
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1271@116 corner: 1287@132
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565968896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1271@116 1271@116 mouseMove CMD 891913 nil]
		targetOffset: 	219@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 891913 1271 116 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1271@116 corner: 1287@132
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1271@116 corner: 1287@132
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565968896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1271@116 1271@116 mouseMove CMD 891913 nil]
		targetOffset: 	219@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 891913 1271 116 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	1271@116 corner: 1287@132
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1271@116 corner: 1287@132
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565968896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1271@116 1271@116 mouseMove CMD 891913 nil]
		targetOffset: 	219@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 891913 1271 116 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1271@116 corner: 1287@132
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1271@116 corner: 1287@132
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565968896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1271@116 1271@116 mouseMove CMD 891913 nil]
		targetOffset: 	219@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 891913 1271 116 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 892140 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1271@116 corner: 1287@132
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1271@116 corner: 1287@132
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565968896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1271@116 1271@116 mouseMove CMD 891913 nil]
		targetOffset: 	219@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 891913 1271 116 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	892135
		lastStepMessage: 	nil
		lastCycleTime: 	892175
		alarms: 	a Heap()
		lastAlarmTime: 	892135
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	892135
		lastStepMessage: 	nil
		lastCycleTime: 	892175
		alarms: 	a Heap()
		lastAlarmTime: 	892135
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	892135
		lastStepMessage: 	nil
		lastCycleTime: 	892175
		alarms: 	a Heap()
		lastAlarmTime: 	892135
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	892135
		lastStepMessage: 	nil
		lastCycleTime: 	892175
		alarms: 	a Heap()
		lastAlarmTime: 	892135
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(168296448) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 April 2011 4:22:15 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

SmallInteger(Integer)>>*
	Receiver: 2
	Arguments and temporary variables: 
		aNumber: 	-1267650600228229401496702888384
	Receiver's instance variables: 
2

SmallInteger>>*
	Receiver: 2
	Arguments and temporary variables: 
		aNumber: 	-1267650600228229401496702888384
	Receiver's instance variables: 
2

TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1267650600228229401496702888384
		anInteger: 	1
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-633825300114114700748351444192
		anInteger: 	2
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-316912650057057350374175722096
		anInteger: 	3
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-158456325028528675187087861048
		anInteger: 	4
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-79228162514264337593543930524
		anInteger: 	5
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-39614081257132168796771965262
		anInteger: 	6
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-19807040628566084398385982631
		anInteger: 	7
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-9903520314283042199192991315
		anInteger: 	8
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNodeTHERE_BE_DRAGONS_HERE
User Interrupt
1 April 2011 4:22:16 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

ByteSymbol(String)>>hash
	Receiver: #lf
	Arguments and temporary variables: 

	Receiver's instance variables: 
#lf

Dictionary>>scanFor:
	Receiver: a Dictionary(#cr->'
' #crlf->'

' #lf->'
' )
	Arguments and temporary variables: 
		anObject: 	#lf
		element: 	nil
		start: 	nil
		finish: 	5
		index: 	nil
		index: 	nil
		indexLimiT: 	nil
	Receiver's instance variables: 
		tally: 	3
		array: 	{(#cr->'
'). nil. (#lf->'
'). nil. (#crlf->'

')}


Dictionary(HashedCollection)>>findElementOrNil:
	Receiver: a Dictionary(#cr->'
' #crlf->'

' #lf->'
' )
	Arguments and temporary variables: 
		anObject: 	#lf
		index: 	nil
	Receiver's instance variables: 
		tally: 	3
		array: 	{(#cr->'
'). nil. (#lf->'
'). nil. (#crlf->'

')}


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#cr->'
' #crlf->'

' #lf->'
' )
	Arguments and temporary variables: 
		key: 	#lf
		aBlock: 	[self errorKeyNotFound]
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	3
		array: 	{(#cr->'
'). nil. (#lf->'
'). nil. (#crlf->'

')}


Dictionary>>at:
	Receiver: a Dictionary(#cr->'
' #crlf->'

' #lf->'
' )
	Arguments and temporary variables: 
		key: 	#lf
	Receiver's instance variables: 
		tally: 	3
		array: 	{(#cr->'
'). nil. (#lf->'
'). nil. (#crlf->'

')}


MultiByteFileStream>>nextPut:
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage/PharoDebug.log'
	Arguments and temporary variables: 
		aCharacter: 	Character cr
	Receiver's instance variables: 



MultiByteFileStream(WriteStream)>>cr
	Receiver: MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage/PharoDebug.log'
	Arguments and temporary variables: 

	Receiver's instance variables: 



[:title :index | 
indent
		timesRepeat: [aStream tab].
	aStream nextPutAll: title;
		 nextPut: $:;
		 space;
		 tab;
		
		nextPutAll: ((self instVarAt: index)
				printStringLimitedTo: (sizeLimit - 3 - title size max: 1));
		 cr] in TreeNode class(Object)>>longPrintOn:limitedTo:indent:
	Receiver: TreeNode
	Arguments and temporary variables: 
		aStream: 	'name'
		sizeLimit: 	7
		indent: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage...etc...
		title: 	80
		index: 	2
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>withIndexDo:
	Receiver: #('superclass' 'methodDict' 'format' 'instanceVariables' 'organization' 'subclasses' 'name...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[:title :index | 
indent
		timesRepeat: [aStream tab].
	a...etc...
		index: 	7
		indexLimiT: 	13
	Receiver's instance variables: 
#('superclass' 'methodDict' 'format' 'instanceVariables' 'organization' 'subclasses' 'name...etc...

Array(SequenceableCollection)>>doWithIndex:
	Receiver: #('superclass' 'methodDict' 'format' 'instanceVariables' 'organization' 'subclasses' 'name...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[:title :index | 
indent
		timesRepeat: [aStream tab].
	a...etc...
	Receiver's instance variables: 
#('superclass' 'methodDict' 'format' 'instanceVariables' 'organization' 'subclasses' 'name...etc...

TreeNode class(Object)>>longPrintOn:limitedTo:indent:
	Receiver: TreeNode
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Bench/TestImag...etc...
		sizeLimit: 	80
		indent: 	2
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


[receiver
		longPrintOn: strm
		limitedTo: 80
		indent: 2] in MethodContext>>printDetails:
	Receiver: TreeNode class>>bottomUpTree:depth:
	Arguments and temporary variables: 
		strm: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage/P...etc...
	Receiver's instance variables: 
		sender: 	TreeNode class>>bottomUpTree:depth:
		pc: 	37
		stackp: 	3
		method: 	(TreeNode class>>#bottomUpTree:depth: "a CompiledMethod(485752832)")
		closureOrNil: 	nil
		receiver: 	TreeNode


BlockClosure>>on:do:
	Receiver: [receiver
		longPrintOn: strm
		limitedTo: 80
		indent: 2]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | errorHandlerBlock cull: ex description cull: ex receiver]...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	MethodContext>>printDetails:
		startpc: 	197
		numArgs: 	0


BlockClosure>>ifError:
	Receiver: [receiver
		longPrintOn: strm
		limitedTo: 80
		indent: 2]
	Arguments and temporary variables: 
		errorHandlerBlock: 	[strm nextPutAll: pe]
	Receiver's instance variables: 
		outerContext: 	MethodContext>>printDetails:
		startpc: 	197
		numArgs: 	0


MethodContext>>printDetails:
	Receiver: TreeNode class>>bottomUpTree:depth:
	Arguments and temporary variables: 
		strm: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage/P...etc...
		pe: 	'<<error during printing>>'
		str: 	'		anItem: 	-9903520314283042199192991315
		anInteger: 	8
'
		pos: 	456589
	Receiver's instance variables: 
		sender: 	TreeNode class>>bottomUpTree:depth:
		pc: 	37
		stackp: 	3
		method: 	(TreeNode class>>#bottomUpTree:depth: "a CompiledMethod(485752832)")
		closureOrNil: 	nil
		receiver: 	TreeNode


MethodContext(ContextPart)>>errorReportOn:
	Receiver: SmallInteger(Integer)>>*
	Arguments and temporary variables: 
		strm: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage/P...etc...
		cnt: 	10
		aContext: 	TreeNode class>>bottomUpTree:depth:
		startPos: 	451527
	Receiver's instance variables: 
		sender: 	SmallInteger>>*
		pc: 	37
		stackp: 	1
		method: 	(Integer>>#* "a CompiledMethod(89128960)")
		closureOrNil: 	nil
		receiver: 	2


[:logger | 
logger nextPutAll: 'THERE_BE_DRAGONS_HERE';
		 cr;
		 nextPutAll: errMsg;
		 cr.
	aContext errorReportOn: logger.
	logger
		nextPutAll: (String new: 60 withAll: $-);
		 cr;
		 cr] in SmalltalkImage>>logError:inContext:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		errMsg: 	MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage...etc...
		aContext: 	'User Interrupt'
		logger: 	SmallInteger(Integer)>>*
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)


[logStream := self openLog.
	aMonadicBlock value: logStream] in SmalltalkImage>>logDuring:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		aMonadicBlock: 	[:logger | 
logger nextPutAll: 'THERE_BE_DRAGONS_HERE';
		 cr;
	...etc...
		logStream: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Ben...etc...
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)


BlockClosure>>ensure:
	Receiver: [logStream := self openLog.
	aMonadicBlock value: logStream]
	Arguments and temporary variables: 
		aBlock: 	[self closeLog: logStream]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkImage>>logDuring:
		startpc: 	34
		numArgs: 	0


SmalltalkImage>>logDuring:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		aMonadicBlock: 	[:logger | 
logger nextPutAll: 'THERE_BE_DRAGONS_HERE';
		 cr;
	...etc...
		logStream: 	an Array(MultiByteFileStream: '/Users/arnaudj/Desktop/GIT/Handle/Ben...etc...
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)


SmalltalkImage>>logError:inContext:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		errMsg: 	'User Interrupt'
		aContext: 	SmallInteger(Integer)>>*
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)


[| debugger |
debugger := Debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]] in [[| debugger |
	debugger := Debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]]
		on: Error
		do: [:ex | Debugger primitiveError: 'Orginal error: ' , title asString , '.
	Debugger error: '
					, ([ex description]
							on: Error
							do: ['a ' , ex class printString]) , ':']] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		process: 	a Process in SmallInteger(Integer)>>*
		context: 	SmallInteger(Integer)>>*
		title: 	'User Interrupt'
		contentsStringOrNil: 	nil
		bool: 	true
		errorWasInUIProcess: 	true
		debugger: 	a Debugger
	Receiver's instance variables: 
		interactiveParser: 	nil


BlockClosure>>on:do:
	Receiver: [| debugger |
debugger := Debugger new
				process: process
				controller: nil
				contex...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | Debugger primitiveError: 'Orginal error: ' , title asStri...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[| debugger |
	debugger := Debugger new
				process: process
			...etc...
		startpc: 	130
		numArgs: 	0


[[| debugger |
	debugger := Debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]]
		on: Error
		do: [:ex | Debugger primitiveError: 'Orginal error: ' , title asString , '.
	Debugger error: '
					, ([ex description]
							on: Error
							do: ['a ' , ex class printString]) , ':']] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		process: 	a Process in SmallInteger(Integer)>>*
		context: 	SmallInteger(Integer)>>*
		title: 	'User Interrupt'
		contentsStringOrNil: 	nil
		bool: 	true
		errorWasInUIProcess: 	true
	Receiver's instance variables: 
		interactiveParser: 	nil


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
		queue: 	SharedQueue with 14 items
		nextInQueue: 	[[| debugger |
	debugger := Debugger new
				process: process
				...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	907444
		lastStepMessage: 	nil
		lastCycleTime: 	907464
		alarms: 	a Heap()
		lastAlarmTime: 	907444
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>runStepMethods
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(319291392) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	907444
		lastStepMessage: 	nil
		lastCycleTime: 	907464
		alarms: 	a Heap()
		lastAlarmTime: 	907444
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	907444
		lastStepMessage: 	nil
		lastCycleTime: 	907464
		alarms: 	a Heap()
		lastAlarmTime: 	907444
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(319291392) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#changeSet->(Project>>#changeSet "a CompiledMeth...etc...
		format: 	144
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'displayD...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
ByteSymbol(String)>>hash
Dictionary>>scanFor:
Dictionary(HashedCollection)>>findElementOrNil:
Dictionary>>at:ifAbsent:
Dictionary>>at:
MultiByteFileStream>>nextPut:
MultiByteFileStream(WriteStream)>>cr
[:title :index | 
indent
		timesRepeat: [aStream tab].
	aStream nextPutAll: title;
		 nextPut: $:;
		 space;
		 tab;
		
		nextPutAll: ((self instVarAt: index)
				printStringLimitedTo: (sizeLimit - 3 - title size max: 1));
		 cr] in TreeNode class(Object)>>longPrintOn:limitedTo:indent:
Array(SequenceableCollection)>>withIndexDo:
Array(SequenceableCollection)>>doWithIndex:
TreeNode class(Object)>>longPrintOn:limitedTo:indent:
[receiver
		longPrintOn: strm
		limitedTo: 80
		indent: 2] in MethodContext>>printDetails:
BlockClosure>>on:do:
BlockClosure>>ifError:
MethodContext>>printDetails:
MethodContext(ContextPart)>>errorReportOn:
[:logger | 
logger nextPutAll: 'THERE_BE_DRAGONS_HERE';
		 cr;
		 nextPutAll: errMsg;
		 cr.
	aContext errorReportOn: logger.
	logger
		nextPutAll: (String new: 60 withAll: $-);
		 cr;
		 cr] in SmalltalkImage>>logError:inContext:
[logStream := self openLog.
	aMonadicBlock value: logStream] in SmalltalkImage>>logDuring:
BlockClosure>>ensure:
SmalltalkImage>>logDuring:
SmalltalkImage>>logError:inContext:
[| debugger |
debugger := Debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]] in [[| debugger |
	debugger := Debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]]
		on: Error
		do: [:ex | Debugger primitiveError: 'Orginal error: ' , title asString , '.
	Debugger error: '
					, ([ex description]
							on: Error
							do: ['a ' , ex class printString]) , ':']] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
BlockClosure>>on:do:
[[| debugger |
	debugger := Debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]]
		on: Error
		do: [:ex | Debugger primitiveError: 'Orginal error: ' , title asString , '.
	Debugger error: '
					, ([ex description]
							on: Error
							do: ['a ' , ex class printString]) , ':']] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
WorldState>>runStepMethodsIn:
PasteUpMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 April 2011 4:24:29 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode class>>left:right:item:
	Receiver: TreeNode
	Arguments and temporary variables: 
		leftChild: 	a TreeNode
		rightChild: 	a TreeNode
		anItem: 	-1125899906220592
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1125899906220592
		anInteger: 	1
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-562949953110296
		anInteger: 	2
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-281474976555148
		anInteger: 	3
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-140737488277574
		anInteger: 	4
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-70368744138787
		anInteger: 	5
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-35184372069393
		anInteger: 	6
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-17592186034696
		anInteger: 	7
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-8796093017348
		anInteger: 	8
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4398046508674
		anInteger: 	9
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2199023254337
		anInteger: 	10
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1099511627168
		anInteger: 	11
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-549755813584
		anInteger: 	12
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-274877906792
		anInteger: 	13
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-137438953396
		anInteger: 	14
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-68719476698
		anInteger: 	15
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-34359738349
		anInteger: 	16
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-17179869174
		anInteger: 	17
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-8589934587
		anInteger: 	18
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4294967293
		anInteger: 	19
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2147483646
		anInteger: 	20
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1073741823
		anInteger: 	21
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-536870911
		anInteger: 	22
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-268435455
		anInteger: 	23
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-134217727
		anInteger: 	24
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-67108863
		anInteger: 	25
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-33554431
		anInteger: 	26
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-16777215
		anInteger: 	27
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-8388607
		anInteger: 	28
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-4194303
		anInteger: 	29
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-2097151
		anInteger: 	30
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-1048575
		anInteger: 	31
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-524287
		anInteger: 	32
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-262143
		anInteger: 	33
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-131071
		anInteger: 	34
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-65535
		anInteger: 	35
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-32767
		anInteger: 	36
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-16383
		anInteger: 	37
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


TreeNode class>>bottomUpTree:depth:
	Receiver: TreeNode
	Arguments and temporary variables: 
		anItem: 	-8191
		anInteger: 	38
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#binarytrees->(TreeNode>>#binarytrees "a Compile...etc...
		format: 	136
		instanceVariables: 	#('left' 'right' 'item')
		organization: 	('as yet unclassified' binarytrees binarytrees:to: itemCheck left...etc...
		subclasses: 	nil
		name: 	#TreeNode
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil



--- The full stack ---
TreeNode class>>left:right:item:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode class>>bottomUpTree:depth:
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 April 2011 4:25:19 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

TreeNode>>itemCheck
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	11694202


TreeNode>>itemCheck
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	a TreeNode
		right: 	a TreeNode
		item: 	5847101


TreeNode>>itemCheck
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	a TreeNode
		right: 	a TreeNode
		item: 	2923551


TreeNode>>itemCheck
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	a TreeNode
		right: 	a TreeNode
		item: 	1461776


TreeNode>>itemCheck
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	a TreeNode
		right: 	a TreeNode
		item: 	730888


TreeNode>>binarytrees:to:
	Receiver: a TreeNode
	Arguments and temporary variables: 
		n: 	20
		output: 	Transcript
		minDepth: 	4
		maxDepth: 	20
		stretchDepth: 	21
		check: 	-1461774
		longLivedTree: 	a TreeNode
		iterations: 	1048576
		i: 	730888
		depth: 	4
	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


TreeNode>>binarytrees
	Receiver: a TreeNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		left: 	nil
		right: 	nil
		item: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'TreeNode new binarytrees.'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ TreeNode new binarytrees
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(223084544)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'TreeNode new binarytrees.'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1037041664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 1091942) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'TreeNode new binarytrees.'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 1091942) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 1091942) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 1091942) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(1037041664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 1091942) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(709623808)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 1091942) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 1091942) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1037041664)
	Receiver's instance variables: 
		timeStamp: 	1055214
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	456@223
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 1091942) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(1037041664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 765@18
		owner: 	a TransformMorph(211812352)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 765@18
		color: 	Color black
		extension: 	a MorphExtension (277348352) [other:  (blinkStart -> 1091942) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'TreeNode new binarytrees.'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(709623808)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1512@321 corner: 1528@337
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1512@321 corner: 1528@337
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(101449728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1512@321 1512@321 mouseMove 1056987 nil]
		targetOffset: 	460@224
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056987 1512 321 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(816840704) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1871@1058
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(816840704) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1512@321 corner: 1528@337
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1512@321 corner: 1528@337
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(101449728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1512@321 1512@321 mouseMove 1056987 nil]
		targetOffset: 	460@224
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056987 1512 321 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(1037041664)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1512@321 corner: 1528@337
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1512@321 corner: 1528@337
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(101449728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1512@321 1512@321 mouseMove 1056987 nil]
		targetOffset: 	460@224
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056987 1512 321 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	1512@321 corner: 1528@337
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1512@321 corner: 1528@337
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(101449728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1512@321 1512@321 mouseMove 1056987 nil]
		targetOffset: 	460@224
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056987 1512 321 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1512@321 corner: 1528@337
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1512@321 corner: 1528@337
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(101449728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1512@321 1512@321 mouseMove 1056987 nil]
		targetOffset: 	460@224
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056987 1512 321 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 1055214 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1512@321 corner: 1528@337
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1512@321 corner: 1528@337
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(101449728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1512@321 1512@321 mouseMove 1056987 nil]
		targetOffset: 	460@224
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056987 1512 321 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1871@1058
		canvas: 	a FormCanvas on: DisplayScreen(1871x1058x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(632291328))(an Ove...etc...
		lastStepTime: 	1091394
		lastStepMessage: 	nil
		lastCycleTime: 	1091273
		alarms: 	a Heap()
		lastAlarmTime: 	1055198
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
TreeNode>>itemCheck
TreeNode>>itemCheck
TreeNode>>itemCheck
TreeNode>>itemCheck
TreeNode>>itemCheck
TreeNode>>binarytrees:to:
TreeNode>>binarytrees
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: NBodySystem class>>arg
4 April 2011 10:57:16 am

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

NBodySystem class(Object)>>doesNotUnderstand: #arg
	Receiver: NBodySystem
	Arguments and temporary variables: 
		aMessage: 	arg
		exception: 	MessageNotUnderstood: NBodySystem class>>arg
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#after:->(NBodySystem>>#after: "a CompiledMethod...etc...
		format: 	132
		instanceVariables: 	#('bodies')
		organization: 	('as yet unclassified' after: energy initialize)

		subclasses: 	nil
		name: 	#NBodySystem
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


NBodySystem class>>nbody
	Receiver: NBodySystem
	Arguments and temporary variables: 
		bodies: 	a NBodySystem
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#after:->(NBodySystem>>#after: "a CompiledMethod...etc...
		format: 	132
		instanceVariables: 	#('bodies')
		organization: 	('as yet unclassified' after: energy initialize)

		subclasses: 	nil
		name: 	#NBodySystem
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Shootout
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'BBodySystem nbody'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ NBodySystem nbody
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(453771264)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'BBodySystem nbody'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(101187584)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(101187584)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(101187584)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(101187584)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(101187584)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(101187584)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(101187584)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(101187584)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(621805568)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (494927872) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'NBodySystem nbody'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(717225984)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(101187584)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'BBodySystem nbody'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(621805568)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (494927872) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'NBodySystem nbody'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(717225984)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(101187584)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(621805568)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (494927872) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'NBodySystem nbody'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(717225984)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(101187584)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(621805568)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (494927872) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'NBodySystem nbody'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(717225984)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(101187584)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(101187584)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(101187584)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(621805568)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (494927872) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'NBodySystem nbody'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(717225984)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(101187584)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(717225984)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(621805568)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (494927872) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'NBodySystem nbody'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(717225984)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(101187584)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(621805568)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (494927872) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'NBodySystem nbody'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(717225984)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(101187584)
	Receiver's instance variables: 
		timeStamp: 	704164
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	291@96
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(101187584)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(621805568)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (494927872) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'NBodySystem nbody'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(717225984)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(101187584)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(621805568)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (494927872) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'NBodySystem nbody'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(717225984)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(101187584)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	432@324 corner: 448@340
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	432@324 corner: 448@340
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(31457280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[432@324 mouseUp 708207 nil]
		targetOffset: 	90@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 708207 432 324 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(876871680) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(876871680) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(101187584)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	432@324 corner: 448@340
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	432@324 corner: 448@340
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(31457280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[432@324 mouseUp 708207 nil]
		targetOffset: 	90@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 708207 432 324 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(101187584)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	432@324 corner: 448@340
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	432@324 corner: 448@340
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(31457280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[432@324 mouseUp 708207 nil]
		targetOffset: 	90@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 708207 432 324 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	432@324 corner: 448@340
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	432@324 corner: 448@340
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(31457280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[432@324 mouseUp 708207 nil]
		targetOffset: 	90@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 708207 432 324 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	432@324 corner: 448@340
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	432@324 corner: 448@340
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(31457280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[432@324 mouseUp 708207 nil]
		targetOffset: 	90@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 708207 432 324 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 704164 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	432@324 corner: 448@340
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	432@324 corner: 448@340
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(31457280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[432@324 mouseUp 708207 nil]
		targetOffset: 	90@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 708207 432 324 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	708307
		lastStepMessage: 	nil
		lastCycleTime: 	708327
		alarms: 	a Heap()
		lastAlarmTime: 	708307
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	708307
		lastStepMessage: 	nil
		lastCycleTime: 	708327
		alarms: 	a Heap()
		lastAlarmTime: 	708307
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	708307
		lastStepMessage: 	nil
		lastCycleTime: 	708327
		alarms: 	a Heap()
		lastAlarmTime: 	708307
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	708307
		lastStepMessage: 	nil
		lastCycleTime: 	708327
		alarms: 	a Heap()
		lastAlarmTime: 	708307
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(876871680) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
NBodySystem class(Object)>>doesNotUnderstand: #arg
NBodySystem class>>nbody
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmalltalkImage class>>getSystemAttribute:
4 April 2011 1:05:09 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

SmalltalkImage class(Object)>>doesNotUnderstand: #getSystemAttribute:
	Receiver: SmalltalkImage
	Arguments and temporary variables: 
		aMessage: 	getSystemAttribute: 1004
		exception: 	MessageNotUnderstood: SmalltalkImage class>>getSystemAttribute:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 253)
		format: 	132
		instanceVariables: 	#('globals')
		organization: 	('*HandleSupport' recreateSpecialObjectsArrayForHandle)
('*System...etc...
		subclasses: 	nil
		name: 	#SmalltalkImage
		classPool: 	a Dictionary(#CheckChangesFileAvailability->true #CheckSourcesFileAv...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkImage class>>DoIt
	Receiver: SmalltalkImage
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 253)
		format: 	132
		instanceVariables: 	#('globals')
		organization: 	('*HandleSupport' recreateSpecialObjectsArrayForHandle)
('*System...etc...
		subclasses: 	nil
		name: 	#SmalltalkImage
		classPool: 	a Dictionary(#CheckChangesFileAvailability->true #CheckSourcesFileAv...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'vmVersion	
	"Return a string identifying the i...etc...
		aContext: 	nil
		receiver: 	SmalltalkImage
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ self getSystemAttribute: 1004
		method: 	(SmalltalkImage class>>#DoIt "a CompiledMethod(722731008)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'vmVersion	
	"Return a string identifying the i...etc...
		requestor: 	a SmalltalkEditor
		class: 	SmalltalkImage class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	SmalltalkImage
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(641204224)
		selectionShowing: 	true
		model: 	a Browser
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	SmalltalkImage
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(641204224)
		selectionShowing: 	true
		model: 	a Browser
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(641204224)
		selectionShowing: 	true
		model: 	a Browser
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(641204224)
		selectionShowing: 	true
		model: 	a Browser
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(641204224)
		selectionShowing: 	true
		model: 	a Browser
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(641204224)
		selectionShowing: 	true
		model: 	a Browser
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(641204224)
		selectionShowing: 	true
		model: 	a Browser
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(641204224)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@82
		owner: 	a TransformMorph(961806336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@82
		color: 	Color black
		extension: 	a MorphExtension (489684992) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter vers...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(171966464)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(641204224)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter v...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@82
		owner: 	a TransformMorph(961806336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@82
		color: 	Color black
		extension: 	a MorphExtension (489684992) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter vers...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(171966464)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(641204224)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@82
		owner: 	a TransformMorph(961806336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@82
		color: 	Color black
		extension: 	a MorphExtension (489684992) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter vers...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(171966464)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(641204224)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@82
		owner: 	a TransformMorph(961806336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@82
		color: 	Color black
		extension: 	a MorphExtension (489684992) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter vers...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(171966464)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(641204224)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(641204224)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(641204224)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@82
		owner: 	a TransformMorph(961806336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@82
		color: 	Color black
		extension: 	a MorphExtension (489684992) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter vers...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(171966464)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(641204224)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(171966464)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@82
		owner: 	a TransformMorph(961806336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@82
		color: 	Color black
		extension: 	a MorphExtension (489684992) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter vers...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(171966464)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(641204224)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@82
		owner: 	a TransformMorph(961806336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@82
		color: 	Color black
		extension: 	a MorphExtension (489684992) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter vers...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(171966464)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(641204224)
	Receiver's instance variables: 
		timeStamp: 	967192
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	34@74
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(641204224)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@82
		owner: 	a TransformMorph(961806336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@82
		color: 	Color black
		extension: 	a MorphExtension (489684992) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter vers...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(171966464)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(641204224)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@82
		owner: 	a TransformMorph(961806336)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@82
		color: 	Color black
		extension: 	a MorphExtension (489684992) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vmVersion	
	"Return a string identifying the interpreter vers...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(171966464)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(641204224)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	239@365 corner: 255@381
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	239@365 corner: 255@381
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(99352576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[239@365 239@365 mouseMove CMD 967078 nil]
		targetOffset: 	219@71
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 967078 239 365 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(782499840) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(782499840) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(641204224)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	239@365 corner: 255@381
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	239@365 corner: 255@381
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(99352576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[239@365 239@365 mouseMove CMD 967078 nil]
		targetOffset: 	219@71
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 967078 239 365 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(641204224)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	239@365 corner: 255@381
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	239@365 corner: 255@381
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(99352576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[239@365 239@365 mouseMove CMD 967078 nil]
		targetOffset: 	219@71
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 967078 239 365 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	239@365 corner: 255@381
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	239@365 corner: 255@381
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(99352576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[239@365 239@365 mouseMove CMD 967078 nil]
		targetOffset: 	219@71
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 967078 239 365 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	239@365 corner: 255@381
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	239@365 corner: 255@381
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(99352576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[239@365 239@365 mouseMove CMD 967078 nil]
		targetOffset: 	219@71
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 967078 239 365 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 967192 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	239@365 corner: 255@381
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	239@365 corner: 255@381
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(99352576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[239@365 239@365 mouseMove CMD 967078 nil]
		targetOffset: 	219@71
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 967078 239 365 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(880803840))(an Ove...etc...
		lastStepTime: 	967179
		lastStepMessage: 	nil
		lastCycleTime: 	967218
		alarms: 	a Heap()
		lastAlarmTime: 	967179
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(880803840))(an Ove...etc...
		lastStepTime: 	967179
		lastStepMessage: 	nil
		lastCycleTime: 	967218
		alarms: 	a Heap()
		lastAlarmTime: 	967179
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(880803840))(an Ove...etc...
		lastStepTime: 	967179
		lastStepMessage: 	nil
		lastCycleTime: 	967218
		alarms: 	a Heap()
		lastAlarmTime: 	967179
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(880803840))(an Ove...etc...
		lastStepTime: 	967179
		lastStepMessage: 	nil
		lastCycleTime: 	967218
		alarms: 	a Heap()
		lastAlarmTime: 	967179
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(782499840) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#changeSet->(Project>>#changeSet "a CompiledMeth...etc...
		format: 	144
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'displayD...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
SmalltalkImage class(Object)>>doesNotUnderstand: #getSystemAttribute:
SmalltalkImage class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Array>>instanceVariableObject
4 April 2011 1:15:50 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Array(Object)>>doesNotUnderstand: #instanceVariableObject
	Receiver: an Array(a FactoryROR a FooBar)
	Arguments and temporary variables: 
		aMessage: 	instanceVariableObject
		exception: 	MessageNotUnderstood: Array>>instanceVariableObject
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(a FactoryROR a FooBar)

[ha instanceVariableObject] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ha instanceVariableObject]
		initialMilliseconds: 	1607491
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->(Time>>#< "a CompiledMethod(693895168)") #=-...etc...
		format: 	134
		instanceVariables: 	#('seconds' 'nanos')
		organization: 	('ansi protocol' < = duration hash hour hour12 hour24 meridianAbb...etc...
		subclasses: 	nil
		name: 	#Time
		classPool: 	nil
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ha instanceVariableObject]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	29
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ [ha instanceVariableObject] timeToRun
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(181665792)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1608091) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 send...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1608091) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1608091) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1608091) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1608091) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(263454720)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1608091) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1608091) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(436994048)
	Receiver's instance variables: 
		timeStamp: 	1607481
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	117@114
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1608091) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@114
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@114
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1608091) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	330@234 corner: 346@250
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	330@234 corner: 346@250
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(555745280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[330@234 330@234 mouseMove CMD 1607017 nil]
		targetOffset: 	74@110
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1607017 330 234 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(229900288) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(229900288) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	330@234 corner: 346@250
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	330@234 corner: 346@250
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(555745280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[330@234 330@234 mouseMove CMD 1607017 nil]
		targetOffset: 	74@110
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1607017 330 234 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	330@234 corner: 346@250
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	330@234 corner: 346@250
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(555745280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[330@234 330@234 mouseMove CMD 1607017 nil]
		targetOffset: 	74@110
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1607017 330 234 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	330@234 corner: 346@250
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	330@234 corner: 346@250
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(555745280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[330@234 330@234 mouseMove CMD 1607017 nil]
		targetOffset: 	74@110
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1607017 330 234 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	330@234 corner: 346@250
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	330@234 corner: 346@250
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(555745280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[330@234 330@234 mouseMove CMD 1607017 nil]
		targetOffset: 	74@110
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1607017 330 234 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 1607481 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	330@234 corner: 346@250
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	330@234 corner: 346@250
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(555745280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[330@234 330@234 mouseMove CMD 1607017 nil]
		targetOffset: 	74@110
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1607017 330 234 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1012137984))(an Ov...etc...
		lastStepTime: 	1607468
		lastStepMessage: 	nil
		lastCycleTime: 	1607508
		alarms: 	a Heap()
		lastAlarmTime: 	1607468
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1012137984))(an Ov...etc...
		lastStepTime: 	1607468
		lastStepMessage: 	nil
		lastCycleTime: 	1607508
		alarms: 	a Heap()
		lastAlarmTime: 	1607468
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1012137984))(an Ov...etc...
		lastStepTime: 	1607468
		lastStepMessage: 	nil
		lastCycleTime: 	1607508
		alarms: 	a Heap()
		lastAlarmTime: 	1607468
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Array(Object)>>doesNotUnderstand: #instanceVariableObject
[ha instanceVariableObject] in UndefinedObject>>DoIt
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Array>>instanceVariableObject
4 April 2011 1:16:52 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Array(Object)>>doesNotUnderstand: #instanceVariableObject
	Receiver: an Array(a FactoryROR a FooBar)
	Arguments and temporary variables: 
		aMessage: 	instanceVariableObject
		exception: 	MessageNotUnderstood: Array>>instanceVariableObject
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(a FactoryROR a FooBar)

[ha instanceVariableObject] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ha instanceVariableObject]
		initialMilliseconds: 	1670113
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->(Time>>#< "a CompiledMethod(693895168)") #=-...etc...
		format: 	134
		instanceVariables: 	#('seconds' 'nanos')
		organization: 	('ansi protocol' < = duration hash hour hour12 hour24 meridianAbb...etc...
		subclasses: 	nil
		name: 	#Time
		classPool: 	nil
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ha instanceVariableObject]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	29
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ [ha instanceVariableObject] timeToRun
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(721682432)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1670716) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 send...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1670716) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1670716) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1670716) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1670716) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(263454720)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1670716) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1670716) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(436994048)
	Receiver's instance variables: 
		timeStamp: 	1670102
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	118@76
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1670716) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@146
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@146
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1670716) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	331@196 corner: 347@212
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@196 corner: 347@212
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(90701824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@196 331@196 mouseMove CMD 1669668 nil]
		targetOffset: 	121@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1669668 331 196 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(253493248) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(253493248) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	331@196 corner: 347@212
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@196 corner: 347@212
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(90701824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@196 331@196 mouseMove CMD 1669668 nil]
		targetOffset: 	121@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1669668 331 196 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	331@196 corner: 347@212
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@196 corner: 347@212
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(90701824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@196 331@196 mouseMove CMD 1669668 nil]
		targetOffset: 	121@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1669668 331 196 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	331@196 corner: 347@212
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@196 corner: 347@212
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(90701824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@196 331@196 mouseMove CMD 1669668 nil]
		targetOffset: 	121@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1669668 331 196 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	331@196 corner: 347@212
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@196 corner: 347@212
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(90701824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@196 331@196 mouseMove CMD 1669668 nil]
		targetOffset: 	121@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1669668 331 196 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 1670102 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	331@196 corner: 347@212
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@196 corner: 347@212
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(90701824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@196 331@196 mouseMove CMD 1669668 nil]
		targetOffset: 	121@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1669668 331 196 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1066926080))(an Ov...etc...
		lastStepTime: 	1670089
		lastStepMessage: 	nil
		lastCycleTime: 	1670129
		alarms: 	a Heap()
		lastAlarmTime: 	1670089
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1066926080))(an Ov...etc...
		lastStepTime: 	1670089
		lastStepMessage: 	nil
		lastCycleTime: 	1670129
		alarms: 	a Heap()
		lastAlarmTime: 	1670089
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1066926080))(an Ov...etc...
		lastStepTime: 	1670089
		lastStepMessage: 	nil
		lastCycleTime: 	1670129
		alarms: 	a Heap()
		lastAlarmTime: 	1670089
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Array(Object)>>doesNotUnderstand: #instanceVariableObject
[ha instanceVariableObject] in UndefinedObject>>DoIt
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
AccessRevoqued: Your access has been revoque. Looser
4 April 2011 1:17:56 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FooBar(RevoqueClass)>>doesNotUnderstand: #instanceVariableObject
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	instanceVariableObject
	Receiver's instance variables: 
<<error during printing>>

[pr instanceVariableObject] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[pr instanceVariableObject]
		initialMilliseconds: 	1734173
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->(Time>>#< "a CompiledMethod(693895168)") #=-...etc...
		format: 	134
		instanceVariables: 	#('seconds' 'nanos')
		organization: 	('ansi protocol' < = duration hash hour hour12 hour24 meridianAbb...etc...
		subclasses: 	nil
		name: 	#Time
		classPool: 	nil
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [pr instanceVariableObject]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	29
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ [pr instanceVariableObject] timeToRun
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(756809728)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@210
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@210
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1734773) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 send...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@210
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@210
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1734773) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@210
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@210
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1734773) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@210
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@210
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1734773) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@210
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@210
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1734773) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(263454720)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@210
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@210
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1734773) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@210
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@210
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1734773) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(436994048)
	Receiver's instance variables: 
		timeStamp: 	1734163
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	280@187
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@210
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@210
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1734773) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@210
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@210
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 1734773) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	493@259 corner: 509@275
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	493@259 corner: 509@275
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(932708352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[493@259 493@259 mouseMove CMD 1733904 nil]
		targetOffset: 	281@187
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1733904 493 259 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(143392768) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(143392768) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	493@259 corner: 509@275
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	493@259 corner: 509@275
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(932708352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[493@259 493@259 mouseMove CMD 1733904 nil]
		targetOffset: 	281@187
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1733904 493 259 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	493@259 corner: 509@275
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	493@259 corner: 509@275
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(932708352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[493@259 493@259 mouseMove CMD 1733904 nil]
		targetOffset: 	281@187
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1733904 493 259 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	493@259 corner: 509@275
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	493@259 corner: 509@275
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(932708352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[493@259 493@259 mouseMove CMD 1733904 nil]
		targetOffset: 	281@187
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1733904 493 259 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	493@259 corner: 509@275
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	493@259 corner: 509@275
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(932708352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[493@259 493@259 mouseMove CMD 1733904 nil]
		targetOffset: 	281@187
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1733904 493 259 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 1734163 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	493@259 corner: 509@275
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	493@259 corner: 509@275
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(932708352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[493@259 493@259 mouseMove CMD 1733904 nil]
		targetOffset: 	281@187
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1733904 493 259 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	1734148
		lastStepMessage: 	nil
		lastCycleTime: 	1734188
		alarms: 	a Heap()
		lastAlarmTime: 	1734148
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	1734148
		lastStepMessage: 	nil
		lastCycleTime: 	1734188
		alarms: 	a Heap()
		lastAlarmTime: 	1734148
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	1734148
		lastStepMessage: 	nil
		lastCycleTime: 	1734188
		alarms: 	a Heap()
		lastAlarmTime: 	1734148
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
FooBar(RevoqueClass)>>doesNotUnderstand: #instanceVariableObject
[pr instanceVariableObject] in UndefinedObject>>DoIt
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "for:with:" is nil
4 April 2011 1:45:16 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #for:with:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	for: a FooBar with: #(#instanceVariableObjectNotQuick #instanceVariab...etc...
		exception: 	MessageNotUnderstood: receiver of "for:with:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ (timeToRunLimitedInterfaceHandle for: a with: selector) ins...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(580124672)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@354
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@354
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3374575) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 send...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@354
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@354
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3374575) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@354
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@354
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3374575) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@354
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@354
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3374575) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@354
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@354
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3374575) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(263454720)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@354
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@354
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3374575) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@354
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@354
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3374575) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(436994048)
	Receiver's instance variables: 
		timeStamp: 	3373968
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	79@560
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@354
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@354
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3374575) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 419@354
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 419@354
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3374575) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	292@488 corner: 308@504
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	292@488 corner: 308@504
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(624951296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[292@488 292@488 mouseMove CMD 3373089 nil]
		targetOffset: 	2@143
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3373089 292 488 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(69730304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(69730304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	292@488 corner: 308@504
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	292@488 corner: 308@504
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(624951296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[292@488 292@488 mouseMove CMD 3373089 nil]
		targetOffset: 	2@143
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3373089 292 488 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	292@488 corner: 308@504
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	292@488 corner: 308@504
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(624951296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[292@488 292@488 mouseMove CMD 3373089 nil]
		targetOffset: 	2@143
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3373089 292 488 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	292@488 corner: 308@504
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	292@488 corner: 308@504
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(624951296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[292@488 292@488 mouseMove CMD 3373089 nil]
		targetOffset: 	2@143
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3373089 292 488 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	292@488 corner: 308@504
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	292@488 corner: 308@504
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(624951296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[292@488 292@488 mouseMove CMD 3373089 nil]
		targetOffset: 	2@143
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3373089 292 488 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 3373968 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	292@488 corner: 308@504
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	292@488 corner: 308@504
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(624951296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[292@488 292@488 mouseMove CMD 3373089 nil]
		targetOffset: 	2@143
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3373089 292 488 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3373957
		lastStepMessage: 	nil
		lastCycleTime: 	3373998
		alarms: 	a Heap()
		lastAlarmTime: 	3373957
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3373957
		lastStepMessage: 	nil
		lastCycleTime: 	3373998
		alarms: 	a Heap()
		lastAlarmTime: 	3373957
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3373957
		lastStepMessage: 	nil
		lastCycleTime: 	3373998
		alarms: 	a Heap()
		lastAlarmTime: 	3373957
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3373957
		lastStepMessage: 	nil
		lastCycleTime: 	3373998
		alarms: 	a Heap()
		lastAlarmTime: 	3373957
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(69730304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#changeSet->(Project>>#changeSet "a CompiledMeth...etc...
		format: 	144
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'displayD...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #for:with:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: a descendent of Object>>isFoo
4 April 2011 1:45:51 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FooBar(Object)>>doesNotUnderstand: #isFoo
	Receiver: a FooBar
	Arguments and temporary variables: 
		aMessage: 	isFoo
		exception: 	MessageNotUnderstood: a descendent of Object>>isFoo
		resumeValue: 	nil
	Receiver's instance variables: 
		instanceVariableInteger: 	1
		instanceVariableString: 	'thisIsString'
		instanceVariableObject: 	an Object


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ (LimitedInterfaceHandle for: a with: selector) isFoo
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1014759424)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3409247) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 send...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3409247) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3409247) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3409247) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3409247) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(263454720)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3409247) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3409247) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(436994048)
	Receiver's instance variables: 
		timeStamp: 	3408635
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-1@279
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3409247) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3409247) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	212@399 corner: 228@415
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	212@399 corner: 228@415
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(74448896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[212@399 212@399 mouseMove CMD 3408220 nil]
		targetOffset: 	332@246
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3408220 212 399 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(476839936) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(476839936) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	212@399 corner: 228@415
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	212@399 corner: 228@415
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(74448896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[212@399 212@399 mouseMove CMD 3408220 nil]
		targetOffset: 	332@246
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3408220 212 399 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	212@399 corner: 228@415
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	212@399 corner: 228@415
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(74448896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[212@399 212@399 mouseMove CMD 3408220 nil]
		targetOffset: 	332@246
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3408220 212 399 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	212@399 corner: 228@415
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	212@399 corner: 228@415
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(74448896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[212@399 212@399 mouseMove CMD 3408220 nil]
		targetOffset: 	332@246
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3408220 212 399 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	212@399 corner: 228@415
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	212@399 corner: 228@415
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(74448896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[212@399 212@399 mouseMove CMD 3408220 nil]
		targetOffset: 	332@246
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3408220 212 399 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 3408635 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	212@399 corner: 228@415
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	212@399 corner: 228@415
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(74448896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[212@399 212@399 mouseMove CMD 3408220 nil]
		targetOffset: 	332@246
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3408220 212 399 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3408631
		lastStepMessage: 	nil
		lastCycleTime: 	3408670
		alarms: 	a Heap()
		lastAlarmTime: 	3408631
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3408631
		lastStepMessage: 	nil
		lastCycleTime: 	3408670
		alarms: 	a Heap()
		lastAlarmTime: 	3408631
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3408631
		lastStepMessage: 	nil
		lastCycleTime: 	3408670
		alarms: 	a Heap()
		lastAlarmTime: 	3408631
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3408631
		lastStepMessage: 	nil
		lastCycleTime: 	3408670
		alarms: 	a Heap()
		lastAlarmTime: 	3408631
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(476839936) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#changeSet->(Project>>#changeSet "a CompiledMeth...etc...
		format: 	144
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'displayD...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
FooBar(Object)>>doesNotUnderstand: #isFoo
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: a descendent of Object>>isFoo
4 April 2011 1:45:59 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FooBar(Object)>>doesNotUnderstand: #isFoo
	Receiver: a FooBar
	Arguments and temporary variables: 
		aMessage: 	isFoo
		exception: 	MessageNotUnderstood: a descendent of Object>>isFoo
		resumeValue: 	nil
	Receiver's instance variables: 
		instanceVariableInteger: 	1
		instanceVariableString: 	'thisIsString'
		instanceVariableObject: 	an Object


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ (LimitedInterfaceHandle for: a with: selector) isFoo
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(799277056)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3416970) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 send...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3416970) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3416970) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3416970) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3416970) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(263454720)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3416970) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3416970) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(436994048)
	Receiver's instance variables: 
		timeStamp: 	3416363
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	428@274
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3416970) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 689@290
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 689@290
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3416970) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	641@394 corner: 657@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	641@394 corner: 657@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(236453888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[641@394 641@394 mouseMove CMD 3416207 nil]
		targetOffset: 	428@274
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3416207 641 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(784334848) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(784334848) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	641@394 corner: 657@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	641@394 corner: 657@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(236453888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[641@394 641@394 mouseMove CMD 3416207 nil]
		targetOffset: 	428@274
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3416207 641 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	641@394 corner: 657@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	641@394 corner: 657@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(236453888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[641@394 641@394 mouseMove CMD 3416207 nil]
		targetOffset: 	428@274
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3416207 641 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	641@394 corner: 657@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	641@394 corner: 657@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(236453888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[641@394 641@394 mouseMove CMD 3416207 nil]
		targetOffset: 	428@274
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3416207 641 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	641@394 corner: 657@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	641@394 corner: 657@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(236453888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[641@394 641@394 mouseMove CMD 3416207 nil]
		targetOffset: 	428@274
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3416207 641 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 3416363 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	641@394 corner: 657@410
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	641@394 corner: 657@410
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(236453888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[641@394 641@394 mouseMove CMD 3416207 nil]
		targetOffset: 	428@274
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3416207 641 394 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3416352
		lastStepMessage: 	nil
		lastCycleTime: 	3416392
		alarms: 	a Heap()
		lastAlarmTime: 	3416352
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3416352
		lastStepMessage: 	nil
		lastCycleTime: 	3416392
		alarms: 	a Heap()
		lastAlarmTime: 	3416352
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3416352
		lastStepMessage: 	nil
		lastCycleTime: 	3416392
		alarms: 	a Heap()
		lastAlarmTime: 	3416352
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	3416352
		lastStepMessage: 	nil
		lastCycleTime: 	3416392
		alarms: 	a Heap()
		lastAlarmTime: 	3416352
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(784334848) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#changeSet->(Project>>#changeSet "a CompiledMeth...etc...
		format: 	144
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'displayD...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
FooBar(Object)>>doesNotUnderstand: #isFoo
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: key not found
4 April 2011 1:48:30 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

MethodDictionary(Object)>>error:
	Receiver: a MethodDictionary(#initialize->(FooBar>>#initialize "a CompiledMethod(756285440)") #insta...etc...
	Arguments and temporary variables: 
		aString: 	'key not found'
	Receiver's instance variables: 
		tally: 	12
		array: 	{nil. ((CompiledMethod newMethod: 4 header: 1288) literalAt: 1 put: #ins...etc...


MethodDictionary(Dictionary)>>errorKeyNotFound
	Receiver: a MethodDictionary(#initialize->(FooBar>>#initialize "a CompiledMethod(756285440)") #insta...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		tally: 	12
		array: 	{nil. ((CompiledMethod newMethod: 4 header: 1288) literalAt: 1 put: #ins...etc...


[self errorKeyNotFound] in MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary(#initialize->(FooBar>>#initialize "a CompiledMethod(756285440)") #insta...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		tally: 	12
		array: 	{nil. ((CompiledMethod newMethod: 4 header: 1288) literalAt: 1 put: #ins...etc...


MethodDictionary>>at:ifAbsent:
	Receiver: a MethodDictionary(#initialize->(FooBar>>#initialize "a CompiledMethod(756285440)") #insta...etc...
	Arguments and temporary variables: 
		key: 	#isfoo
		aBlock: 	[self errorKeyNotFound]
		index: 	20
	Receiver's instance variables: 
		tally: 	12
		array: 	{nil. ((CompiledMethod newMethod: 4 header: 1288) literalAt: 1 put: #ins...etc...


MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary(#initialize->(FooBar>>#initialize "a CompiledMethod(756285440)") #insta...etc...
	Arguments and temporary variables: 
		key: 	#isfoo
	Receiver's instance variables: 
		tally: 	12
		array: 	{nil. ((CompiledMethod newMethod: 4 header: 1288) literalAt: 1 put: #ins...etc...


[:index | newMethodDict at: index put: (anObject class methodDict at: index) copy] in LimitedInterfaceHandle>>createLimitedClassFor:withMethods:
	Receiver: a LimitedInterfaceHandle
	Arguments and temporary variables: 
		anObject: 	#isfoo
		newMethodDict: 	a FooBar
		index: 	a MethodDictionary()
	Receiver's instance variables: 
		receiver: 	nil
		classLookup: 	nil
		state: 	nil
		configuration: 	4


Array(SequenceableCollection)>>do:
	Receiver: #(#isfoo #isBar #instanceVariableInteger: #instanceVariableIntegerNotQuick #instanceVariab...etc...
	Arguments and temporary variables: 
		aBlock: 	[:index | newMethodDict at: index put: (anObject class methodDict at: i...etc...
		index: 	1
		indexLimiT: 	10
	Receiver's instance variables: 
#(#isfoo #isBar #instanceVariableInteger: #instanceVariableIntegerNotQuick #instanceVariab...etc...

LimitedInterfaceHandle>>createLimitedClassFor:withMethods:
	Receiver: a LimitedInterfaceHandle
	Arguments and temporary variables: 
		anObject: 	a FooBar
		aCollectionOfSymbols: 	#(#isfoo #isBar #instanceVariableInteger: #instanceVariab...etc...
		newMethodDict: 	a MethodDictionary()
	Receiver's instance variables: 
		receiver: 	nil
		classLookup: 	nil
		state: 	nil
		configuration: 	4


LimitedInterfaceHandle class>>initializeFor:with:
	Receiver: LimitedInterfaceHandle
	Arguments and temporary variables: 
		anObject: 	a FooBar
		aCollectionOfSymbols: 	#(#isfoo #isBar #instanceVariableInteger: #instanceVariab...etc...
		newClass: 	nil
		freshHandle: 	a LimitedInterfaceHandle
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary(#createLimitedClassFor:withMethods:->(LimitedInt...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified' createLimitedClassFor:withMethods:)

		subclasses: 	{CategoryHandle. PragmaHandle}
		name: 	#LimitedInterfaceHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-LimitedInterface'
		traitComposition: 	{}
		localSelectors: 	nil


LimitedInterfaceHandle class>>for:with:
	Receiver: LimitedInterfaceHandle
	Arguments and temporary variables: 
		anObject: 	a FooBar
		aCollectionOfSymbol: 	#(#isfoo #isBar #instanceVariableInteger: #instanceVariabl...etc...
		freshHandle: 	nil
	Receiver's instance variables: 
		superclass: 	Handle
		methodDict: 	a MethodDictionary(#createLimitedClassFor:withMethods:->(LimitedInt...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified' createLimitedClassFor:withMethods:)

		subclasses: 	{CategoryHandle. PragmaHandle}
		name: 	#LimitedInterfaceHandle
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-LimitedInterface'
		traitComposition: 	{}
		localSelectors: 	nil


[LimitedInterfaceHandle for: a with: selector] in [100000
		timesRepeat: [LimitedInterfaceHandle for: a with: selector]] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

SmallInteger(Integer)>>timesRepeat:
	Receiver: 100000
	Arguments and temporary variables: 
		aBlock: 	[LimitedInterfaceHandle for: a with: selector]
		count: 	1
	Receiver's instance variables: 
100000

[100000
		timesRepeat: [LimitedInterfaceHandle for: a with: selector]] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[100000
		timesRepeat: [LimitedInterfaceHandle for: a with: selecto...etc...
		initialMilliseconds: 	3567912
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->(Time>>#< "a CompiledMethod(693895168)") #=-...etc...
		format: 	134
		instanceVariables: 	#('seconds' 'nanos')
		organization: 	('ansi protocol' < = duration hash hour hour12 hour24 meridianAbb...etc...
		subclasses: 	nil
		name: 	#Time
		classPool: 	nil
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [100000
		timesRepeat: [LimitedInterfaceHandle for: a with: selector]]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	45
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ [100000
		timesRepeat: [LimitedInterfaceHandle for: a with:...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(748945408)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 676@386
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 676@386
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3568513) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 send...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 676@386
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 676@386
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3568513) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 676@386
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 676@386
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3568513) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 676@386
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 676@386
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3568513) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 676@386
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 676@386
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3568513) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(263454720)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 676@386
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 676@386
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3568513) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 676@386
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 676@386
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3568513) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(436994048)
	Receiver's instance variables: 
		timeStamp: 	3567908
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-3@329
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 676@386
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 676@386
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3568513) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 676@386
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 676@386
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 3568513) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	210@401 corner: 226@417
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	210@401 corner: 226@417
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(990380032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[210@401 210@401 mouseMove CMD 3567168 nil]
		targetOffset: 	2@282
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3567168 210 401 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(966000640) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
MethodDictionary(Object)>>error:
MethodDictionary(Dictionary)>>errorKeyNotFound
[self errorKeyNotFound] in MethodDictionary(Dictionary)>>at:
MethodDictionary>>at:ifAbsent:
MethodDictionary(Dictionary)>>at:
[:index | newMethodDict at: index put: (anObject class methodDict at: index) copy] in LimitedInterfaceHandle>>createLimitedClassFor:withMethods:
Array(SequenceableCollection)>>do:
LimitedInterfaceHandle>>createLimitedClassFor:withMethods:
LimitedInterfaceHandle class>>initializeFor:with:
LimitedInterfaceHandle class>>for:with:
[LimitedInterfaceHandle for: a with: selector] in [100000
		timesRepeat: [LimitedInterfaceHandle for: a with: selector]] in UndefinedObject>>DoIt
SmallInteger(Integer)>>timesRepeat:
[100000
		timesRepeat: [LimitedInterfaceHandle for: a with: selector]] in UndefinedObject>>DoIt
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Factory already exists
5 April 2011 4:57:28 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>error:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		aString: 	'Factory already exists'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grant->(FactoryROR>>#grant "a CompiledMethod(83...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass handleClass: initialize keeper...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil
		factoryManager: 	a WeakValueDictionary(663224320->nil 1035730944->nil )


FactoryROR class(Class)>>duplicateClassWithNewName:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		aSymbol: 	'Factory'
		copysName: 	#Factory
		class: 	nil
		newDefinition: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grant->(FactoryROR>>#grant "a CompiledMethod(83...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass handleClass: initialize keeper...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil
		factoryManager: 	a WeakValueDictionary(663224320->nil 1035730944->nil )


Browser>>copyClass
	Receiver: a Browser
	Arguments and temporary variables: 
		copysName: 	'Factory'
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(180092928) a PluggableListMorph(43...etc...
		contents: 	nil
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		systemOrganizer: 	('Announcements-Core' Announcement AnnouncementSet Announcer)
...etc...
		classOrganizer: 	('as yet unclassified' handleClass handleClass: initialize keep...etc...
		metaClassOrganizer: 	('as yet unclassified' cleanUnusedValue createRevocableHand...etc...
		systemCategoryListIndex: 	319
		classListIndex: 	3
		messageCategoryListIndex: 	0
		messageListIndex: 	0
		editSelection: 	#editClass
		metaClassIndicated: 	false


Browser(StringHolder)>>perform:orSendTo:
	Receiver: a Browser
	Arguments and temporary variables: 
		selector: 	#copyClass
		otherTarget: 	a PluggableListMorph(534249472)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(180092928) a PluggableListMorph(43...etc...
		contents: 	nil
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		systemOrganizer: 	('Announcements-Core' Announcement AnnouncementSet Announcer)
...etc...
		classOrganizer: 	('as yet unclassified' handleClass handleClass: initialize keep...etc...
		metaClassOrganizer: 	('as yet unclassified' cleanUnusedValue createRevocableHand...etc...
		systemCategoryListIndex: 	319
		classListIndex: 	3
		messageCategoryListIndex: 	0
		messageListIndex: 	0
		editSelection: 	#editClass
		metaClassIndicated: 	false


[| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]]] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(609222656)'Copy class'
	Arguments and temporary variables: 
		evt: 	[625@325 mouseUp 36866 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	576@322 corner: 740@336
		owner: 	a MenuMorph(770965504)
		submorphs: 	#()
		fullBounds: 	576@322 corner: 740@336
		color: 	Color black
		extension: 	a MorphExtension (39845888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Copy class'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Browser
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#copyClass a PluggableListMorph(534249472))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(609222656)'Copy class'
	Arguments and temporary variables: 
		evt: 	[625@325 mouseUp 36866 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	576@322 corner: 740@336
		owner: 	a MenuMorph(770965504)
		submorphs: 	#()
		fullBounds: 	576@322 corner: 740@336
		color: 	Color black
		extension: 	a MorphExtension (39845888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Copy class'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Browser
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#copyClass a PluggableListMorph(534249472))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(609222656)'Copy class'
	Arguments and temporary variables: 
		evt: 	[625@325 mouseUp 36866 nil]
	Receiver's instance variables: 
		bounds: 	576@322 corner: 740@336
		owner: 	a MenuMorph(770965504)
		submorphs: 	#()
		fullBounds: 	576@322 corner: 740@336
		color: 	Color black
		extension: 	a MorphExtension (39845888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Copy class'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Browser
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#copyClass a PluggableListMorph(534249472))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(609222656)'Copy class'
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
	Receiver's instance variables: 
		bounds: 	576@322 corner: 740@336
		owner: 	a MenuMorph(770965504)
		submorphs: 	#()
		fullBounds: 	576@322 corner: 740@336
		color: 	Color black
		extension: 	a MorphExtension (39845888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Copy class'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Browser
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#copyClass a PluggableListMorph(534249472))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [625@325 mouseUp 36866 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(609222656)'Copy class'
	Receiver's instance variables: 
		timeStamp: 	36866
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	625@325
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(609222656)'Copy class'
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
	Receiver's instance variables: 
		bounds: 	576@322 corner: 740@336
		owner: 	a MenuMorph(770965504)
		submorphs: 	#()
		fullBounds: 	576@322 corner: 740@336
		color: 	Color black
		extension: 	a MorphExtension (39845888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Copy class'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Browser
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#copyClass a PluggableListMorph(534249472))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		aMorph: 	a ToggleMenuItemMorph(609222656)'Copy class'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		aMorph: 	a ToggleMenuItemMorph(609222656)'Copy class'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(609222656)'Copy class'
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	576@322 corner: 740@336
		owner: 	a MenuMorph(770965504)
		submorphs: 	#()
		fullBounds: 	576@322 corner: 740@336
		color: 	Color black
		extension: 	a MorphExtension (39845888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Copy class'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Browser
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#copyClass a PluggableListMorph(534249472))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		aMorph: 	a MenuMorph(770965504)
		localEvt: 	[625@325 mouseUp 36866 nil]
		index: 	19
		child: 	a ToggleMenuItemMorph(609222656)'Copy class'
		morphs: 	an Array(a ToggleMenuItemMorph(531365888)'Browse full (b)' a ToggleMenu...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		aMorph: 	a MenuMorph(770965504)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(770965504)
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	571@107 corner: 745@415
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(531365888)'Browse full (b)' a ToggleM...etc...
		fullBounds: 	571@107 corner: 745@415
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (272105472) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Browser
		selectedItem: 	a ToggleMenuItemMorph(609222656)'Copy class'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(531365888)'Browse full (b...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(770965504)
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
	Receiver's instance variables: 
		bounds: 	571@107 corner: 745@415
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(531365888)'Browse full (b)' a ToggleM...etc...
		fullBounds: 	571@107 corner: 745@415
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (272105472) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Browser
		selectedItem: 	a ToggleMenuItemMorph(609222656)'Copy class'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(531365888)'Browse full (b...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(770965504)
	Arguments and temporary variables: 
		evt: 	[625@325 mouseUp 36866 nil]
	Receiver's instance variables: 
		bounds: 	571@107 corner: 745@415
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(531365888)'Browse full (b)' a ToggleM...etc...
		fullBounds: 	571@107 corner: 745@415
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (272105472) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Browser
		selectedItem: 	a ToggleMenuItemMorph(609222656)'Copy class'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(531365888)'Browse full (b...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		focusHolder: 	a MenuMorph(770965504)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	615@396 corner: 631@412
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	615@396 corner: 631@412
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(467402752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[614@396 615@396 mouseMove 40004 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 40004 615 396 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(337641472) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[625@325 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(337641472) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		focusHolder: 	a MenuMorph(770965504)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	615@396 corner: 631@412
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	615@396 corner: 631@412
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(467402752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[614@396 615@396 mouseMove 40004 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 40004 615 396 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		focusHolder: 	a MenuMorph(770965504)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	615@396 corner: 631@412
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	615@396 corner: 631@412
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(467402752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[614@396 615@396 mouseMove 40004 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 40004 615 396 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
	Receiver's instance variables: 
		bounds: 	615@396 corner: 631@412
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	615@396 corner: 631@412
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(467402752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[614@396 615@396 mouseMove 40004 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 40004 615 396 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[625@325 mouseUp 36866 nil]
		evt: 	[625@325 mouseUp 36866 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	615@396 corner: 631@412
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	615@396 corner: 631@412
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(467402752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[614@396 615@396 mouseMove 40004 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 40004 615 396 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[625@325 mouseUp 36866 nil]
		evtBuf: 	#(1 36866 625 325 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	615@396 corner: 631@412
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	615@396 corner: 631@412
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(467402752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[614@396 615@396 mouseMove 40004 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 40004 615 396 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	41383
		lastStepMessage: 	nil
		lastCycleTime: 	41402
		alarms: 	a Heap()
		lastAlarmTime: 	41383
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	41383
		lastStepMessage: 	nil
		lastCycleTime: 	41402
		alarms: 	a Heap()
		lastAlarmTime: 	41383
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	41383
		lastStepMessage: 	nil
		lastCycleTime: 	41402
		alarms: 	a Heap()
		lastAlarmTime: 	41383
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	41383
		lastStepMessage: 	nil
		lastCycleTime: 	41402
		alarms: 	a Heap()
		lastAlarmTime: 	41383
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(337641472) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#changeSet->(Project>>#changeSet "a CompiledMeth...etc...
		format: 	144
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'displayD...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
FactoryROR class(Object)>>error:
FactoryROR class(Class)>>duplicateClassWithNewName:
Browser>>copyClass
Browser(StringHolder)>>perform:orSendTo:
[| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]]] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
5 April 2011 5:07:01 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aBlock: 	[target printString]
		anExceptionalEvent: 	AccessRevoqued
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		a: 	an Array(a FactoryROR an Object)
		meta: 	a FactoryROR
		target: 	an Object
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Tests-Localization' #'Han...etc...
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476014
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil RevocablesObjectsReferenceWithPropagationTest>>#testRev...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Tests-Localization' #'Han...etc...
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476014
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Tests-Localization' #'Han...etc...
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476014
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Tests-Localization' #'Han...etc...
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476014
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Tests-Localization' #'Han...etc...
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476014
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Tests-Localization' #'Han...etc...
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476014
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(871628800)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	371@74 corner: 715@276
		owner: 	a PluggableStandardWindow(77332480)
		submorphs: 	an Array(a ScrollBar(548929536) a TransformMorph(567017472))
		fullBounds: 	371@74 corner: 715@276
		color: 	Color white
		extension: 	a MorphExtension (970457088) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(305135616)
		scroller: 	a TransformMorph(567017472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(548929536)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172490752)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(871628800)
	Arguments and temporary variables: 
		event: 	[494@82 mouseUp 614346 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	371@74 corner: 715@276
		owner: 	a PluggableStandardWindow(77332480)
		submorphs: 	an Array(a ScrollBar(548929536) a TransformMorph(567017472))
		fullBounds: 	371@74 corner: 715@276
		color: 	Color white
		extension: 	a MorphExtension (970457088) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(305135616)
		scroller: 	a TransformMorph(567017472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(548929536)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172490752)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(871628800)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
	Receiver's instance variables: 
		bounds: 	371@74 corner: 715@276
		owner: 	a PluggableStandardWindow(77332480)
		submorphs: 	an Array(a ScrollBar(548929536) a TransformMorph(567017472))
		fullBounds: 	371@74 corner: 715@276
		color: 	Color white
		extension: 	a MorphExtension (970457088) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(305135616)
		scroller: 	a TransformMorph(567017472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(548929536)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172490752)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [494@82 mouseUp 614346 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(871628800)
	Receiver's instance variables: 
		timeStamp: 	614346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	494@82
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(871628800)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
	Receiver's instance variables: 
		bounds: 	371@74 corner: 715@276
		owner: 	a PluggableStandardWindow(77332480)
		submorphs: 	an Array(a ScrollBar(548929536) a TransformMorph(567017472))
		fullBounds: 	371@74 corner: 715@276
		color: 	Color white
		extension: 	a MorphExtension (970457088) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(305135616)
		scroller: 	a TransformMorph(567017472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(548929536)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172490752)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
		aMorph: 	a PluggableListMorph(871628800)
		localEvt: 	[494@82 mouseUp 614346 nil]
		index: 	3
		child: 	a TransformMorph(567017472)
		morphs: 	an Array(a ScrollBar(548929536) a TransformMorph(567017472))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
		aMorph: 	a PluggableListMorph(871628800)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(871628800)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	371@74 corner: 715@276
		owner: 	a PluggableStandardWindow(77332480)
		submorphs: 	an Array(a ScrollBar(548929536) a TransformMorph(567017472))
		fullBounds: 	371@74 corner: 715@276
		color: 	Color white
		extension: 	a MorphExtension (970457088) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(305135616)
		scroller: 	a TransformMorph(567017472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(548929536)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172490752)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(871628800)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
	Receiver's instance variables: 
		bounds: 	371@74 corner: 715@276
		owner: 	a PluggableStandardWindow(77332480)
		submorphs: 	an Array(a ScrollBar(548929536) a TransformMorph(567017472))
		fullBounds: 	371@74 corner: 715@276
		color: 	Color white
		extension: 	a MorphExtension (970457088) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(305135616)
		scroller: 	a TransformMorph(567017472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(548929536)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172490752)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(871628800)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
	Receiver's instance variables: 
		bounds: 	371@74 corner: 715@276
		owner: 	a PluggableStandardWindow(77332480)
		submorphs: 	an Array(a ScrollBar(548929536) a TransformMorph(567017472))
		fullBounds: 	371@74 corner: 715@276
		color: 	Color white
		extension: 	a MorphExtension (970457088) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(305135616)
		scroller: 	a TransformMorph(567017472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(548929536)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172490752)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
		focusHolder: 	a PluggableListMorph(871628800)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	494@82 corner: 510@98
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	494@82 corner: 510@98
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(602406912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[494@82 mouseUp 614346 nil]
		targetOffset: 	123@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 614346 494 82 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(417333248) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[494@82 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(417333248) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
		focusHolder: 	a PluggableListMorph(871628800)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	494@82 corner: 510@98
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	494@82 corner: 510@98
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(602406912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[494@82 mouseUp 614346 nil]
		targetOffset: 	123@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 614346 494 82 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
		focusHolder: 	a PluggableListMorph(871628800)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	494@82 corner: 510@98
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	494@82 corner: 510@98
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(602406912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[494@82 mouseUp 614346 nil]
		targetOffset: 	123@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 614346 494 82 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
	Receiver's instance variables: 
		bounds: 	494@82 corner: 510@98
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	494@82 corner: 510@98
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(602406912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[494@82 mouseUp 614346 nil]
		targetOffset: 	123@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 614346 494 82 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[494@82 mouseUp 614346 nil]
		evt: 	[494@82 mouseUp 614346 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	494@82 corner: 510@98
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	494@82 corner: 510@98
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(602406912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[494@82 mouseUp 614346 nil]
		targetOffset: 	123@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 614346 494 82 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[494@82 mouseUp 614346 nil]
		evtBuf: 	#(1 614346 494 82 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	494@82 corner: 510@98
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	494@82 corner: 510@98
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(602406912)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[494@82 mouseUp 614346 nil]
		targetOffset: 	123@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 614346 494 82 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PluggableThemedOverflowPanelMorph(15...etc...
		lastStepTime: 	614326
		lastStepMessage: 	nil
		lastCycleTime: 	614366
		alarms: 	a Heap()
		lastAlarmTime: 	614326
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
5 April 2011 5:07:19 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aBlock: 	[(ThisContext namedTempAt: 3) printString]
		anExceptionalEvent: 	AccessRevoqued
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest>>DoItIn:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		ThisContext: 	RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'testRevoqueAccess

| a meta target |
a := Fact...etc...
		aContext: 	RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
		receiver: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoItIn: ThisContext 
	^ self
		should: [(ThisContext namedTempAt: 3...etc...
		method: 	(RevocablesObjectsReferenceWithPropagationTest>>#DoItIn: "a CompiledMet...etc...
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'testRevoqueAccess

| a meta target |
a := Fact...etc...
		requestor: 	a SmalltalkEditor
		class: 	RevocablesObjectsReferenceWithPropagationTest
		category: 	nil
		context: 	RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
		ctxt: 	RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(299892736)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
		ctxt: 	RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(299892736)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(299892736)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(299892736)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(299892736)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(299892736)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(299892736)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(299892736)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@130
		owner: 	a TransformMorph(714866688)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@130
		color: 	Color black
		extension: 	a MorphExtension (253231104) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: (Ob...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(812384256)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(299892736)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: ...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@130
		owner: 	a TransformMorph(714866688)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@130
		color: 	Color black
		extension: 	a MorphExtension (253231104) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: (Ob...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(812384256)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(299892736)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@130
		owner: 	a TransformMorph(714866688)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@130
		color: 	Color black
		extension: 	a MorphExtension (253231104) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: (Ob...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(812384256)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(299892736)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@130
		owner: 	a TransformMorph(714866688)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@130
		color: 	Color black
		extension: 	a MorphExtension (253231104) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: (Ob...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(812384256)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(299892736)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(299892736)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(299892736)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@130
		owner: 	a TransformMorph(714866688)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@130
		color: 	Color black
		extension: 	a MorphExtension (253231104) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: (Ob...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(812384256)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(299892736)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(812384256)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@130
		owner: 	a TransformMorph(714866688)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@130
		color: 	Color black
		extension: 	a MorphExtension (253231104) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: (Ob...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(812384256)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(299892736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@130
		owner: 	a TransformMorph(714866688)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@130
		color: 	Color black
		extension: 	a MorphExtension (253231104) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: (Ob...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(812384256)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(299892736)
	Receiver's instance variables: 
		timeStamp: 	631751
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	181@128
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(299892736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@130
		owner: 	a TransformMorph(714866688)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@130
		color: 	Color black
		extension: 	a MorphExtension (253231104) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: (Ob...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(812384256)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(299892736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 682@130
		owner: 	a TransformMorph(714866688)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 682@130
		color: 	Color black
		extension: 	a MorphExtension (253231104) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testRevoqueAccess

| a meta target |
a := FactoryROR for: (Ob...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(812384256)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(299892736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	223@339 corner: 239@355
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	223@339 corner: 239@355
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(454819840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[223@339 223@339 mouseMove CMD 631575 nil]
		targetOffset: 	184@121
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 631575 223 339 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(509607936) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(509607936) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(299892736)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	223@339 corner: 239@355
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	223@339 corner: 239@355
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(454819840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[223@339 223@339 mouseMove CMD 631575 nil]
		targetOffset: 	184@121
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 631575 223 339 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(299892736)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	223@339 corner: 239@355
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	223@339 corner: 239@355
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(454819840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[223@339 223@339 mouseMove CMD 631575 nil]
		targetOffset: 	184@121
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 631575 223 339 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	223@339 corner: 239@355
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	223@339 corner: 239@355
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(454819840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[223@339 223@339 mouseMove CMD 631575 nil]
		targetOffset: 	184@121
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 631575 223 339 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	223@339 corner: 239@355
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	223@339 corner: 239@355
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(454819840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[223@339 223@339 mouseMove CMD 631575 nil]
		targetOffset: 	184@121
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 631575 223 339 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 631751 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	223@339 corner: 239@355
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	223@339 corner: 239@355
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(454819840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[223@339 223@339 mouseMove CMD 631575 nil]
		targetOffset: 	184@121
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 631575 223 339 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	631741
		lastStepMessage: 	nil
		lastCycleTime: 	631781
		alarms: 	a Heap()
		lastAlarmTime: 	631741
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	631741
		lastStepMessage: 	nil
		lastCycleTime: 	631781
		alarms: 	a Heap()
		lastAlarmTime: 	631741
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	631741
		lastStepMessage: 	nil
		lastCycleTime: 	631781
		alarms: 	a Heap()
		lastAlarmTime: 	631741
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	631741
		lastStepMessage: 	nil
		lastCycleTime: 	631781
		alarms: 	a Heap()
		lastAlarmTime: 	631741
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
RevocablesObjectsReferenceWithPropagationTest>>DoItIn:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:09:20 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	an Object
		handle: 	nil
		factory: 	a FactoryROR
		meta: 	nil
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ FactoryROR for: Object new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(10747904)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 753478) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'FactoryROR for: (Object new)'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 753478) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 753478) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 753478) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 753478) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(635961344)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 753478) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 753478) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(317194240)
	Receiver's instance variables: 
		timeStamp: 	752884
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	85@72
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 753478) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 753478) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	289@591 corner: 305@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	289@591 corner: 305@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(715653120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[289@591 289@591 mouseMove CMD 751967 nil]
		targetOffset: 	89@73
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 751967 289 591 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1049886720) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1049886720) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	289@591 corner: 305@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	289@591 corner: 305@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(715653120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[289@591 289@591 mouseMove CMD 751967 nil]
		targetOffset: 	89@73
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 751967 289 591 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	289@591 corner: 305@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	289@591 corner: 305@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(715653120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[289@591 289@591 mouseMove CMD 751967 nil]
		targetOffset: 	89@73
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 751967 289 591 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	289@591 corner: 305@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	289@591 corner: 305@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(715653120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[289@591 289@591 mouseMove CMD 751967 nil]
		targetOffset: 	89@73
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 751967 289 591 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	289@591 corner: 305@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	289@591 corner: 305@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(715653120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[289@591 289@591 mouseMove CMD 751967 nil]
		targetOffset: 	89@73
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 751967 289 591 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 752884 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	289@591 corner: 305@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	289@591 corner: 305@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(715653120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[289@591 289@591 mouseMove CMD 751967 nil]
		targetOffset: 	89@73
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 751967 289 591 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(792723456))(an Ove...etc...
		lastStepTime: 	752864
		lastStepMessage: 	nil
		lastCycleTime: 	752904
		alarms: 	a Heap()
		lastAlarmTime: 	752864
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(792723456))(an Ove...etc...
		lastStepTime: 	752864
		lastStepMessage: 	nil
		lastCycleTime: 	752904
		alarms: 	a Heap()
		lastAlarmTime: 	752864
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(792723456))(an Ove...etc...
		lastStepTime: 	752864
		lastStepMessage: 	nil
		lastCycleTime: 	752904
		alarms: 	a Heap()
		lastAlarmTime: 	752864
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(792723456))(an Ove...etc...
		lastStepTime: 	752864
		lastStepMessage: 	nil
		lastCycleTime: 	752904
		alarms: 	a Heap()
		lastAlarmTime: 	752864
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1049886720) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:10:38 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	an Object
		handle: 	nil
		factory: 	a FactoryROR
		meta: 	nil
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


RevocablesObjectsReferenceWithPropagationTest>>testGrantAccess
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess
	Arguments and temporary variables: 
		a: 	nil
		meta: 	nil
		target: 	nil
	Receiver's instance variables: 
		testSelector: 	#testGrantAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testGrantAccess


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testGrantAccess


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testGrantAccess


[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess
	Receiver's instance variables: 
		timeStamp: 	2011-04-05T17:10:38+00:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[:ex | ex sunitAnnounce: aTestCase toResult: self]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	58
		numArgs: 	0


TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess
	Receiver's instance variables: 
		timeStamp: 	2011-04-05T17:10:38+00:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>run:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess
	Arguments and temporary variables: 
		aResult: 	0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpect...etc...
	Receiver's instance variables: 
		testSelector: 	#testGrantAccess


TestRunner>>runTest:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476238
		result: 	0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


[:each | self runTest: each] in TestRunner>>runSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476238
		result: 	0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(Time millisecondsSince: lastUpdate)
							>= msecs]])
		ifTrue: [bar value: count.
			oldLabel = (newLabel := (labelBlock value: each)
								ifNil: [oldLabel])
				ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
			lastUpdate := Time millisecondClockValue].
	aBlock value: each.
	count := count + 1] in [:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(T...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	83
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException: 
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(860356608)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		argString: 	''
		argPoint: 	167@660
		argMinVal: 	0
		argMaxVal: 	60
		argWorkBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					o...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	''
		aPoint: 	167@660
		minVal: 	0
		maxVal: 	60
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
		aPoint: 	167@660
		minVal: 	0
		maxVal: 	60
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
''

OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


OrderedCollection(Collection)>>do:displayingProgress:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | self runTest: each]
		aStringOrBlock: 	'Running 60 Tests'
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | self runTest: each]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476238
		result: 	0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | self runTest: each]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476238
		result: 	0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


TestRunner>>runSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476238
		result: 	0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


TestRunner>>runAll
	Receiver: a TestRunner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476238
		result: 	0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(862453760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	90@646 corner: 282@687
		owner: 	a PluggableThemedOverflowPanelMorph(546570240)
		submorphs: 	an Array(an AlignmentMorph(382468096))
		fullBounds: 	90@646 corner: 282@687
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (289669120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a TestRunner
		label: 	'Run Selected'
		getStateSelector: 	nil
		actionSelector: 	#runAll
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasRunnable


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(862453760)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(862453760)
		m: 	[167@660 mouseUp 830848 nil]
	Receiver's instance variables: 
		bounds: 	90@646 corner: 282@687
		owner: 	a PluggableThemedOverflowPanelMorph(546570240)
		submorphs: 	an Array(an AlignmentMorph(382468096))
		fullBounds: 	90@646 corner: 282@687
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (289669120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a TestRunner
		label: 	'Run Selected'
		getStateSelector: 	nil
		actionSelector: 	#runAll
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasRunnable


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(862453760) a PluggableButtonMorph(293076992) a PluggableBu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	6
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(862453760) a PluggableButtonMorph(293076992) a PluggableBu...etc...


--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
RevocablesObjectsReferenceWithPropagationTest>>testGrantAccess
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>run:
TestRunner>>runTest:
[:each | self runTest: each] in TestRunner>>runSuite:
[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(Time millisecondsSince: lastUpdate)
							>= msecs]])
		ifTrue: [bar value: count.
			oldLabel = (newLabel := (labelBlock value: each)
								ifNil: [oldLabel])
				ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
			lastUpdate := Time millisecondClockValue].
	aBlock value: each.
	count := count + 1] in [:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection>>do:
[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection(Collection)>>do:displayingProgress:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>runSuite:
TestRunner>>runAll
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:10:40 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	a FooBar
		handle: 	nil
		factory: 	a FactoryROR
		meta: 	nil
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


RevocablesObjectsReferenceWithPropagationTest>>testOneDontRevoqueTwo
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 
		a: 	nil
		meta: 	nil
		target: 	nil
		test: 	nil
		a2: 	nil
		meta2: 	nil
		target2: 	nil
	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
	Receiver: 1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTw...etc...
	Receiver's instance variables: 
		timeStamp: 	2011-04-05T17:10:38+00:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#te...etc...


BlockClosure>>on:do:
	Receiver: [aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[:ex | ex sunitAnnounce: aTestCase toResult: self]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	58
		numArgs: 	0


TestResult>>runCase:
	Receiver: 1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTw...etc...
	Receiver's instance variables: 
		timeStamp: 	2011-04-05T17:10:38+00:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#te...etc...


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>run:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 
		aResult: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpect...etc...
	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


TestRunner>>runTest:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTw...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


[:each | self runTest: each] in TestRunner>>runSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(Time millisecondsSince: lastUpdate)
							>= msecs]])
		ifTrue: [bar value: count.
			oldLabel = (newLabel := (labelBlock value: each)
								ifNil: [oldLabel])
				ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
			lastUpdate := Time millisecondClockValue].
	aBlock value: each.
	count := count + 1] in [:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(T...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	83
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException: 
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(860356608)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		argString: 	''
		argPoint: 	167@660
		argMinVal: 	0
		argMaxVal: 	60
		argWorkBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					o...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	''
		aPoint: 	167@660
		minVal: 	0
		maxVal: 	60
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
		aPoint: 	167@660
		minVal: 	0
		maxVal: 	60
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
''

OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


OrderedCollection(Collection)>>do:displayingProgress:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | self runTest: each]
		aStringOrBlock: 	'Running 60 Tests'
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | self runTest: each]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | self runTest: each]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


TestRunner>>runSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


TestRunner>>runAll
	Receiver: a TestRunner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(862453760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	90@646 corner: 282@687
		owner: 	a PluggableThemedOverflowPanelMorph(546570240)
		submorphs: 	an Array(an AlignmentMorph(382468096))
		fullBounds: 	90@646 corner: 282@687
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (289669120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a TestRunner
		label: 	'Run Selected'
		getStateSelector: 	nil
		actionSelector: 	#runAll
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasRunnable


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(862453760)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(862453760)
		m: 	[167@660 mouseUp 830848 nil]
	Receiver's instance variables: 
		bounds: 	90@646 corner: 282@687
		owner: 	a PluggableThemedOverflowPanelMorph(546570240)
		submorphs: 	an Array(an AlignmentMorph(382468096))
		fullBounds: 	90@646 corner: 282@687
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (289669120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a TestRunner
		label: 	'Run Selected'
		getStateSelector: 	nil
		actionSelector: 	#runAll
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasRunnable


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(862453760) a PluggableButtonMorph(293076992) a PluggableBu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	6
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(862453760) a PluggableButtonMorph(293076992) a PluggableBu...etc...


--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
RevocablesObjectsReferenceWithPropagationTest>>testOneDontRevoqueTwo
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>run:
TestRunner>>runTest:
[:each | self runTest: each] in TestRunner>>runSuite:
[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(Time millisecondsSince: lastUpdate)
							>= msecs]])
		ifTrue: [bar value: count.
			oldLabel = (newLabel := (labelBlock value: each)
								ifNil: [oldLabel])
				ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
			lastUpdate := Time millisecondClockValue].
	aBlock value: each.
	count := count + 1] in [:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection>>do:
[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection(Collection)>>do:displayingProgress:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>runSuite:
TestRunner>>runAll
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:10:41 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	a FooBar
		handle: 	nil
		factory: 	a FactoryROR
		meta: 	nil
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


RevocablesObjectsReferenceWithPropagationTest>>testOneDontRevoqueTwo
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 
		a: 	an Array(a FactoryROR a FooBar)
		meta: 	a FactoryROR
		target: 	a FooBar
		test: 	nil
		a2: 	nil
		meta2: 	nil
		target2: 	nil
	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
	Receiver: 1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTw...etc...
	Receiver's instance variables: 
		timeStamp: 	2011-04-05T17:10:38+00:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#te...etc...


BlockClosure>>on:do:
	Receiver: [aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[:ex | ex sunitAnnounce: aTestCase toResult: self]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	58
		numArgs: 	0


TestResult>>runCase:
	Receiver: 1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTw...etc...
	Receiver's instance variables: 
		timeStamp: 	2011-04-05T17:10:38+00:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#te...etc...


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>run:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Arguments and temporary variables: 
		aResult: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpect...etc...
	Receiver's instance variables: 
		testSelector: 	#testOneDontRevoqueTwo


TestRunner>>runTest:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTw...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


[:each | self runTest: each] in TestRunner>>runSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testOneDontRevoqueTwo
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(Time millisecondsSince: lastUpdate)
							>= msecs]])
		ifTrue: [bar value: count.
			oldLabel = (newLabel := (labelBlock value: each)
								ifNil: [oldLabel])
				ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
			lastUpdate := Time millisecondClockValue].
	aBlock value: each.
	count := count + 1] in [:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(T...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	83
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException: 
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(860356608)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		argString: 	''
		argPoint: 	167@660
		argMinVal: 	0
		argMaxVal: 	60
		argWorkBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					o...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	''
		aPoint: 	167@660
		minVal: 	0
		maxVal: 	60
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
		aPoint: 	167@660
		minVal: 	0
		maxVal: 	60
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
''

OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


OrderedCollection(Collection)>>do:displayingProgress:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | self runTest: each]
		aStringOrBlock: 	'Running 60 Tests'
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | self runTest: each]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | self runTest: each]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


TestRunner>>runSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


TestRunner>>runAll
	Receiver: a TestRunner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476240
		result: 	1 run, 1 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(862453760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	90@646 corner: 282@687
		owner: 	a PluggableThemedOverflowPanelMorph(546570240)
		submorphs: 	an Array(an AlignmentMorph(382468096))
		fullBounds: 	90@646 corner: 282@687
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (289669120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a TestRunner
		label: 	'Run Selected'
		getStateSelector: 	nil
		actionSelector: 	#runAll
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasRunnable


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(862453760)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(862453760)
		m: 	[167@660 mouseUp 830848 nil]
	Receiver's instance variables: 
		bounds: 	90@646 corner: 282@687
		owner: 	a PluggableThemedOverflowPanelMorph(546570240)
		submorphs: 	an Array(an AlignmentMorph(382468096))
		fullBounds: 	90@646 corner: 282@687
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (289669120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a TestRunner
		label: 	'Run Selected'
		getStateSelector: 	nil
		actionSelector: 	#runAll
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasRunnable


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(862453760) a PluggableButtonMorph(293076992) a PluggableBu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	6
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(862453760) a PluggableButtonMorph(293076992) a PluggableBu...etc...


--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
RevocablesObjectsReferenceWithPropagationTest>>testOneDontRevoqueTwo
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>run:
TestRunner>>runTest:
[:each | self runTest: each] in TestRunner>>runSuite:
[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(Time millisecondsSince: lastUpdate)
							>= msecs]])
		ifTrue: [bar value: count.
			oldLabel = (newLabel := (labelBlock value: each)
								ifNil: [oldLabel])
				ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
			lastUpdate := Time millisecondClockValue].
	aBlock value: each.
	count := count + 1] in [:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection>>do:
[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection(Collection)>>do:displayingProgress:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>runSuite:
TestRunner>>runAll
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:10:42 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	an Object
		handle: 	nil
		factory: 	a FactoryROR
		meta: 	nil
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		a: 	nil
		meta: 	nil
		target: 	nil
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
	Receiver: 2 run, 2 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Receiver's instance variables: 
		timeStamp: 	2011-04-05T17:10:38+00:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#te...etc...


BlockClosure>>on:do:
	Receiver: [aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[:ex | ex sunitAnnounce: aTestCase toResult: self]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	58
		numArgs: 	0


TestResult>>runCase:
	Receiver: 2 run, 2 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Receiver's instance variables: 
		timeStamp: 	2011-04-05T17:10:38+00:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#te...etc...


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>run:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aResult: 	2 run, 2 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpect...etc...
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


TestRunner>>runTest:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476242
		result: 	2 run, 2 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


[:each | self runTest: each] in TestRunner>>runSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476242
		result: 	2 run, 2 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(Time millisecondsSince: lastUpdate)
							>= msecs]])
		ifTrue: [bar value: count.
			oldLabel = (newLabel := (labelBlock value: each)
								ifNil: [oldLabel])
				ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
			lastUpdate := Time millisecondClockValue].
	aBlock value: each.
	count := count + 1] in [:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(T...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	83
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	77
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException: 
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException: 
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(860356608)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException: 
	Arguments and temporary variables: 
		argString: 	''
		argPoint: 	167@660
		argMinVal: 	0
		argMaxVal: 	60
		argWorkBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					o...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
		maxVal: 	60
		minVal: 	0
		aPoint: 	167@660
		progressTitle: 	''


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	''
		aPoint: 	167@660
		minVal: 	0
		maxVal: 	60
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	150
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>displayProgressAt:from:to:during:
	Receiver: ''
	Arguments and temporary variables: 
		aPoint: 	167@660
		minVal: 	0
		maxVal: 	60
		workBlock: 	[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: ...etc...
	Receiver's instance variables: 
''

OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


OrderedCollection(Collection)>>do:displayingProgress:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess Revoc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | self runTest: each]
		aStringOrBlock: 	'Running 60 Tests'
	Receiver's instance variables: 
		array: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testGrantAccess...etc...
		firstIndex: 	1
		lastIndex: 	60


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | self runTest: each]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476242
		result: 	2 run, 2 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | self runTest: each]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476242
		result: 	2 run, 2 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


TestRunner>>runSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476242
		result: 	2 run, 2 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


TestRunner>>runAll
	Receiver: a TestRunner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476242
		result: 	2 run, 2 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...
		previousRun: 	nil


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(862453760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	90@646 corner: 282@687
		owner: 	a PluggableThemedOverflowPanelMorph(546570240)
		submorphs: 	an Array(an AlignmentMorph(382468096))
		fullBounds: 	90@646 corner: 282@687
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (289669120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a TestRunner
		label: 	'Run Selected'
		getStateSelector: 	nil
		actionSelector: 	#runAll
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasRunnable


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(862453760)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(862453760)
		m: 	[167@660 mouseUp 830848 nil]
	Receiver's instance variables: 
		bounds: 	90@646 corner: 282@687
		owner: 	a PluggableThemedOverflowPanelMorph(546570240)
		submorphs: 	an Array(an AlignmentMorph(382468096))
		fullBounds: 	90@646 corner: 282@687
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (289669120) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a TestRunner
		label: 	'Run Selected'
		getStateSelector: 	nil
		actionSelector: 	#runAll
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasRunnable


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(862453760) a PluggableButtonMorph(293076992) a PluggableBu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	6
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(862453760) a PluggableButtonMorph(293076992) a PluggableBu...etc...


--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>run:
TestRunner>>runTest:
[:each | self runTest: each] in TestRunner>>runSuite:
[:each | 
| newLabel |
(count = 0
			or: [count + 1 = size
					or: [(Time millisecondsSince: lastUpdate)
							>= msecs]])
		ifTrue: [bar value: count.
			oldLabel = (newLabel := (labelBlock value: each)
								ifNil: [oldLabel])
				ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
			lastUpdate := Time millisecondClockValue].
	aBlock value: each.
	count := count + 1] in [:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection>>do:
[:bar | self
		do: [:each | 
			| newLabel |
			(count = 0
					or: [count + 1 = size
							or: [(Time millisecondsSince: lastUpdate)
									>= msecs]])
				ifTrue: [bar value: count.
					oldLabel = (newLabel := (labelBlock value: each)
										ifNil: [oldLabel])
						ifFalse: [ProgressNotification signal: '' extra: (oldLabel := newLabel)].
					lastUpdate := Time millisecondClockValue].
			aBlock value: each.
			count := count + 1]] in OrderedCollection(Collection)>>do:displayingProgress:every:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection(Collection)>>do:displayingProgress:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>runSuite:
TestRunner>>runAll
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
5 April 2011 5:10:56 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		aBlock: 	[(Message selector: each selector arguments: (1 to: each numArgs) asArr...etc...
		anExceptionalEvent: 	AccessRevoqued
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


[:each | self
		should: [(Message selector: each selector arguments: (1 to: each numArgs) asArray)
				sendTo: target]
		raise: AccessRevoqued] in RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllAccessToAObjectSmalltalk
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		target: 	(SmalltalkImage>>#vmVersion "a CompiledMethod(605290496)")
		each: 	Smalltalk
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


MethodDictionary>>valuesDo:
	Receiver: a MethodDictionary(size 253)
	Arguments and temporary variables: 
		aBlock: 	[:each | self
		should: [(Message selector: each selector arguments: (1...etc...
		value: 	(SmalltalkImage>>#vmVersion "a CompiledMethod(605290496)")
		i: 	9
		iLimiT: 	512
	Receiver's instance variables: 
		tally: 	253
		array: 	{nil. nil. nil. nil. nil. nil. nil. nil. ((CompiledMethod newMethod: 8 h...etc...


MethodDictionary>>do:
	Receiver: a MethodDictionary(size 253)
	Arguments and temporary variables: 
		aBlock: 	[:each | self
		should: [(Message selector: each selector arguments: (1...etc...
	Receiver's instance variables: 
		tally: 	253
		array: 	{nil. nil. nil. nil. nil. nil. nil. nil. ((CompiledMethod newMethod: 8 h...etc...


RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllAccessToAObjectSmalltalk
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		selectors: 	nil
		a: 	an Array(a FactoryROR Smalltalk)
		meta: 	a FactoryROR
		target: 	Smalltalk
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAOb...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessT...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil RevocablesObjectsReferenceWithPropagationTest>>#testRev...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccess...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	3
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	nil
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(30146560)
	Arguments and temporary variables: 
		anInteger: 	3
	Receiver's instance variables: 
		bounds: 	621@139 corner: 1188@406
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a ScrollBar(630980608) a TransformMorph(321388544))
		fullBounds: 	621@139 corner: 1188@406
		color: 	Color white
		extension: 	a MorphExtension (607911936) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(846462976)
		scroller: 	a TransformMorph(321388544)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(630980608)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(261357568)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(30146560)
	Arguments and temporary variables: 
		event: 	[779@270 mouseUp 848480 nil]
		row: 	3
		mdr: 	3
	Receiver's instance variables: 
		bounds: 	621@139 corner: 1188@406
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a ScrollBar(630980608) a TransformMorph(321388544))
		fullBounds: 	621@139 corner: 1188@406
		color: 	Color white
		extension: 	a MorphExtension (607911936) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(846462976)
		scroller: 	a TransformMorph(321388544)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(630980608)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(261357568)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(30146560)
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
	Receiver's instance variables: 
		bounds: 	621@139 corner: 1188@406
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a ScrollBar(630980608) a TransformMorph(321388544))
		fullBounds: 	621@139 corner: 1188@406
		color: 	Color white
		extension: 	a MorphExtension (607911936) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(846462976)
		scroller: 	a TransformMorph(321388544)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(630980608)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(261357568)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [779@270 mouseUp 848480 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(30146560)
	Receiver's instance variables: 
		timeStamp: 	848480
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	779@270
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(30146560)
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
	Receiver's instance variables: 
		bounds: 	621@139 corner: 1188@406
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a ScrollBar(630980608) a TransformMorph(321388544))
		fullBounds: 	621@139 corner: 1188@406
		color: 	Color white
		extension: 	a MorphExtension (607911936) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(846462976)
		scroller: 	a TransformMorph(321388544)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(630980608)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(261357568)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
		aMorph: 	a PluggableListMorph(30146560)
		localEvt: 	[779@270 mouseUp 848480 nil]
		index: 	2
		child: 	a TransformMorph(321388544)
		morphs: 	an Array(a TransformMorph(321388544))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
		aMorph: 	a PluggableListMorph(30146560)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(30146560)
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	621@139 corner: 1188@406
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a ScrollBar(630980608) a TransformMorph(321388544))
		fullBounds: 	621@139 corner: 1188@406
		color: 	Color white
		extension: 	a MorphExtension (607911936) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(846462976)
		scroller: 	a TransformMorph(321388544)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(630980608)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(261357568)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(30146560)
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
	Receiver's instance variables: 
		bounds: 	621@139 corner: 1188@406
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a ScrollBar(630980608) a TransformMorph(321388544))
		fullBounds: 	621@139 corner: 1188@406
		color: 	Color white
		extension: 	a MorphExtension (607911936) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(846462976)
		scroller: 	a TransformMorph(321388544)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(630980608)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(261357568)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(30146560)
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
	Receiver's instance variables: 
		bounds: 	621@139 corner: 1188@406
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a ScrollBar(630980608) a TransformMorph(321388544))
		fullBounds: 	621@139 corner: 1188@406
		color: 	Color white
		extension: 	a MorphExtension (607911936) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(846462976)
		scroller: 	a TransformMorph(321388544)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(630980608)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(261357568)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
		focusHolder: 	a PluggableListMorph(30146560)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	779@270 corner: 795@286
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	779@270 corner: 795@286
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(810024960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[779@270 mouseUp 848480 nil]
		targetOffset: 	158@131
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 848480 779 270 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(113508352) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[779@270 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(113508352) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
		focusHolder: 	a PluggableListMorph(30146560)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	779@270 corner: 795@286
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	779@270 corner: 795@286
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(810024960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[779@270 mouseUp 848480 nil]
		targetOffset: 	158@131
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 848480 779 270 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
		focusHolder: 	a PluggableListMorph(30146560)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	779@270 corner: 795@286
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	779@270 corner: 795@286
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(810024960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[779@270 mouseUp 848480 nil]
		targetOffset: 	158@131
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 848480 779 270 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[779@270 mouseUp 848480 nil]
	Receiver's instance variables: 
		bounds: 	779@270 corner: 795@286
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	779@270 corner: 795@286
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(810024960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[779@270 mouseUp 848480 nil]
		targetOffset: 	158@131
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 848480 779 270 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil



--- The full stack ---
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
[:each | self
		should: [(Message selector: each selector arguments: (1 to: each numArgs) asArray)
				sendTo: target]
		raise: AccessRevoqued] in RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllAccessToAObjectSmalltalk
MethodDictionary>>valuesDo:
MethodDictionary>>do:
RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllAccessToAObjectSmalltalk
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "initializeFor:" is nil
5 April 2011 5:11:15 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #initializeFor:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	initializeFor: an Object
		exception: 	MessageNotUnderstood: receiver of "initializeFor:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

FactoryROR>>for:
	Receiver: a FactoryROR
	Arguments and temporary variables: 
		anObject: 	an Object
		handle: 	nil
	Receiver's instance variables: 
		handleClass: 	nil


RevocableObjectReferenceWithPropagation class(RevocableObjectReferencePropagation class)>>propagateTo:
	Receiver: RevocableObjectReferenceWithPropagation
	Arguments and temporary variables: 
		aObject: 	an Object
	Receiver's instance variables: 
		superclass: 	RevocableObjectReferencePropagation
		methodDict: 	a MethodDictionary()
		format: 	138
		instanceVariables: 	nil
		organization: 	nil
		subclasses: 	nil
		name: 	'RevocableObjectReferenceWithPropagation'
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	nil
		traitComposition: 	nil
		localSelectors: 	nil
		factory: 	a FactoryROR


RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllObjectGraph
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 
		a: 	an Array(a FactoryROR a FooBar)
		meta: 	a FactoryROR
		target: 	a FooBar
		test: 	nil
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectG...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil RevocablesObjectsReferenceWithPropagationTest>>#testRev...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObject...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security' #'Handles-Tests-Kernel')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(RevocablesObjectsReferenceWithPropagationTest HandleBeha...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479476254
		result: 	60 run, 56 passes, 0 expected failures, 3 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(392167424)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	621@410 corner: 1188@656
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a TransformMorph(864026624))
		fullBounds: 	621@410 corner: 1188@656
		color: 	Color white
		extension: 	a MorphExtension (651427840) [locked]  [externalName = Error List ] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(401080320)
		scroller: 	a TransformMorph(864026624)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(955252736)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172752896)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(392167424)
	Arguments and temporary variables: 
		event: 	[752@451 mouseUp 868221 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	621@410 corner: 1188@656
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a TransformMorph(864026624))
		fullBounds: 	621@410 corner: 1188@656
		color: 	Color white
		extension: 	a MorphExtension (651427840) [locked]  [externalName = Error List ] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(401080320)
		scroller: 	a TransformMorph(864026624)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(955252736)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172752896)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(392167424)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
	Receiver's instance variables: 
		bounds: 	621@410 corner: 1188@656
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a TransformMorph(864026624))
		fullBounds: 	621@410 corner: 1188@656
		color: 	Color white
		extension: 	a MorphExtension (651427840) [locked]  [externalName = Error List ] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(401080320)
		scroller: 	a TransformMorph(864026624)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(955252736)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172752896)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [752@451 mouseUp 868221 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(392167424)
	Receiver's instance variables: 
		timeStamp: 	868221
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	752@451
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(392167424)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
	Receiver's instance variables: 
		bounds: 	621@410 corner: 1188@656
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a TransformMorph(864026624))
		fullBounds: 	621@410 corner: 1188@656
		color: 	Color white
		extension: 	a MorphExtension (651427840) [locked]  [externalName = Error List ] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(401080320)
		scroller: 	a TransformMorph(864026624)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(955252736)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172752896)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
		aMorph: 	a PluggableListMorph(392167424)
		localEvt: 	[752@451 mouseUp 868221 nil]
		index: 	2
		child: 	a TransformMorph(864026624)
		morphs: 	an Array(a TransformMorph(864026624))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
		aMorph: 	a PluggableListMorph(392167424)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(392167424)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	621@410 corner: 1188@656
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a TransformMorph(864026624))
		fullBounds: 	621@410 corner: 1188@656
		color: 	Color white
		extension: 	a MorphExtension (651427840) [locked]  [externalName = Error List ] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(401080320)
		scroller: 	a TransformMorph(864026624)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(955252736)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172752896)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(392167424)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
	Receiver's instance variables: 
		bounds: 	621@410 corner: 1188@656
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a TransformMorph(864026624))
		fullBounds: 	621@410 corner: 1188@656
		color: 	Color white
		extension: 	a MorphExtension (651427840) [locked]  [externalName = Error List ] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(401080320)
		scroller: 	a TransformMorph(864026624)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(955252736)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172752896)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(392167424)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
	Receiver's instance variables: 
		bounds: 	621@410 corner: 1188@656
		owner: 	a PluggableStandardWindow(593494016)
		submorphs: 	an Array(a TransformMorph(864026624))
		fullBounds: 	621@410 corner: 1188@656
		color: 	Color white
		extension: 	a MorphExtension (651427840) [locked]  [externalName = Error List ] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(401080320)
		scroller: 	a TransformMorph(864026624)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(955252736)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(172752896)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
		focusHolder: 	a PluggableListMorph(392167424)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	752@451 corner: 768@467
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	752@451 corner: 768@467
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1001652224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[752@451 mouseUp 868221 nil]
		targetOffset: 	131@41
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 868221 752 451 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1015283712) a Pl...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[752@451 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1015283712) a Pl...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
		focusHolder: 	a PluggableListMorph(392167424)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	752@451 corner: 768@467
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	752@451 corner: 768@467
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1001652224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[752@451 mouseUp 868221 nil]
		targetOffset: 	131@41
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 868221 752 451 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
		focusHolder: 	a PluggableListMorph(392167424)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	752@451 corner: 768@467
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	752@451 corner: 768@467
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1001652224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[752@451 mouseUp 868221 nil]
		targetOffset: 	131@41
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 868221 752 451 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
	Receiver's instance variables: 
		bounds: 	752@451 corner: 768@467
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	752@451 corner: 768@467
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1001652224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[752@451 mouseUp 868221 nil]
		targetOffset: 	131@41
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 868221 752 451 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[752@451 mouseUp 868221 nil]
		evt: 	[752@451 mouseUp 868221 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	752@451 corner: 768@467
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	752@451 corner: 768@467
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1001652224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[752@451 mouseUp 868221 nil]
		targetOffset: 	131@41
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 868221 752 451 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[752@451 mouseUp 868221 nil]
		evtBuf: 	#(1 868221 752 451 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	752@451 corner: 768@467
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	752@451 corner: 768@467
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1001652224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[752@451 mouseUp 868221 nil]
		targetOffset: 	131@41
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 868221 752 451 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	868206
		lastStepMessage: 	nil
		lastCycleTime: 	868246
		alarms: 	a Heap()
		lastAlarmTime: 	868206
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #initializeFor:
FactoryROR>>for:
RevocableObjectReferenceWithPropagation class(RevocableObjectReferencePropagation class)>>propagateTo:
RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllObjectGraph
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:12:41 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	an Object
		handle: 	nil
		factory: 	a FactoryROR
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ FactoryROR for: Object new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(908853248)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 954981) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'FactoryROR for: (Object new)'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 954981) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 954981) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 954981) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 954981) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(635961344)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 954981) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 954981) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(317194240)
	Receiver's instance variables: 
		timeStamp: 	954373
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	181@145
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 954981) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 954981) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(317194240)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	248@652 corner: 264@668
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	248@652 corner: 264@668
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049362432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[247@653 248@652 mouseMove CMD 954343 nil]
		targetOffset: 	180@149
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 954343 248 652 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(786169856) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(786169856) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	248@652 corner: 264@668
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	248@652 corner: 264@668
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049362432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[247@653 248@652 mouseMove CMD 954343 nil]
		targetOffset: 	180@149
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 954343 248 652 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	248@652 corner: 264@668
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	248@652 corner: 264@668
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049362432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[247@653 248@652 mouseMove CMD 954343 nil]
		targetOffset: 	180@149
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 954343 248 652 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	248@652 corner: 264@668
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	248@652 corner: 264@668
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049362432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[247@653 248@652 mouseMove CMD 954343 nil]
		targetOffset: 	180@149
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 954343 248 652 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	248@652 corner: 264@668
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	248@652 corner: 264@668
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049362432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[247@653 248@652 mouseMove CMD 954343 nil]
		targetOffset: 	180@149
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 954343 248 652 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 954373 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	248@652 corner: 264@668
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	248@652 corner: 264@668
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049362432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[247@653 248@652 mouseMove CMD 954343 nil]
		targetOffset: 	180@149
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 954343 248 652 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(406847488))(an Ove...etc...
		lastStepTime: 	954371
		lastStepMessage: 	nil
		lastCycleTime: 	954410
		alarms: 	a Heap()
		lastAlarmTime: 	954371
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(406847488))(an Ove...etc...
		lastStepTime: 	954371
		lastStepMessage: 	nil
		lastCycleTime: 	954410
		alarms: 	a Heap()
		lastAlarmTime: 	954371
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(406847488))(an Ove...etc...
		lastStepTime: 	954371
		lastStepMessage: 	nil
		lastCycleTime: 	954410
		alarms: 	a Heap()
		lastAlarmTime: 	954371
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(406847488))(an Ove...etc...
		lastStepTime: 	954371
		lastStepMessage: 	nil
		lastCycleTime: 	954410
		alarms: 	a Heap()
		lastAlarmTime: 	954371
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(786169856) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:14:04 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	an Object
		handle: 	nil
		factory: 	a FactoryROR
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ FactoryROR for: Object new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(834142208)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1037809) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'FactoryROR for: (Object new)'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1037809) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1037809) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1037809) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1037809) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(635961344)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1037809) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1037809) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(317194240)
	Receiver's instance variables: 
		timeStamp: 	1037212
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	60@7
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1037809) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1037809) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	127@514 corner: 143@530
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	127@514 corner: 143@530
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143130624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[125@520 127@514 mouseMove CMD 1036619 nil]
		targetOffset: 	41@52
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1036619 127 514 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(990117888) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(990117888) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	127@514 corner: 143@530
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	127@514 corner: 143@530
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143130624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[125@520 127@514 mouseMove CMD 1036619 nil]
		targetOffset: 	41@52
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1036619 127 514 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	127@514 corner: 143@530
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	127@514 corner: 143@530
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143130624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[125@520 127@514 mouseMove CMD 1036619 nil]
		targetOffset: 	41@52
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1036619 127 514 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	127@514 corner: 143@530
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	127@514 corner: 143@530
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143130624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[125@520 127@514 mouseMove CMD 1036619 nil]
		targetOffset: 	41@52
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1036619 127 514 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	127@514 corner: 143@530
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	127@514 corner: 143@530
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143130624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[125@520 127@514 mouseMove CMD 1036619 nil]
		targetOffset: 	41@52
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1036619 127 514 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 1037212 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	127@514 corner: 143@530
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	127@514 corner: 143@530
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143130624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[125@520 127@514 mouseMove CMD 1036619 nil]
		targetOffset: 	41@52
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1036619 127 514 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	1037198
		lastStepMessage: 	nil
		lastCycleTime: 	1037238
		alarms: 	a Heap()
		lastAlarmTime: 	1037198
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	1037198
		lastStepMessage: 	nil
		lastCycleTime: 	1037238
		alarms: 	a Heap()
		lastAlarmTime: 	1037198
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	1037198
		lastStepMessage: 	nil
		lastCycleTime: 	1037238
		alarms: 	a Heap()
		lastAlarmTime: 	1037198
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	1037198
		lastStepMessage: 	nil
		lastCycleTime: 	1037238
		alarms: 	a Heap()
		lastAlarmTime: 	1037198
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(990117888) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:14:18 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	an Object
		handle: 	nil
		factory: 	a FactoryROR
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ FactoryROR for: Object new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(463470592)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1052021) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'FactoryROR for: (Object new)'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1052021) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1052021) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1052021) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1052021) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(635961344)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1052021) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1052021) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(317194240)
	Receiver's instance variables: 
		timeStamp: 	1051376
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	163@102
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1052021) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1052021) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(317194240)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	230@609 corner: 246@625
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	230@609 corner: 246@625
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(903872512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[230@609 230@609 mouseMove CMD 1050864 nil]
		targetOffset: 	167@103
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1050864 230 609 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(792985600) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(792985600) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	230@609 corner: 246@625
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	230@609 corner: 246@625
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(903872512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[230@609 230@609 mouseMove CMD 1050864 nil]
		targetOffset: 	167@103
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1050864 230 609 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	230@609 corner: 246@625
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	230@609 corner: 246@625
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(903872512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[230@609 230@609 mouseMove CMD 1050864 nil]
		targetOffset: 	167@103
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1050864 230 609 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	230@609 corner: 246@625
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	230@609 corner: 246@625
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(903872512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[230@609 230@609 mouseMove CMD 1050864 nil]
		targetOffset: 	167@103
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1050864 230 609 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	230@609 corner: 246@625
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	230@609 corner: 246@625
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(903872512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[230@609 230@609 mouseMove CMD 1050864 nil]
		targetOffset: 	167@103
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1050864 230 609 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 1051376 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	230@609 corner: 246@625
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	230@609 corner: 246@625
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(903872512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[230@609 230@609 mouseMove CMD 1050864 nil]
		targetOffset: 	167@103
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1050864 230 609 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(406847488))(an Ove...etc...
		lastStepTime: 	1051376
		lastStepMessage: 	nil
		lastCycleTime: 	1051452
		alarms: 	a Heap()
		lastAlarmTime: 	1051376
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(406847488))(an Ove...etc...
		lastStepTime: 	1051376
		lastStepMessage: 	nil
		lastCycleTime: 	1051452
		alarms: 	a Heap()
		lastAlarmTime: 	1051376
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(406847488))(an Ove...etc...
		lastStepTime: 	1051376
		lastStepMessage: 	nil
		lastCycleTime: 	1051452
		alarms: 	a Heap()
		lastAlarmTime: 	1051376
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(406847488))(an Ove...etc...
		lastStepTime: 	1051376
		lastStepMessage: 	nil
		lastCycleTime: 	1051452
		alarms: 	a Heap()
		lastAlarmTime: 	1051376
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(792985600) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:14:32 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	an Object
		handle: 	nil
		factory: 	a FactoryROR
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ FactoryROR for: Object new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(944504832)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1065593) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'FactoryROR for: (Object new)'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1065593) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1065593) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1065593) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1065593) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(635961344)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1065593) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1065593) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(317194240)
	Receiver's instance variables: 
		timeStamp: 	1064987
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	189@64
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1065593) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1065593) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	256@571 corner: 272@587
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	256@571 corner: 272@587
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84410368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[255@572 256@571 mouseMove CMD 1064300 nil]
		targetOffset: 	187@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1064300 256 571 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(381157376) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(381157376) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	256@571 corner: 272@587
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	256@571 corner: 272@587
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84410368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[255@572 256@571 mouseMove CMD 1064300 nil]
		targetOffset: 	187@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1064300 256 571 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	256@571 corner: 272@587
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	256@571 corner: 272@587
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84410368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[255@572 256@571 mouseMove CMD 1064300 nil]
		targetOffset: 	187@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1064300 256 571 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	256@571 corner: 272@587
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	256@571 corner: 272@587
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84410368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[255@572 256@571 mouseMove CMD 1064300 nil]
		targetOffset: 	187@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1064300 256 571 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	256@571 corner: 272@587
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	256@571 corner: 272@587
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84410368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[255@572 256@571 mouseMove CMD 1064300 nil]
		targetOffset: 	187@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1064300 256 571 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 1064987 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	256@571 corner: 272@587
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	256@571 corner: 272@587
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84410368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[255@572 256@571 mouseMove CMD 1064300 nil]
		targetOffset: 	187@70
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1064300 256 571 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1041235968))(an Ov...etc...
		lastStepTime: 	1064978
		lastStepMessage: 	nil
		lastCycleTime: 	1065019
		alarms: 	a Heap()
		lastAlarmTime: 	1064978
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1041235968))(an Ov...etc...
		lastStepTime: 	1064978
		lastStepMessage: 	nil
		lastCycleTime: 	1065019
		alarms: 	a Heap()
		lastAlarmTime: 	1064978
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1041235968))(an Ov...etc...
		lastStepTime: 	1064978
		lastStepMessage: 	nil
		lastCycleTime: 	1065019
		alarms: 	a Heap()
		lastAlarmTime: 	1064978
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1041235968))(an Ov...etc...
		lastStepTime: 	1064978
		lastStepMessage: 	nil
		lastCycleTime: 	1065019
		alarms: 	a Heap()
		lastAlarmTime: 	1064978
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(381157376) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt: 
5 April 2011 5:14:42 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

FactoryROR class(Object)>>halt
	Receiver: FactoryROR
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


FactoryROR class>>for:
	Receiver: FactoryROR
	Arguments and temporary variables: 
		anObject: 	an Object
		handle: 	nil
		factory: 	a FactoryROR
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#for:->(FactoryROR>>#for: "a CompiledMethod(9437...etc...
		format: 	132
		instanceVariables: 	#('handleClass')
		organization: 	('as yet unclassified' handleClass keeper printString)
('public' ...etc...
		subclasses: 	nil
		name: 	#FactoryROR
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ FactoryROR for: Object new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(411828224)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'FactoryROR for: (Object new)'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>inspectIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>inspectIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
		asciiValue: 	105
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1075767) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'FactoryROR for: (Object new)'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1075767) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1075767) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1075767) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(317194240)
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1075767) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		view: 	a PluggableTextMorph(635961344)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1075767) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1075767) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(317194240)
	Receiver's instance variables: 
		timeStamp: 	1075164
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	174@84
		handler: 	nil
		wasHandled: 	true
		keyValue: 	105
		charCode: 	105
		scanCode: 	34


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1075767) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(290455552)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (492830720) [other:  (blinkStart -> 1075767) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'FactoryROR for: (Object new)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(635961344)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		focusHolder: 	a TextMorphForEditView(317194240)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	241@591 corner: 257@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	241@591 corner: 257@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(994836480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[238@602 241@591 mouseMove CMD 1074192 nil]
		targetOffset: 	174@100
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1074192 241 591 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1060896768) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1060896768) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	241@591 corner: 257@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	241@591 corner: 257@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(994836480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[238@602 241@591 mouseMove CMD 1074192 nil]
		targetOffset: 	174@100
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1074192 241 591 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		focusHolder: 	a TextMorphForEditView(317194240)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	241@591 corner: 257@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	241@591 corner: 257@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(994836480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[238@602 241@591 mouseMove CMD 1074192 nil]
		targetOffset: 	174@100
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1074192 241 591 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	241@591 corner: 257@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	241@591 corner: 257@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(994836480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[238@602 241@591 mouseMove CMD 1074192 nil]
		targetOffset: 	174@100
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1074192 241 591 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		evt: 	[keystroke '<Cmd-i>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	241@591 corner: 257@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	241@591 corner: 257@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(994836480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[238@602 241@591 mouseMove CMD 1074192 nil]
		targetOffset: 	174@100
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1074192 241 591 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
		evtBuf: 	#(2 1075164 105 0 8 105 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	241@591 corner: 257@607
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	241@591 corner: 257@607
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(994836480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[238@602 241@591 mouseMove CMD 1074192 nil]
		targetOffset: 	174@100
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1074192 241 591 0 8 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	1075153
		lastStepMessage: 	nil
		lastCycleTime: 	1075192
		alarms: 	a Heap()
		lastAlarmTime: 	1075153
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	1075153
		lastStepMessage: 	nil
		lastCycleTime: 	1075192
		alarms: 	a Heap()
		lastAlarmTime: 	1075153
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	1075153
		lastStepMessage: 	nil
		lastCycleTime: 	1075192
		alarms: 	a Heap()
		lastAlarmTime: 	1075153
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	1075153
		lastStepMessage: 	nil
		lastCycleTime: 	1075192
		alarms: 	a Heap()
		lastAlarmTime: 	1075153
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1060896768) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
FactoryROR class(Object)>>halt
FactoryROR class>>for:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>inspectIt
SmalltalkEditor>>inspectIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
5 April 2011 5:16:14 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		aBlock: 	[(Message selector: each selector arguments: (1 to: each numArgs) asArr...etc...
		anExceptionalEvent: 	AccessRevoqued
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


[:each | self
		should: [(Message selector: each selector arguments: (1 to: each numArgs) asArray)
				sendTo: target]
		raise: AccessRevoqued] in RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllAccessToAObjectSmalltalk
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		target: 	(SmalltalkImage>>#vmVersion "a CompiledMethod(605290496)")
		each: 	Smalltalk
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


MethodDictionary>>valuesDo:
	Receiver: a MethodDictionary(size 253)
	Arguments and temporary variables: 
		aBlock: 	[:each | self
		should: [(Message selector: each selector arguments: (1...etc...
		value: 	(SmalltalkImage>>#vmVersion "a CompiledMethod(605290496)")
		i: 	9
		iLimiT: 	512
	Receiver's instance variables: 
		tally: 	253
		array: 	{nil. nil. nil. nil. nil. nil. nil. nil. ((CompiledMethod newMethod: 8 h...etc...


MethodDictionary>>do:
	Receiver: a MethodDictionary(size 253)
	Arguments and temporary variables: 
		aBlock: 	[:each | self
		should: [(Message selector: each selector arguments: (1...etc...
	Receiver's instance variables: 
		tally: 	253
		array: 	{nil. nil. nil. nil. nil. nil. nil. nil. ((CompiledMethod newMethod: 8 h...etc...


RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllAccessToAObjectSmalltalk
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 
		selectors: 	nil
		a: 	an Array(a Factory Smalltalk)
		meta: 	a Factory
		target: 	Smalltalk
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAObjectSmalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectSmalltalk


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessToAOb...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccessT...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil RevocablesObjectsReferenceWithPropagationTest>>#testRev...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllAccess...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	3
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllA...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anInteger: 	3
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		event: 	[711@203 mouseUp 1167114 nil]
		row: 	3
		mdr: 	3
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [711@203 mouseUp 1167114 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(66060288)
	Receiver's instance variables: 
		timeStamp: 	1167114
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	711@203
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
		aMorph: 	a PluggableListMorph(66060288)
		localEvt: 	[711@203 mouseUp 1167114 nil]
		index: 	3
		child: 	a TransformMorph(1001390080)
		morphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
		aMorph: 	a PluggableListMorph(66060288)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
		focusHolder: 	a PluggableListMorph(66060288)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	711@203 corner: 727@219
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	711@203 corner: 727@219
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1021313024)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[711@203 mouseUp 1167114 nil]
		targetOffset: 	43@75
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1167114 711 203 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(155975680) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[711@203 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(155975680) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
		focusHolder: 	a PluggableListMorph(66060288)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	711@203 corner: 727@219
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	711@203 corner: 727@219
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1021313024)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[711@203 mouseUp 1167114 nil]
		targetOffset: 	43@75
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1167114 711 203 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
		focusHolder: 	a PluggableListMorph(66060288)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	711@203 corner: 727@219
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	711@203 corner: 727@219
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1021313024)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[711@203 mouseUp 1167114 nil]
		targetOffset: 	43@75
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1167114 711 203 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[711@203 mouseUp 1167114 nil]
	Receiver's instance variables: 
		bounds: 	711@203 corner: 727@219
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	711@203 corner: 727@219
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1021313024)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[711@203 mouseUp 1167114 nil]
		targetOffset: 	43@75
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1167114 711 203 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil



--- The full stack ---
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
[:each | self
		should: [(Message selector: each selector arguments: (1 to: each numArgs) asArray)
				sendTo: target]
		raise: AccessRevoqued] in RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllAccessToAObjectSmalltalk
MethodDictionary>>valuesDo:
MethodDictionary>>do:
RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllAccessToAObjectSmalltalk
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
5 April 2011 5:16:27 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 
		aBlock: 	[target printString]
		anExceptionalEvent: 	AccessRevoqued
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccessThenReenable
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 
		a: 	an Array(a Factory an Object)
		meta: 	a Factory
		target: 	an Object
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThenReen...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThen...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil RevocablesObjectsReferenceWithPropagationTest>>#testRev...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccessThe...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	2
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqu...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479476573
		result: 	39 run, 36 passes, 0 expected failures, 3 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anInteger: 	2
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		event: 	[785@147 mouseUp 1180132 nil]
		row: 	2
		mdr: 	2
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [785@147 mouseUp 1180132 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(66060288)
	Receiver's instance variables: 
		timeStamp: 	1180132
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	785@147
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
		aMorph: 	a PluggableListMorph(66060288)
		localEvt: 	[785@147 mouseUp 1180132 nil]
		index: 	3
		child: 	a TransformMorph(1001390080)
		morphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
		aMorph: 	a PluggableListMorph(66060288)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(66060288)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
	Receiver's instance variables: 
		bounds: 	668@128 corner: 979@321
		owner: 	a PluggableStandardWindow(370933760)
		submorphs: 	an Array(a ScrollBar(502005760) a TransformMorph(1001390080))
		fullBounds: 	668@128 corner: 979@321
		color: 	Color white
		extension: 	a MorphExtension (982253568) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(354156544)
		scroller: 	a TransformMorph(1001390080)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(502005760)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess' 'Re...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(893124608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
		focusHolder: 	a PluggableListMorph(66060288)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	785@147 corner: 801@163
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	785@147 corner: 801@163
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(120586240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[785@147 mouseUp 1180132 nil]
		targetOffset: 	117@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1180132 785 147 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(716439552) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[785@147 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(716439552) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
		focusHolder: 	a PluggableListMorph(66060288)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	785@147 corner: 801@163
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	785@147 corner: 801@163
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(120586240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[785@147 mouseUp 1180132 nil]
		targetOffset: 	117@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1180132 785 147 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
		focusHolder: 	a PluggableListMorph(66060288)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	785@147 corner: 801@163
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	785@147 corner: 801@163
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(120586240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[785@147 mouseUp 1180132 nil]
		targetOffset: 	117@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1180132 785 147 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
	Receiver's instance variables: 
		bounds: 	785@147 corner: 801@163
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	785@147 corner: 801@163
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(120586240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[785@147 mouseUp 1180132 nil]
		targetOffset: 	117@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1180132 785 147 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[785@147 mouseUp 1180132 nil]
		evt: 	[785@147 mouseUp 1180132 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	785@147 corner: 801@163
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	785@147 corner: 801@163
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(120586240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[785@147 mouseUp 1180132 nil]
		targetOffset: 	117@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1180132 785 147 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[785@147 mouseUp 1180132 nil]
		evtBuf: 	#(1 1180132 785 147 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	785@147 corner: 801@163
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	785@147 corner: 801@163
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(120586240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[785@147 mouseUp 1180132 nil]
		targetOffset: 	117@19
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1180132 785 147 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	1180127
		lastStepMessage: 	nil
		lastCycleTime: 	1180167
		alarms: 	a Heap()
		lastAlarmTime: 	1180127
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccessThenReenable
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RevocableControler>>revoke
5 April 2011 5:21:10 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

RevocableObjectReference(Object)>>doesNotUnderstand: #revoke
	Receiver: a RevocableObjectReference
	Arguments and temporary variables: 
		aMessage: 	revoke
		exception: 	MessageNotUnderstood: RevocableControler>>revoke
		resumeValue: 	nil
	Receiver's instance variables: 
		receiver: 	a Morph(866910208)
		classLookup: 	RevoqueClass
		state: 	{(0@0 corner: 50@40). nil. #(). nil. (Color r: 0.0 g: 0.0 b: 1.0). nil}
		configuration: 	4


RevocablesObjectsReferenceTest>>testRevoqueAllAccessToAObject:
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph
	Arguments and temporary variables: 
		aClass: 	Morph
		selectors: 	nil
		a: 	an Array(a RevocableObjectReference a Morph(866910208))
		meta: 	a RevocableObjectReference
		target: 	a Morph(866910208)
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectMorph


RevocablesObjectsReferenceTest>>testRevoqueAllAccessToAObjectMorph
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectMorph


RevocablesObjectsReferenceTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectMorph


[self setUp.
	self performTest] in RevocablesObjectsReferenceTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectMorph


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectMorph


[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectMorph


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceTest(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


RevocablesObjectsReferenceTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllAccessToAObjectMorph


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccess Revocabl...etc...
		errorSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMo...etc...
		lastUpdate: 	3479476861
		result: 	39 run, 26 passes, 0 expected failures, 4 failures, 9 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil RevocablesObjectsReferenceTest>>#testRevoqueAllAccessTo...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccess Revocabl...etc...
		errorSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMo...etc...
		lastUpdate: 	3479476861
		result: 	39 run, 26 passes, 0 expected failures, 4 failures, 9 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccess Revocabl...etc...
		errorSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMo...etc...
		lastUpdate: 	3479476861
		result: 	39 run, 26 passes, 0 expected failures, 4 failures, 9 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccess Revocabl...etc...
		errorSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMo...etc...
		lastUpdate: 	3479476861
		result: 	39 run, 26 passes, 0 expected failures, 4 failures, 9 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMorph
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccess Revocabl...etc...
		errorSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMo...etc...
		lastUpdate: 	3479476861
		result: 	39 run, 26 passes, 0 expected failures, 4 failures, 9 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	3
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccess Revocabl...etc...
		errorSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAllAccessToAObjectMo...etc...
		lastUpdate: 	3479476861
		result: 	39 run, 26 passes, 0 expected failures, 4 failures, 9 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anInteger: 	3
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccess' 'RevocablesObjects...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		event: 	[518@362 mouseUp 1463407 nil]
		row: 	3
		mdr: 	3
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccess' 'RevocablesObjects...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccess' 'RevocablesObjects...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [518@362 mouseUp 1463407 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(710672384)
	Receiver's instance variables: 
		timeStamp: 	1463407
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	518@362
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccess' 'RevocablesObjects...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
		aMorph: 	a PluggableListMorph(710672384)
		localEvt: 	[518@362 mouseUp 1463407 nil]
		index: 	3
		child: 	a TransformMorph(620494848)
		morphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
		aMorph: 	a PluggableListMorph(710672384)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccess' 'RevocablesObjects...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccess' 'RevocablesObjects...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccess' 'RevocablesObjects...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
		focusHolder: 	a PluggableListMorph(710672384)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	518@362 corner: 534@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	518@362 corner: 534@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591134720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[518@362 mouseUp 1463407 nil]
		targetOffset: 	81@39
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1463407 518 362 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(770703360) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[518@362 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(770703360) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
		focusHolder: 	a PluggableListMorph(710672384)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	518@362 corner: 534@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	518@362 corner: 534@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591134720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[518@362 mouseUp 1463407 nil]
		targetOffset: 	81@39
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1463407 518 362 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
		focusHolder: 	a PluggableListMorph(710672384)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	518@362 corner: 534@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	518@362 corner: 534@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591134720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[518@362 mouseUp 1463407 nil]
		targetOffset: 	81@39
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1463407 518 362 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
	Receiver's instance variables: 
		bounds: 	518@362 corner: 534@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	518@362 corner: 534@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591134720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[518@362 mouseUp 1463407 nil]
		targetOffset: 	81@39
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1463407 518 362 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[518@362 mouseUp 1463407 nil]
		evt: 	[518@362 mouseUp 1463407 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	518@362 corner: 534@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	518@362 corner: 534@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591134720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[518@362 mouseUp 1463407 nil]
		targetOffset: 	81@39
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1463407 518 362 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[518@362 mouseUp 1463407 nil]
		evtBuf: 	#(1 1463407 518 362 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	518@362 corner: 534@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	518@362 corner: 534@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(591134720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[518@362 mouseUp 1463407 nil]
		targetOffset: 	81@39
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1463407 518 362 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	1463404
		lastStepMessage: 	nil
		lastCycleTime: 	1463444
		alarms: 	a Heap()
		lastAlarmTime: 	1463404
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
RevocableObjectReference(Object)>>doesNotUnderstand: #revoke
RevocablesObjectsReferenceTest>>testRevoqueAllAccessToAObject:
RevocablesObjectsReferenceTest>>testRevoqueAllAccessToAObjectMorph
RevocablesObjectsReferenceTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceTest(TestCase)>>debug
BlockClosure>>ensure:
RevocablesObjectsReferenceTest(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Character>>translated
5 April 2011 5:21:13 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

Character(Object)>>doesNotUnderstand: #translated
	Receiver: $F
	Arguments and temporary variables: 
		aMessage: 	translated
		exception: 	MessageNotUnderstood: Character>>translated
		resumeValue: 	nil
	Receiver's instance variables: 
		value: 	70


[:l | l translated] in Debugger>>contextStackMenu:shifted:
	Receiver: a Debugger
	Arguments and temporary variables: 
		l: 	$F
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(402391040) a PluggableListMorph(63...etc...
		contents: 	a Text for 'testRevoqueAllAccessToAObject: aClass

	| selectors a met...etc...
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in MorphicUIManager>>openDebuggerOn:context:label...etc...
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(RevocableObjectReference(Object)>>doesNotUnd...etc...
		contextStackTop: 	RevocableObjectReference(Object)>>doesNotUnderstand: #revoke
		contextStackIndex: 	2
		contextStackList: 	an OrderedCollection('RevocableObjectReference(Object)>>doesN...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		savedCursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2...etc...
		errorWasInUIProcess: 	true
		labelString: 	nil


ByteString(SequenceableCollection)>>collect:
	Receiver: 'FullStack (f)
Restart (r)
Proceed (p)
Step (t)
Step through (T)
Send (e)
Where (w)
Peel t...etc...
	Arguments and temporary variables: 
		aBlock: 	[:l | l translated]
		newCollection: 	'                                                               ...etc...
		index: 	1
		indexLimiT: 	356
	Receiver's instance variables: 
'FullStack (f)
Restart (r)
Proceed (p)
Step (t)
Step through (T)
Send (e)
Where (w)
Peel t...etc...

Debugger>>contextStackMenu:shifted:
	Receiver: a Debugger
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(184549376)
		shifted: 	false
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(402391040) a PluggableListMorph(63...etc...
		contents: 	a Text for 'testRevoqueAllAccessToAObject: aClass

	| selectors a met...etc...
		currentCompiledMethod: 	nil
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in MorphicUIManager>>openDebuggerOn:context:label...etc...
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(RevocableObjectReference(Object)>>doesNotUnd...etc...
		contextStackTop: 	RevocableObjectReference(Object)>>doesNotUnderstand: #revoke
		contextStackIndex: 	2
		contextStackList: 	an OrderedCollection('RevocableObjectReference(Object)>>doesN...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		savedCursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2...etc...
		errorWasInUIProcess: 	true
		labelString: 	nil


PluggableListMorph(ScrollPane)>>getMenu:
	Receiver: a PluggableListMorph(635961344)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(184549376)
		aMenu: 	nil
		aTitle: 	'testRevoqueAllAccessToAOb...
jb 4/5/2011 17:18'
	Receiver's instance variables: 
		bounds: 	138@113 corner: 828@231
		owner: 	a SystemWindow(402391040)
		submorphs: 	an Array(a ScrollBar(779091968) a ScrollBar(444596224) a TransformMo...etc...
		fullBounds: 	138@113 corner: 828@231
		color: 	Color white
		extension: 	a MorphExtension (108789760) [locked]  [other:  (selectionColorToUse...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(444596224)
		scroller: 	a TransformMorph(895746048)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#contextStackMenu:shifted:
		getMenuTitleSelector: 	#messageListSelectorTitle
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(779091968)
		list: 	an OrderedCollection('RevocableObjectReference(Object)>>doesNotUnderstand...etc...
		getListSelector: 	#contextStackList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#contextStackIndex
		setIndexSelector: 	#toggleContextStackIndex:
		keystrokeActionSelector: 	#contextStackKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1027604480)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>getMenu:
	Receiver: a PluggableListMorph(635961344)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		aMenu: 	nil
	Receiver's instance variables: 
		bounds: 	138@113 corner: 828@231
		owner: 	a SystemWindow(402391040)
		submorphs: 	an Array(a ScrollBar(779091968) a ScrollBar(444596224) a TransformMo...etc...
		fullBounds: 	138@113 corner: 828@231
		color: 	Color white
		extension: 	a MorphExtension (108789760) [locked]  [other:  (selectionColorToUse...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(444596224)
		scroller: 	a TransformMorph(895746048)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#contextStackMenu:shifted:
		getMenuTitleSelector: 	#messageListSelectorTitle
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(779091968)
		list: 	an OrderedCollection('RevocableObjectReference(Object)>>doesNotUnderstand...etc...
		getListSelector: 	#contextStackList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#contextStackIndex
		setIndexSelector: 	#toggleContextStackIndex:
		keystrokeActionSelector: 	#contextStackKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1027604480)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(ScrollPane)>>yellowButtonActivity:
	Receiver: a PluggableListMorph(635961344)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	nil
	Receiver's instance variables: 
		bounds: 	138@113 corner: 828@231
		owner: 	a SystemWindow(402391040)
		submorphs: 	an Array(a ScrollBar(779091968) a ScrollBar(444596224) a TransformMo...etc...
		fullBounds: 	138@113 corner: 828@231
		color: 	Color white
		extension: 	a MorphExtension (108789760) [locked]  [other:  (selectionColorToUse...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(444596224)
		scroller: 	a TransformMorph(895746048)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#contextStackMenu:shifted:
		getMenuTitleSelector: 	#messageListSelectorTitle
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(779091968)
		list: 	an OrderedCollection('RevocableObjectReference(Object)>>doesNotUnderstand...etc...
		getListSelector: 	#contextStackList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#contextStackIndex
		setIndexSelector: 	#toggleContextStackIndex:
		keystrokeActionSelector: 	#contextStackKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1027604480)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>specialKeyPressed:
	Receiver: a PluggableListMorph(635961344)
	Arguments and temporary variables: 
		asciiValue: 	27
		oldSelection: 	nil
		nextSelection: 	nil
		max: 	nil
		howManyItemsShowing: 	nil
	Receiver's instance variables: 
		bounds: 	138@113 corner: 828@231
		owner: 	a SystemWindow(402391040)
		submorphs: 	an Array(a ScrollBar(779091968) a ScrollBar(444596224) a TransformMo...etc...
		fullBounds: 	138@113 corner: 828@231
		color: 	Color white
		extension: 	a MorphExtension (108789760) [locked]  [other:  (selectionColorToUse...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(444596224)
		scroller: 	a TransformMorph(895746048)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#contextStackMenu:shifted:
		getMenuTitleSelector: 	#messageListSelectorTitle
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(779091968)
		list: 	an OrderedCollection('RevocableObjectReference(Object)>>doesNotUnderstand...etc...
		getListSelector: 	#contextStackList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#contextStackIndex
		setIndexSelector: 	#toggleContextStackIndex:
		keystrokeActionSelector: 	#contextStackKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1027604480)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(635961344)
	Arguments and temporary variables: 
		event: 	[keystroke '<escape>']
		aChar: 	Character escape
		aSpecialKey: 	27
	Receiver's instance variables: 
		bounds: 	138@113 corner: 828@231
		owner: 	a SystemWindow(402391040)
		submorphs: 	an Array(a ScrollBar(779091968) a ScrollBar(444596224) a TransformMo...etc...
		fullBounds: 	138@113 corner: 828@231
		color: 	Color white
		extension: 	a MorphExtension (108789760) [locked]  [other:  (selectionColorToUse...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(444596224)
		scroller: 	a TransformMorph(895746048)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#contextStackMenu:shifted:
		getMenuTitleSelector: 	#messageListSelectorTitle
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(779091968)
		list: 	an OrderedCollection('RevocableObjectReference(Object)>>doesNotUnderstand...etc...
		getListSelector: 	#contextStackList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#contextStackIndex
		setIndexSelector: 	#toggleContextStackIndex:
		keystrokeActionSelector: 	#contextStackKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1027604480)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(635961344)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		bounds: 	138@113 corner: 828@231
		owner: 	a SystemWindow(402391040)
		submorphs: 	an Array(a ScrollBar(779091968) a ScrollBar(444596224) a TransformMo...etc...
		fullBounds: 	138@113 corner: 828@231
		color: 	Color white
		extension: 	a MorphExtension (108789760) [locked]  [other:  (selectionColorToUse...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(444596224)
		scroller: 	a TransformMorph(895746048)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#contextStackMenu:shifted:
		getMenuTitleSelector: 	#messageListSelectorTitle
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(779091968)
		list: 	an OrderedCollection('RevocableObjectReference(Object)>>doesNotUnderstand...etc...
		getListSelector: 	#contextStackList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#contextStackIndex
		setIndexSelector: 	#toggleContextStackIndex:
		keystrokeActionSelector: 	#contextStackKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1027604480)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<escape>']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(635961344)
	Receiver's instance variables: 
		timeStamp: 	1466044
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	885@379
		handler: 	nil
		wasHandled: 	true
		keyValue: 	27
		charCode: 	27
		scanCode: 	53


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(635961344)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		bounds: 	138@113 corner: 828@231
		owner: 	a SystemWindow(402391040)
		submorphs: 	an Array(a ScrollBar(779091968) a ScrollBar(444596224) a TransformMo...etc...
		fullBounds: 	138@113 corner: 828@231
		color: 	Color white
		extension: 	a MorphExtension (108789760) [locked]  [other:  (selectionColorToUse...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(444596224)
		scroller: 	a TransformMorph(895746048)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#contextStackMenu:shifted:
		getMenuTitleSelector: 	#messageListSelectorTitle
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(779091968)
		list: 	an OrderedCollection('RevocableObjectReference(Object)>>doesNotUnderstand...etc...
		getListSelector: 	#contextStackList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#contextStackIndex
		setIndexSelector: 	#toggleContextStackIndex:
		keystrokeActionSelector: 	#contextStackKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1027604480)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableListMorph(635961344)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		bounds: 	138@113 corner: 828@231
		owner: 	a SystemWindow(402391040)
		submorphs: 	an Array(a ScrollBar(779091968) a ScrollBar(444596224) a TransformMo...etc...
		fullBounds: 	138@113 corner: 828@231
		color: 	Color white
		extension: 	a MorphExtension (108789760) [locked]  [other:  (selectionColorToUse...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(444596224)
		scroller: 	a TransformMorph(895746048)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#contextStackMenu:shifted:
		getMenuTitleSelector: 	#messageListSelectorTitle
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(779091968)
		list: 	an OrderedCollection('RevocableObjectReference(Object)>>doesNotUnderstand...etc...
		getListSelector: 	#contextStackList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#contextStackIndex
		setIndexSelector: 	#toggleContextStackIndex:
		keystrokeActionSelector: 	#contextStackKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1027604480)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(635961344)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		bounds: 	138@113 corner: 828@231
		owner: 	a SystemWindow(402391040)
		submorphs: 	an Array(a ScrollBar(779091968) a ScrollBar(444596224) a TransformMo...etc...
		fullBounds: 	138@113 corner: 828@231
		color: 	Color white
		extension: 	a MorphExtension (108789760) [locked]  [other:  (selectionColorToUse...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a Debugger
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(444596224)
		scroller: 	a TransformMorph(895746048)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#contextStackMenu:shifted:
		getMenuTitleSelector: 	#messageListSelectorTitle
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(779091968)
		list: 	an OrderedCollection('RevocableObjectReference(Object)>>doesNotUnderstand...etc...
		getListSelector: 	#contextStackList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#contextStackIndex
		setIndexSelector: 	#toggleContextStackIndex:
		keystrokeActionSelector: 	#contextStackKey:from:
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(1027604480)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<escape>']
		focusHolder: 	a PluggableListMorph(635961344)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	870@373 corner: 886@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	870@373 corner: 886@389
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546045952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[885@379 870@373 mouseMove 1466064 nil]
		targetOffset: 	308@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1466064 870 373 0 0 0 1)
		lastKeyScanCode: 	53
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(790888448) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(790888448) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<escape>']
		focusHolder: 	a PluggableListMorph(635961344)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	870@373 corner: 886@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	870@373 corner: 886@389
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546045952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[885@379 870@373 mouseMove 1466064 nil]
		targetOffset: 	308@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1466064 870 373 0 0 0 1)
		lastKeyScanCode: 	53
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<escape>']
		focusHolder: 	a PluggableListMorph(635961344)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	870@373 corner: 886@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	870@373 corner: 886@389
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546045952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[885@379 870@373 mouseMove 1466064 nil]
		targetOffset: 	308@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1466064 870 373 0 0 0 1)
		lastKeyScanCode: 	53
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		bounds: 	870@373 corner: 886@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	870@373 corner: 886@389
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546045952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[885@379 870@373 mouseMove 1466064 nil]
		targetOffset: 	308@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1466064 870 373 0 0 0 1)
		lastKeyScanCode: 	53
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<escape>']
		evt: 	[keystroke '<escape>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	870@373 corner: 886@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	870@373 corner: 886@389
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546045952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[885@379 870@373 mouseMove 1466064 nil]
		targetOffset: 	308@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1466064 870 373 0 0 0 1)
		lastKeyScanCode: 	53
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<escape>']
		evtBuf: 	#(2 1466044 27 0 0 27 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	870@373 corner: 886@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	870@373 corner: 886@389
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546045952)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[885@379 870@373 mouseMove 1466064 nil]
		targetOffset: 	308@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1466064 870 373 0 0 0 1)
		lastKeyScanCode: 	53
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	1466044
		lastStepMessage: 	nil
		lastCycleTime: 	1466083
		alarms: 	a Heap()
		lastAlarmTime: 	1466044
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	1466044
		lastStepMessage: 	nil
		lastCycleTime: 	1466083
		alarms: 	a Heap()
		lastAlarmTime: 	1466044
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	1466044
		lastStepMessage: 	nil
		lastCycleTime: 	1466083
		alarms: 	a Heap()
		lastAlarmTime: 	1466044
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(445906944))(an Ove...etc...
		lastStepTime: 	1466044
		lastStepMessage: 	nil
		lastCycleTime: 	1466083
		alarms: 	a Heap()
		lastAlarmTime: 	1466044
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(790888448) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#changeSet->(Project>>#changeSet "a CompiledMeth...etc...
		format: 	144
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'displayD...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	53
		numArgs: 	0



--- The full stack ---
Character(Object)>>doesNotUnderstand: #translated
[:l | l translated] in Debugger>>contextStackMenu:shifted:
ByteString(SequenceableCollection)>>collect:
Debugger>>contextStackMenu:shifted:
PluggableListMorph(ScrollPane)>>getMenu:
PluggableListMorph>>getMenu:
PluggableListMorph(ScrollPane)>>yellowButtonActivity:
PluggableListMorph>>specialKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
PluggableListMorph(Morph)>>handleFocusEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "do:" is nil
5 April 2011 5:25:57 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #do:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	do: [:each | each grant]
		exception: 	MessageNotUnderstood: receiver of "do:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Factory>>grant
	Receiver: a Factory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handleClass: 	RevocableObjectReferenceWithPropagation
		controlers: 	an OrderedCollection(a RevocableObjectReferenceWithPropagation)


RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllObjectGraph
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAllObjectGraph


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGraph...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479477155
		result: 	39 run, 34 passes, 0 expected failures, 4 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectG...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil RevocablesObjectsReferenceWithPropagationTest>>#testRev...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479477155
		result: 	39 run, 34 passes, 0 expected failures, 4 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479477155
		result: 	39 run, 34 passes, 0 expected failures, 4 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479477155
		result: 	39 run, 34 passes, 0 expected failures, 4 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObject...etc...
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479477155
		result: 	39 run, 34 passes, 0 expected failures, 4 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	nil
		errorList: 	an Array(RevocablesObjectsReferenceWithPropagationTest>>#testRevoque...etc...
		errorSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllOb...etc...
		lastUpdate: 	3479477155
		result: 	39 run, 34 passes, 0 expected failures, 4 failures, 1 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		event: 	[663@458 mouseUp 1749803 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [663@458 mouseUp 1749803 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(710672384)
	Receiver's instance variables: 
		timeStamp: 	1749803
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	663@458
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
		aMorph: 	a PluggableListMorph(710672384)
		localEvt: 	[663@458 mouseUp 1749803 nil]
		index: 	2
		child: 	a TransformMorph(620494848)
		morphs: 	an Array(a TransformMorph(620494848))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
		aMorph: 	a PluggableListMorph(710672384)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(710672384)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
	Receiver's instance variables: 
		bounds: 	437@323 corner: 748@495
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(900202496) a TransformMorph(620494848))
		fullBounds: 	437@323 corner: 748@495
		color: 	Color white
		extension: 	a MorphExtension (78643200) [locked]  [externalName = Error List ]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(813957120)
		scroller: 	a TransformMorph(620494848)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(900202496)
		list: 	#('RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAllObjectGr...etc...
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(670826496)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
		focusHolder: 	a PluggableListMorph(710672384)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	663@458 corner: 679@474
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	663@458 corner: 679@474
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989593600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[663@458 mouseUp 1749803 nil]
		targetOffset: 	226@135
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1749803 663 458 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(833093632) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[663@458 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(833093632) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
		focusHolder: 	a PluggableListMorph(710672384)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	663@458 corner: 679@474
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	663@458 corner: 679@474
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989593600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[663@458 mouseUp 1749803 nil]
		targetOffset: 	226@135
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1749803 663 458 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
		focusHolder: 	a PluggableListMorph(710672384)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	663@458 corner: 679@474
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	663@458 corner: 679@474
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989593600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[663@458 mouseUp 1749803 nil]
		targetOffset: 	226@135
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1749803 663 458 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
	Receiver's instance variables: 
		bounds: 	663@458 corner: 679@474
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	663@458 corner: 679@474
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989593600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[663@458 mouseUp 1749803 nil]
		targetOffset: 	226@135
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1749803 663 458 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[663@458 mouseUp 1749803 nil]
		evt: 	[663@458 mouseUp 1749803 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	663@458 corner: 679@474
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	663@458 corner: 679@474
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989593600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[663@458 mouseUp 1749803 nil]
		targetOffset: 	226@135
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1749803 663 458 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[663@458 mouseUp 1749803 nil]
		evtBuf: 	#(1 1749803 663 458 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	663@458 corner: 679@474
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	663@458 corner: 679@474
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(989593600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[663@458 mouseUp 1749803 nil]
		targetOffset: 	226@135
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1749803 663 458 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(406847488))(an Ove...etc...
		lastStepTime: 	1749786
		lastStepMessage: 	nil
		lastCycleTime: 	1749825
		alarms: 	a Heap()
		lastAlarmTime: 	1749786
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #do:
Factory>>grant
RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAllObjectGraph
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
5 April 2011 5:28:14 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		aBlock: 	[target printString]
		anExceptionalEvent: 	AccessRevoqued
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 
		a: 	an Array(a Factory an Object)
		meta: 	a Factory
		target: 	an Object
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccess


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477287
		result: 	39 run, 35 passes, 0 expected failures, 4 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil RevocablesObjectsReferenceWithPropagationTest>>#testRev...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477287
		result: 	39 run, 35 passes, 0 expected failures, 4 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477287
		result: 	39 run, 35 passes, 0 expected failures, 4 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477287
		result: 	39 run, 35 passes, 0 expected failures, 4 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAccess
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477287
		result: 	39 run, 35 passes, 0 expected failures, 4 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	2
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceWithPropagationTest>>#testRevoqueAcce...etc...
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477287
		result: 	39 run, 35 passes, 0 expected failures, 4 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(201588736)
	Arguments and temporary variables: 
		anInteger: 	2
	Receiver's instance variables: 
		bounds: 	437@126 corner: 748@311
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(389283840) a TransformMorph(383254528))
		fullBounds: 	437@126 corner: 748@311
		color: 	Color white
		extension: 	a MorphExtension (619446272) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1048576000)
		scroller: 	a TransformMorph(383254528)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(389283840)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable' 'Revoc...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(872677376)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(201588736)
	Arguments and temporary variables: 
		event: 	[564@143 mouseUp 1886803 nil]
		row: 	2
		mdr: 	2
	Receiver's instance variables: 
		bounds: 	437@126 corner: 748@311
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(389283840) a TransformMorph(383254528))
		fullBounds: 	437@126 corner: 748@311
		color: 	Color white
		extension: 	a MorphExtension (619446272) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1048576000)
		scroller: 	a TransformMorph(383254528)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(389283840)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable' 'Revoc...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(872677376)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(201588736)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
	Receiver's instance variables: 
		bounds: 	437@126 corner: 748@311
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(389283840) a TransformMorph(383254528))
		fullBounds: 	437@126 corner: 748@311
		color: 	Color white
		extension: 	a MorphExtension (619446272) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1048576000)
		scroller: 	a TransformMorph(383254528)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(389283840)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable' 'Revoc...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(872677376)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [564@143 mouseUp 1886803 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(201588736)
	Receiver's instance variables: 
		timeStamp: 	1886803
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	564@143
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(201588736)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
	Receiver's instance variables: 
		bounds: 	437@126 corner: 748@311
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(389283840) a TransformMorph(383254528))
		fullBounds: 	437@126 corner: 748@311
		color: 	Color white
		extension: 	a MorphExtension (619446272) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1048576000)
		scroller: 	a TransformMorph(383254528)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(389283840)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable' 'Revoc...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(872677376)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
		aMorph: 	a PluggableListMorph(201588736)
		localEvt: 	[564@143 mouseUp 1886803 nil]
		index: 	3
		child: 	a TransformMorph(383254528)
		morphs: 	an Array(a ScrollBar(389283840) a TransformMorph(383254528))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
		aMorph: 	a PluggableListMorph(201588736)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(201588736)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	437@126 corner: 748@311
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(389283840) a TransformMorph(383254528))
		fullBounds: 	437@126 corner: 748@311
		color: 	Color white
		extension: 	a MorphExtension (619446272) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1048576000)
		scroller: 	a TransformMorph(383254528)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(389283840)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable' 'Revoc...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(872677376)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(201588736)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
	Receiver's instance variables: 
		bounds: 	437@126 corner: 748@311
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(389283840) a TransformMorph(383254528))
		fullBounds: 	437@126 corner: 748@311
		color: 	Color white
		extension: 	a MorphExtension (619446272) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1048576000)
		scroller: 	a TransformMorph(383254528)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(389283840)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable' 'Revoc...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(872677376)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(201588736)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
	Receiver's instance variables: 
		bounds: 	437@126 corner: 748@311
		owner: 	a PluggableStandardWindow(125566976)
		submorphs: 	an Array(a ScrollBar(389283840) a TransformMorph(383254528))
		fullBounds: 	437@126 corner: 748@311
		color: 	Color white
		extension: 	a MorphExtension (619446272) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1048576000)
		scroller: 	a TransformMorph(383254528)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(389283840)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable' 'Revoc...etc...
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(872677376)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
		focusHolder: 	a PluggableListMorph(201588736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	564@143 corner: 580@159
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	564@143 corner: 580@159
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(830734336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[564@143 mouseUp 1886803 nil]
		targetOffset: 	127@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1886803 564 143 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(361234432) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[564@143 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(361234432) a Plu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
		focusHolder: 	a PluggableListMorph(201588736)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	564@143 corner: 580@159
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	564@143 corner: 580@159
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(830734336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[564@143 mouseUp 1886803 nil]
		targetOffset: 	127@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1886803 564 143 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
		focusHolder: 	a PluggableListMorph(201588736)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	564@143 corner: 580@159
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	564@143 corner: 580@159
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(830734336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[564@143 mouseUp 1886803 nil]
		targetOffset: 	127@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1886803 564 143 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
	Receiver's instance variables: 
		bounds: 	564@143 corner: 580@159
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	564@143 corner: 580@159
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(830734336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[564@143 mouseUp 1886803 nil]
		targetOffset: 	127@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1886803 564 143 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[564@143 mouseUp 1886803 nil]
		evt: 	[564@143 mouseUp 1886803 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	564@143 corner: 580@159
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	564@143 corner: 580@159
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(830734336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[564@143 mouseUp 1886803 nil]
		targetOffset: 	127@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1886803 564 143 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[564@143 mouseUp 1886803 nil]
		evtBuf: 	#(1 1886803 564 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	564@143 corner: 580@159
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	564@143 corner: 580@159
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(830734336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[564@143 mouseUp 1886803 nil]
		targetOffset: 	127@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1886803 564 143 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	1886796
		lastStepMessage: 	nil
		lastCycleTime: 	1886836
		alarms: 	a Heap()
		lastAlarmTime: 	1886796
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>signalFailure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>assert:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>should:raise:
RevocablesObjectsReferenceWithPropagationTest>>testRevoqueAccess
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
BlockClosure>>ensure:
RevocablesObjectsReferenceWithPropagationTest(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
5 April 2011 5:29:48 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

RevocablesObjectsReferenceTest(TestCase)>>signalFailure:
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


RevocablesObjectsReferenceTest(TestCase)>>assert:
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


RevocablesObjectsReferenceTest(TestCase)>>should:raise:
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 
		aBlock: 	[target printString]
		anExceptionalEvent: 	AccessRevoqued
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


RevocablesObjectsReferenceTest>>testRevoqueAccessThenReenable
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 
		a: 	an Array(a RevocableObjectReference an Object)
		meta: 	a RevocableObjectReference
		target: 	an Object
	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


RevocablesObjectsReferenceTest(TestCase)>>performTest
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


[self setUp.
	self performTest] in RevocablesObjectsReferenceTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


RevocablesObjectsReferenceTest(TestCase)>>runCase
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RevocablesObjectsReferenceTest(TestCase)>>debug
		startpc: 	41
		numArgs: 	0


RevocablesObjectsReferenceTest(TestCase)>>debug
	Receiver: RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testRevoqueAccessThenReenable


[:each | each debug] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		each: 	RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477387
		result: 	39 run, 38 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable)
	Arguments and temporary variables: 
		aBlock: 	[:each | each debug]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil RevocablesObjectsReferenceTest>>#testRevoqueAccessThenR...etc...
		firstIndex: 	3
		lastIndex: 	3


[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477387
		result: 	39 run, 38 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


BlockClosure>>ensure:
	Receiver: [aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSui...etc...
	Arguments and temporary variables: 
		aBlock: 	[self basicTearDownSuite: aTestSuite]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>basicRunSuite:do:
		startpc: 	51
		numArgs: 	0


TestRunner>>basicRunSuite:do:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[:each | each debug]
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477387
		result: 	39 run, 38 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477387
		result: 	39 run, 38 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477387
		result: 	39 run, 38 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


TestRunner>>failedSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		categories: 	#(#'Announcements-Tests-Core' #'CollectionsTests-Abstract' #'Collec...etc...
		categoriesSelected: 	a Set(#'Handles-Tests-Security')
		classes: 	{AbstractLimitedCategoryIterator. HandleCategoryTest. HandleLimitedInt...etc...
		classIndex: 	0
		classesSelected: 	a Set(HandlePragmaTest PropagationFunctionalTest AbstractLimit...etc...
		failedList: 	an Array(RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReen...etc...
		failedSelected: 	RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable
		errorList: 	#()
		errorSelected: 	nil
		lastUpdate: 	3479477387
		result: 	39 run, 38 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpec...etc...
		previousRun: 	nil


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(995885056)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	510@193 corner: 821@386
		owner: 	a PluggableStandardWindow(940310528)
		submorphs: 	an Array(a ScrollBar(883163136) a TransformMorph(222822400))
		fullBounds: 	510@193 corner: 821@386
		color: 	Color white
		extension: 	a MorphExtension (433848320) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(154664960)
		scroller: 	a TransformMorph(222822400)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(883163136)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(506724352)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(995885056)
	Arguments and temporary variables: 
		event: 	[602@351 mouseUp 1981455 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	510@193 corner: 821@386
		owner: 	a PluggableStandardWindow(940310528)
		submorphs: 	an Array(a ScrollBar(883163136) a TransformMorph(222822400))
		fullBounds: 	510@193 corner: 821@386
		color: 	Color white
		extension: 	a MorphExtension (433848320) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(154664960)
		scroller: 	a TransformMorph(222822400)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(883163136)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(506724352)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(995885056)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
	Receiver's instance variables: 
		bounds: 	510@193 corner: 821@386
		owner: 	a PluggableStandardWindow(940310528)
		submorphs: 	an Array(a ScrollBar(883163136) a TransformMorph(222822400))
		fullBounds: 	510@193 corner: 821@386
		color: 	Color white
		extension: 	a MorphExtension (433848320) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(154664960)
		scroller: 	a TransformMorph(222822400)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(883163136)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(506724352)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [602@351 mouseUp 1981455 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(995885056)
	Receiver's instance variables: 
		timeStamp: 	1981455
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	602@351
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(995885056)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
	Receiver's instance variables: 
		bounds: 	510@193 corner: 821@386
		owner: 	a PluggableStandardWindow(940310528)
		submorphs: 	an Array(a ScrollBar(883163136) a TransformMorph(222822400))
		fullBounds: 	510@193 corner: 821@386
		color: 	Color white
		extension: 	a MorphExtension (433848320) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(154664960)
		scroller: 	a TransformMorph(222822400)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(883163136)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(506724352)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
		aMorph: 	a PluggableListMorph(995885056)
		localEvt: 	[602@351 mouseUp 1981455 nil]
		index: 	2
		child: 	a TransformMorph(222822400)
		morphs: 	an Array(a TransformMorph(222822400))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
		aMorph: 	a PluggableListMorph(995885056)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(995885056)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	510@193 corner: 821@386
		owner: 	a PluggableStandardWindow(940310528)
		submorphs: 	an Array(a ScrollBar(883163136) a TransformMorph(222822400))
		fullBounds: 	510@193 corner: 821@386
		color: 	Color white
		extension: 	a MorphExtension (433848320) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(154664960)
		scroller: 	a TransformMorph(222822400)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(883163136)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(506724352)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(995885056)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
	Receiver's instance variables: 
		bounds: 	510@193 corner: 821@386
		owner: 	a PluggableStandardWindow(940310528)
		submorphs: 	an Array(a ScrollBar(883163136) a TransformMorph(222822400))
		fullBounds: 	510@193 corner: 821@386
		color: 	Color white
		extension: 	a MorphExtension (433848320) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(154664960)
		scroller: 	a TransformMorph(222822400)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(883163136)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(506724352)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(995885056)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
	Receiver's instance variables: 
		bounds: 	510@193 corner: 821@386
		owner: 	a PluggableStandardWindow(940310528)
		submorphs: 	an Array(a ScrollBar(883163136) a TransformMorph(222822400))
		fullBounds: 	510@193 corner: 821@386
		color: 	Color white
		extension: 	a MorphExtension (433848320) [locked]  [externalName = Failure List ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.873 g: 0.873 b: 0.873)
		model: 	a TestRunner
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(154664960)
		scroller: 	a TransformMorph(222822400)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#failureMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(883163136)
		list: 	#('RevocablesObjectsReferenceTest>>#testRevoqueAccessThenReenable')
		getListSelector: 	#failedList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#failedSelected
		setIndexSelector: 	#failedSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(506724352)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
		focusHolder: 	a PluggableListMorph(995885056)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	602@351 corner: 618@367
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	602@351 corner: 618@367
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(968884224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@351 mouseUp 1981455 nil]
		targetOffset: 	92@158
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1981455 602 351 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(28049408) a Plug...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[602@351 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(28049408) a Plug...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
		focusHolder: 	a PluggableListMorph(995885056)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	602@351 corner: 618@367
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	602@351 corner: 618@367
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(968884224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@351 mouseUp 1981455 nil]
		targetOffset: 	92@158
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1981455 602 351 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
		focusHolder: 	a PluggableListMorph(995885056)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	602@351 corner: 618@367
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	602@351 corner: 618@367
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(968884224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@351 mouseUp 1981455 nil]
		targetOffset: 	92@158
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1981455 602 351 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
	Receiver's instance variables: 
		bounds: 	602@351 corner: 618@367
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	602@351 corner: 618@367
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(968884224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@351 mouseUp 1981455 nil]
		targetOffset: 	92@158
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1981455 602 351 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[602@351 mouseUp 1981455 nil]
		evt: 	[602@351 mouseUp 1981455 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	602@351 corner: 618@367
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	602@351 corner: 618@367
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(968884224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@351 mouseUp 1981455 nil]
		targetOffset: 	92@158
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1981455 602 351 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[602@351 mouseUp 1981455 nil]
		evtBuf: 	#(1 1981455 602 351 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	602@351 corner: 618@367
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	602@351 corner: 618@367
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(968884224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@351 mouseUp 1981455 nil]
		targetOffset: 	92@158
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1981455 602 351 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(864550912))(an Ove...etc...
		lastStepTime: 	1981448
		lastStepMessage: 	nil
		lastCycleTime: 	1981488
		alarms: 	a Heap()
		lastAlarmTime: 	1981448
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
RevocablesObjectsReferenceTest(TestCase)>>signalFailure:
RevocablesObjectsReferenceTest(TestCase)>>assert:
RevocablesObjectsReferenceTest(TestCase)>>should:raise:
RevocablesObjectsReferenceTest>>testRevoqueAccessThenReenable
RevocablesObjectsReferenceTest(TestCase)>>performTest
[self setUp.
	self performTest] in RevocablesObjectsReferenceTest(TestCase)>>runCase
BlockClosure>>ensure:
RevocablesObjectsReferenceTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in RevocablesObjectsReferenceTest(TestCase)>>debug
BlockClosure>>ensure:
RevocablesObjectsReferenceTest(TestCase)>>debug
[:each | each debug] in TestRunner>>debugSuite:
OrderedCollection>>do:
[aTestSuite name isEmptyOrNil
		ifTrue: [aTestSuite tests do: aBlock]
		ifFalse: [aTestSuite tests do: aBlock displayingProgress: aTestSuite name]] in TestRunner>>basicRunSuite:do:
BlockClosure>>ensure:
TestRunner>>basicRunSuite:do:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>failedSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Warning
5 April 2011 5:36:02 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

MorphicUIManager>>warningDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	Warning: You are about to load new versions of the following packa...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


Warning>>defaultAction
	Receiver: Warning: You are about to load new versions of the following packages that have unsaved ch...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'You are about to load new versions of the following packages that...etc...
		tag: 	nil
		signalContext: 	Warning(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	Warning: You are about to load new versions of the following package...etc...
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Warning: You are about to load new versions of the following package...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(860356608)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


Warning(Exception)>>signal
	Receiver: Warning: You are about to load new versions of the following packages that have unsaved ch...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'You are about to load new versions of the following packages that...etc...
		tag: 	nil
		signalContext: 	Warning(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


Warning(Exception)>>signal:
	Receiver: Warning: You are about to load new versions of the following packages that have unsaved ch...etc...
	Arguments and temporary variables: 
		signalerText: 	'You are about to load new versions of the following packages tha...etc...
	Receiver's instance variables: 
		messageText: 	'You are about to load new versions of the following packages that...etc...
		tag: 	nil
		signalContext: 	Warning(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


Warning class(Exception class)>>signal:
	Receiver: Warning
	Arguments and temporary variables: 
		signalerText: 	'You are about to load new versions of the following packages tha...etc...
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->(Warning>>#defaultAction "a Comp...etc...
		format: 	140
		instanceVariables: 	nil
		organization: 	('exceptionDescription' defaultAction)

		subclasses: 	{UndeclaredVariableWarning. Deprecation}
		name: 	#Warning
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Exceptions-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersionLoader(Object)>>notify:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'You are about to load new versions of the following packages that hav...etc...
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-jb.20))


MCVersionLoader>>warnAboutLosingChangesTo:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		versionCollection: 	an OrderedCollection(a MCVersion(Handles-jb.20))
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-jb.20))


MCVersionLoader>>checkForModifications
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		modifications: 	an OrderedCollection(a MCVersion(Handles-jb.20))
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-jb.20))


MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'Handles-jb.20'
		loader: 	nil
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-jb.20))


MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(Handles-jb.20))


MCVersionLoader class>>loadVersion:
	Receiver: MCVersionLoader
	Arguments and temporary variables: 
		aVersion: 	a MCVersion(Handles-jb.20)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependency:->(MCVersionLoader>>#addDependenc...etc...
		format: 	132
		instanceVariables: 	#('versions')
		organization: 	('*gofer-core-accessing' goferHasVersions goferVersions)
('*scrip...etc...
		subclasses: 	nil
		name: 	#MCVersionLoader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Monticello-Loading'
		traitComposition: 	nil
		localSelectors: 	nil


MCVersion>>load
	Receiver: a MCVersion(Handles-jb.20)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a MCPackage(Handles)
		info: 	a MCVersionInfo(Handles-jb.20)
		snapshot: 	a MCSnapshot
		dependencies: 	#()


[self version load] in MCFileRepositoryInspector(MCVersionInspector)>>load
	Receiver: a MCFileRepositoryInspector
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		version: 	a MCVersion(Handles-jb.20)
		repository: 	a MCHttpRepository(http://www.squeaksource.com/Handle)
		versions: 	#(#('Handles' 'bj' 16 'Handles-bj.16.mcz') #('Handles' 'bj' 17 'Handl...etc...
		loaded: 	a Set('Network-URI-MarcusDenker.28' 'Regex-Help-StephaneDucasse.2' 'Set...etc...
		newer: 	a Set('Handles')
		inherited: 	a Set('HostMenus-LaurentLaffont.53' 'Network-Url-TonyFleig.46' 'Morp...etc...
		packageList: 	an Array(a Text for 'HandleSupport' a Text for 'Handles' 'Alien-VM...etc...
		selectedPackage: 	'Handles'
		selectedVersion: 	'Handles-jb.20.mcz'
		order: 	5
		versionInfo: 	nil


BlockClosure>>ensure:
	Receiver: [self version load]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MCFileRepositoryInspector(MCVersionInspector)>>load
		startpc: 	39
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r11111111111111000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[self version load]
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


MCFileRepositoryInspector(MCVersionInspector)>>load
	Receiver: a MCFileRepositoryInspector
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		version: 	a MCVersion(Handles-jb.20)
		repository: 	a MCHttpRepository(http://www.squeaksource.com/Handle)
		versions: 	#(#('Handles' 'bj' 16 'Handles-bj.16.mcz') #('Handles' 'bj' 17 'Handl...etc...
		loaded: 	a Set('Network-URI-MarcusDenker.28' 'Regex-Help-StephaneDucasse.2' 'Set...etc...
		newer: 	a Set('Handles')
		inherited: 	a Set('HostMenus-LaurentLaffont.53' 'Network-Url-TonyFleig.46' 'Morp...etc...
		packageList: 	an Array(a Text for 'HandleSupport' a Text for 'Handles' 'Alien-VM...etc...
		selectedPackage: 	'Handles'
		selectedVersion: 	'Handles-jb.20.mcz'
		order: 	5
		versionInfo: 	nil


MCFileRepositoryInspector>>load
	Receiver: a MCFileRepositoryInspector
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	nil
		label: 	nil
		modal: 	false
		modalValue: 	nil
		version: 	a MCVersion(Handles-jb.20)
		repository: 	a MCHttpRepository(http://www.squeaksource.com/Handle)
		versions: 	#(#('Handles' 'bj' 16 'Handles-bj.16.mcz') #('Handles' 'bj' 17 'Handl...etc...
		loaded: 	a Set('Network-URI-MarcusDenker.28' 'Regex-Help-StephaneDucasse.2' 'Set...etc...
		newer: 	a Set('Handles')
		inherited: 	a Set('HostMenus-LaurentLaffont.53' 'Network-Url-TonyFleig.46' 'Morp...etc...
		packageList: 	an Array(a Text for 'HandleSupport' a Text for 'Handles' 'Alien-VM...etc...
		selectedPackage: 	'Handles'
		selectedVersion: 	'Handles-jb.20.mcz'
		order: 	5
		versionInfo: 	nil


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(909115392)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	806@171 corner: 860@197
		owner: 	a PluggableThemedOverflowPanelMorph(332136448)
		submorphs: 	an Array(an AlignmentMorph(929038336))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (212598784) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MCFileRepositoryInspector
		label: 	'Load'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#load
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasVersion


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(909115392)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(909115392)
		m: 	[834@184 mouseUp 17279 nil]
	Receiver's instance variables: 
		bounds: 	806@171 corner: 860@197
		owner: 	a PluggableThemedOverflowPanelMorph(332136448)
		submorphs: 	an Array(an AlignmentMorph(929038336))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (212598784) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MCFileRepositoryInspector
		label: 	'Load'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#load
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasVersion


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(454819840) a PluggableButtonMorph(662175744) a PluggableBu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	6
		indexLimiT: 	10
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(454819840) a PluggableButtonMorph(662175744) a PluggableBu...etc...

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(909115392)
	Arguments and temporary variables: 
		evt: 	[834@184 mouseUp 17279 nil]
		all: 	an Array(a PluggableButtonMorph(454819840) a PluggableButtonMorph(66217574...etc...
	Receiver's instance variables: 
		bounds: 	806@171 corner: 860@197
		owner: 	a PluggableThemedOverflowPanelMorph(332136448)
		submorphs: 	an Array(an AlignmentMorph(929038336))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (212598784) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MCFileRepositoryInspector
		label: 	'Load'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#load
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasVersion


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(909115392)
	Arguments and temporary variables: 
		anEvent: 	[834@184 mouseUp 17279 nil]
	Receiver's instance variables: 
		bounds: 	806@171 corner: 860@197
		owner: 	a PluggableThemedOverflowPanelMorph(332136448)
		submorphs: 	an Array(an AlignmentMorph(929038336))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (212598784) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MCFileRepositoryInspector
		label: 	'Load'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#load
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasVersion


MouseButtonEvent>>sentTo:
	Receiver: [834@184 mouseUp 17279 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(909115392)
	Receiver's instance variables: 
		timeStamp: 	17279
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	834@184
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(909115392)
	Arguments and temporary variables: 
		anEvent: 	[834@184 mouseUp 17279 nil]
	Receiver's instance variables: 
		bounds: 	806@171 corner: 860@197
		owner: 	a PluggableThemedOverflowPanelMorph(332136448)
		submorphs: 	an Array(an AlignmentMorph(929038336))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (212598784) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MCFileRepositoryInspector
		label: 	'Load'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#load
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasVersion


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(909115392)
	Arguments and temporary variables: 
		anEvent: 	[834@184 mouseUp 17279 nil]
	Receiver's instance variables: 
		bounds: 	806@171 corner: 860@197
		owner: 	a PluggableThemedOverflowPanelMorph(332136448)
		submorphs: 	an Array(an AlignmentMorph(929038336))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (212598784) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MCFileRepositoryInspector
		label: 	'Load'
		getStateSelector: 	#buttonSelected
		actionSelector: 	#load
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#hasVersion


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[834@184 mouseUp 17279 nil]
		focusHolder: 	a PluggableButtonMorph(909115392)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	834@184 corner: 850@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	834@184 corner: 850@200
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(131334144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[834@184 mouseUp 17279 nil]
		targetOffset: 	28@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17279 834 184 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PluggableStandardWindow(9300869...etc...
		fullBounds: 	0@0 corner: 1264@748
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[834@184 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PluggableStandardWindow(9300869...etc...
		fullBounds: 	0@0 corner: 1264@748
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[834@184 mouseUp 17279 nil]
		focusHolder: 	a PluggableButtonMorph(909115392)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	834@184 corner: 850@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	834@184 corner: 850@200
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(131334144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[834@184 mouseUp 17279 nil]
		targetOffset: 	28@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17279 834 184 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[834@184 mouseUp 17279 nil]
		focusHolder: 	a PluggableButtonMorph(909115392)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	834@184 corner: 850@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	834@184 corner: 850@200
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(131334144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[834@184 mouseUp 17279 nil]
		targetOffset: 	28@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17279 834 184 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[834@184 mouseUp 17279 nil]
	Receiver's instance variables: 
		bounds: 	834@184 corner: 850@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	834@184 corner: 850@200
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(131334144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[834@184 mouseUp 17279 nil]
		targetOffset: 	28@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17279 834 184 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[834@184 mouseUp 17279 nil]
		evt: 	[834@184 mouseUp 17279 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	834@184 corner: 850@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	834@184 corner: 850@200
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(131334144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[834@184 mouseUp 17279 nil]
		targetOffset: 	28@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17279 834 184 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[834@184 mouseUp 17279 nil]
		evtBuf: 	#(1 17279 834 184 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	834@184 corner: 850@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	834@184 corner: 850@200
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(131334144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[834@184 mouseUp 17279 nil]
		targetOffset: 	28@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17279 834 184 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1066926080))(an Ov...etc...
		lastStepTime: 	17272
		lastStepMessage: 	nil
		lastCycleTime: 	17292
		alarms: 	a Heap()
		lastAlarmTime: 	17272
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1264@748
		canvas: 	a FormCanvas on: DisplayScreen(1264x748x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1066926080))(an Ov...etc...
		lastStepTime: 	17272
		lastStepMessage: 	nil
		lastCycleTime: 	17292
		alarms: 	a Heap()
		lastAlarmTime: 	17272
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
MorphicUIManager>>warningDefaultAction:
Warning>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
Warning(Exception)>>signal
Warning(Exception)>>signal:
Warning class(Exception class)>>signal:
MCVersionLoader(Object)>>notify:
MCVersionLoader>>warnAboutLosingChangesTo:
MCVersionLoader>>checkForModifications
MCVersionLoader>>loadWithNameLike:
MCVersionLoader>>load
MCVersionLoader class>>loadVersion:
MCVersion>>load
[self version load] in MCFileRepositoryInspector(MCVersionInspector)>>load
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
MCFileRepositoryInspector(MCVersionInspector)>>load
MCFileRepositoryInspector>>load
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
5 April 2011 5:41:48 pm

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

RevocableControler(Handle)>>useShadowBehavior
	Receiver: a RevocableControler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a RevocableObjectReferenceWithPropagation
		classLookup: 	RevocableControler
		state: 	an Array(a FooBar RevoqueClass an Array(1 'thisIsString' an Object) 6)
		configuration: 	4


RevocableControler class(Handle class)>>initializeFor:to:
	Receiver: RevocableControler
	Arguments and temporary variables: 
		anObject: 	a RevocableObjectReferenceWithPropagation
		aShadowClass: 	RevocableControler
		handle: 	a RevocableControler
	Receiver's instance variables: 
		superclass: 	MetaHandle
		methodDict: 	a MethodDictionary(#grant->(RevocableControler>>#grant "a CompiledM...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified' grant revoke uninstall)

		subclasses: 	nil
		name: 	#RevocableControler
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	{}
		localSelectors: 	nil


RevocableControler class(Handle class)>>for:to:
	Receiver: RevocableControler
	Arguments and temporary variables: 
		anObject: 	a RevocableObjectReferenceWithPropagation
		aShadowClass: 	RevocableControler
		handle: 	nil
	Receiver's instance variables: 
		superclass: 	MetaHandle
		methodDict: 	a MethodDictionary(#grant->(RevocableControler>>#grant "a CompiledM...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified' grant revoke uninstall)

		subclasses: 	nil
		name: 	#RevocableControler
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	{}
		localSelectors: 	nil


RevocableControler class(MetaHandle class)>>for:
	Receiver: RevocableControler
	Arguments and temporary variables: 
		aHandle: 	a RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	MetaHandle
		methodDict: 	a MethodDictionary(#grant->(RevocableControler>>#grant "a CompiledM...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('as yet unclassified' grant revoke uninstall)

		subclasses: 	nil
		name: 	#RevocableControler
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	{}
		localSelectors: 	nil


Factory class>>for:
	Receiver: Factory
	Arguments and temporary variables: 
		anObject: 	a FooBar
		handle: 	a RevocableObjectReferenceWithPropagation
		factory: 	a Factory
		handleClass: 	RevocableObjectReferenceWithPropagation
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addToControllers:->(Factory>>#addToControllers:...etc...
		format: 	136
		instanceVariables: 	#('handleClass' 'controlers' 'controllers')
		organization: 	('as yet unclassified' addToControllers: handleClass printString)...etc...
		subclasses: 	nil
		name: 	#Factory
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Security-Revocables'
		traitComposition: 	{}
		localSelectors: 	nil


[ha := Factory for: a] in [100000000
		timesRepeat: [ha := Factory for: a]] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

SmallInteger(Integer)>>timesRepeat:
	Receiver: 100000000
	Arguments and temporary variables: 
		aBlock: 	[ha := Factory for: a]
		count: 	2422150
	Receiver's instance variables: 
100000000

[100000000
		timesRepeat: [ha := Factory for: a]] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[100000000
		timesRepeat: [ha := Factory for: a]]
		initialMilliseconds: 	269153
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->(Time>>#< "a CompiledMethod(693895168)") #=-...etc...
		format: 	134
		instanceVariables: 	#('seconds' 'nanos')
		organization: 	('ansi protocol' < = duration hash hour hour12 hour24 meridianAbb...etc...
		subclasses: 	nil
		name: 	#Time
		classPool: 	nil
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [100000000
		timesRepeat: [ha := Factory for: a]]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	45
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ [100000000
		timesRepeat: [ha := Factory for: a]] timeToRun...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(260308992)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '1 tinyBenchmarks  ''393846153 bytecodes/sec; 1...etc...
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 675@786
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 675@786
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 364343) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 send...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 675@786
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 675@786
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 364343) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 675@786
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 675@786
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 364343) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 675@786
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 675@786
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 364343) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 675@786
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 675@786
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 364343) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(263454720)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 675@786
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 675@786
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 364343) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 675@786
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 675@786
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 364343) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(436994048)
	Receiver's instance variables: 
		timeStamp: 	269134
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	388@105
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 675@786
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 675@786
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 364343) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 675@786
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 675@786
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 364343) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '1 tinyBenchmarks  ''393846153 bytecodes/sec; 10580494 sends/s...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	467@237 corner: 483@253
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	467@237 corner: 483@253
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(700448768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@225 467@237 mouseMove 269424 nil]
		targetOffset: 	388@105
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 269424 602 225 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(778043392) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1264@748
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a SystemWindow(778043392) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	467@237 corner: 483@253
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	467@237 corner: 483@253
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(700448768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@225 467@237 mouseMove 269424 nil]
		targetOffset: 	388@105
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 269424 602 225 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	467@237 corner: 483@253
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	467@237 corner: 483@253
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(700448768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@225 467@237 mouseMove 269424 nil]
		targetOffset: 	388@105
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 269424 602 225 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	467@237 corner: 483@253
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	467@237 corner: 483@253
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(700448768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[602@225 467@237 mouseMove 269424 nil]
		targetOffset: 	388@105
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 269424 602 225 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil



--- The full stack ---
RevocableControler(Handle)>>useShadowBehavior
RevocableControler class(Handle class)>>initializeFor:to:
RevocableControler class(Handle class)>>for:to:
RevocableControler class(MetaHandle class)>>for:
Factory class>>for:
[ha := Factory for: a] in [100000000
		timesRepeat: [ha := Factory for: a]] in UndefinedObject>>DoIt
SmallInteger(Integer)>>timesRepeat:
[100000000
		timesRepeat: [ha := Factory for: a]] in UndefinedObject>>DoIt
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MyBeeper class>>primitiveBeep
20 April 2011 10:37:27 am

VM: Mac OS - intel - 1067 - PharoCore1.1ALPHA of '19 October 2009' [Latest update: #11239] Squeak VM 4.2.2b1
Image: Pharo1.3a [Latest update: #13030]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/arnaudj/Desktop/GIT/Handle/Bench/TestImage
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/arnaudj/Library/Preferences/Squeak/Internet/My Squeak

MyBeeper class(Object)>>doesNotUnderstand: #primitiveBeep
	Receiver: MyBeeper
	Arguments and temporary variables: 
		aMessage: 	primitiveBeep
		exception: 	MessageNotUnderstood: MyBeeper class>>primitiveBeep
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#play->(MyBeeper>>#play "a CompiledMethod(691535...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('play interface' play)

		subclasses: 	nil
		name: 	#MyBeeper
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Handles-Tests-Classes'
		traitComposition: 	{}
		localSelectors: 	nil
		default: 	a MyBeeper


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'MyBeeper primitiveBeep'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a SmalltalkEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ MyBeeper primitiveBeep
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(316669952)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'MyBeeper primitiveBeep'
		requestor: 	a SmalltalkEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelection
		startpc: 	116
		numArgs: 	0


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>processKeyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(436994048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 515114) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'MyBeeper primitiveBeep'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'MyBeeper primitiveBeep'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 515114) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'MyBeeper primitiveBeep'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 515114) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'MyBeeper primitiveBeep'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 515114) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'MyBeeper primitiveBeep'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: StandardToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#StandardToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Base'
		traitComposition: 	nil
		localSelectors: 	nil


ToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(436994048)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		superclass: 	AppRegistry
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Applications'
		traitComposition: 	nil
		localSelectors: 	nil
		registeredClasses: 	an OrderedCollection(StandardToolSet)
		default: 	StandardToolSet


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 515114) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'MyBeeper primitiveBeep'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(263454720)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 515114) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'MyBeeper primitiveBeep'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 515114) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'MyBeeper primitiveBeep'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(436994048)
	Receiver's instance variables: 
		timeStamp: 	514493
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	152@33
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 515114) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'MyBeeper primitiveBeep'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(436994048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(0)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (108789760) [other:  (blinkStart -> 515114) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'MyBeeper primitiveBeep'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(263454720)
		acceptOnCR: 	false


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	396@697 corner: 412@713
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	396@697 corner: 412@713
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(159121408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[396@697 396@697 mouseMove CMD 513955 nil]
		targetOffset: 	137@36
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 513955 396 697 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1631@1006
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1033109504) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1631@1006
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1033109504) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	396@697 corner: 412@713
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	396@697 corner: 412@713
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(159121408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[396@697 396@697 mouseMove CMD 513955 nil]
		targetOffset: 	137@36
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 513955 396 697 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(436994048)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	396@697 corner: 412@713
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	396@697 corner: 412@713
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(159121408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[396@697 396@697 mouseMove CMD 513955 nil]
		targetOffset: 	137@36
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 513955 396 697 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	396@697 corner: 412@713
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	396@697 corner: 412@713
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(159121408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[396@697 396@697 mouseMove CMD 513955 nil]
		targetOffset: 	137@36
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 513955 396 697 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	396@697 corner: 412@713
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	396@697 corner: 412@713
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(159121408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[396@697 396@697 mouseMove CMD 513955 nil]
		targetOffset: 	137@36
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 513955 396 697 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 514493 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	396@697 corner: 412@713
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	396@697 corner: 412@713
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(159121408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[396@697 396@697 mouseMove CMD 513955 nil]
		targetOffset: 	137@36
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 513955 396 697 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1631@1006
		canvas: 	a FormCanvas on: DisplayScreen(1631x1006x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(792723456))(an Ove...etc...
		lastStepTime: 	514473
		lastStepMessage: 	nil
		lastCycleTime: 	514513
		alarms: 	a Heap()
		lastAlarmTime: 	514473
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1631@1006
		canvas: 	a FormCanvas on: DisplayScreen(1631x1006x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(792723456))(an Ove...etc...
		lastStepTime: 	514473
		lastStepMessage: 	nil
		lastCycleTime: 	514513
		alarms: 	a Heap()
		lastAlarmTime: 	514473
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1631@1006
		canvas: 	a FormCanvas on: DisplayScreen(1631x1006x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(792723456))(an Ove...etc...
		lastStepTime: 	514473
		lastStepMessage: 	nil
		lastCycleTime: 	514513
		alarms: 	a Heap()
		lastAlarmTime: 	514473
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1631@1006
		canvas: 	a FormCanvas on: DisplayScreen(1631x1006x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(792723456))(an Ove...etc...
		lastStepTime: 	514473
		lastStepMessage: 	nil
		lastCycleTime: 	514513
		alarms: 	a Heap()
		lastAlarmTime: 	514473
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1631@1006
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1033109504) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#changeSet->(Project>>#changeSet "a CompiledMeth...etc...
		format: 	144
		instanceVariables: 	#('world' 'changeSet' 'transcript' 'parentProject' 'displayD...etc...
		organization: 	('*Polymorph-Widgets' createTaskbarIfNecessary moveCollapsedWindo...etc...
		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#AllProjects->an OrderedCollection(a Project) #CurrentP...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
MyBeeper class(Object)>>doesNotUnderstand: #primitiveBeep
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self
		ifFail: [FakeClassPool adopt: nil.
			^ #failedDoit]
		logged: true] in SmalltalkEditor>>evaluateSelection
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>dispatchOn:
SmalltalkEditor(TextEditor)>>processKeyStroke:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolSet class>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

